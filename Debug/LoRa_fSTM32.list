
LoRa_fSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002684  08002684  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002684  08002684  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002684  08002684  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002684  08002684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800268c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000068  080026f4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080026f4  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcdc  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025a8  00000000  00000000  0002dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009c3a  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000007b8  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b40  00000000  00000000  0003a708  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000023e8  00000000  00000000  0003c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009216  00000000  00000000  0003e630  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007c20f  00000000  00000000  00047846  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c3a55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001804  00000000  00000000  000c3ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002578 	.word	0x08002578

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002578 	.word	0x08002578

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Magma_ECB_enc>:
	else
		return key + ((7 - (iter & 0x7)) << 2);
}

void Magma_ECB_enc(magma_ctx_t *ctx, const uint8_t *blk)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	4657      	mov	r7, sl
 8000228:	464e      	mov	r6, r9
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	0005      	movs	r5, r0
 800022e:	b08f      	sub	sp, #60	; 0x3c
	if (blk != ctx->out)
 8000230:	4288      	cmp	r0, r1
 8000232:	d002      	beq.n	800023a <Magma_ECB_enc+0x1a>
		memcpy(ctx->out, blk, MAGMA_DATA_SIZE);
 8000234:	2208      	movs	r2, #8
 8000236:	f001 fd7d 	bl	8001d34 <memcpy>
 800023a:	2318      	movs	r3, #24
 800023c:	469c      	mov	ip, r3
 800023e:	44ac      	add	ip, r5
 8000240:	4663      	mov	r3, ip
 8000242:	9309      	str	r3, [sp, #36]	; 0x24
 8000244:	78eb      	ldrb	r3, [r5, #3]
{
 8000246:	2200      	movs	r2, #0
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	792b      	ldrb	r3, [r5, #4]
 800024c:	4c90      	ldr	r4, [pc, #576]	; (8000490 <Magma_ECB_enc+0x270>)
 800024e:	469b      	mov	fp, r3
 8000250:	79eb      	ldrb	r3, [r5, #7]
 8000252:	0011      	movs	r1, r2
 8000254:	4699      	mov	r9, r3
 8000256:	782b      	ldrb	r3, [r5, #0]
 8000258:	9302      	str	r3, [sp, #8]
 800025a:	79ab      	ldrb	r3, [r5, #6]
 800025c:	4698      	mov	r8, r3
 800025e:	796b      	ldrb	r3, [r5, #5]
 8000260:	46c4      	mov	ip, r8
 8000262:	469a      	mov	sl, r3
 8000264:	78ab      	ldrb	r3, [r5, #2]
 8000266:	46d0      	mov	r8, sl
 8000268:	9303      	str	r3, [sp, #12]
 800026a:	786b      	ldrb	r3, [r5, #1]
 800026c:	9304      	str	r3, [sp, #16]
 800026e:	e081      	b.n	8000374 <Magma_ECB_enc+0x154>
		return key + ((iter & 0x7) << 2);
 8000270:	231c      	movs	r3, #28
 8000272:	008a      	lsls	r2, r1, #2
 8000274:	401a      	ands	r2, r3
 8000276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000278:	469a      	mov	sl, r3
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	4452      	add	r2, sl
 800027e:	9308      	str	r3, [sp, #32]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000280:	270f      	movs	r7, #15
		internal = a[i] + b[i] + (internal >> 8);
 8000282:	78d3      	ldrb	r3, [r2, #3]
 8000284:	7890      	ldrb	r0, [r2, #2]
		c[i] = internal & 0xff;
 8000286:	444b      	add	r3, r9
 8000288:	b2d9      	uxtb	r1, r3
		internal = a[i] + b[i] + (internal >> 8);
 800028a:	b29b      	uxth	r3, r3
 800028c:	4460      	add	r0, ip
 800028e:	0a1b      	lsrs	r3, r3, #8
 8000290:	7856      	ldrb	r6, [r2, #1]
 8000292:	181b      	adds	r3, r3, r0
 8000294:	b29b      	uxth	r3, r3
		c[i] = internal & 0xff;
 8000296:	b2d8      	uxtb	r0, r3
		internal = a[i] + b[i] + (internal >> 8);
 8000298:	4446      	add	r6, r8
 800029a:	0a1b      	lsrs	r3, r3, #8
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	199b      	adds	r3, r3, r6
 80002a0:	b29b      	uxth	r3, r3
		c[i] = internal & 0xff;
 80002a2:	b2de      	uxtb	r6, r3
		internal = a[i] + b[i] + (internal >> 8);
 80002a4:	445a      	add	r2, fp
 80002a6:	0a1b      	lsrs	r3, r3, #8
 80002a8:	189b      	adds	r3, r3, r2
		c[i] = internal & 0xff;
 80002aa:	b2db      	uxtb	r3, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80002ac:	091a      	lsrs	r2, r3, #4
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002ae:	403b      	ands	r3, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 80002b0:	0937      	lsrs	r7, r6, #4
 80002b2:	9707      	str	r7, [sp, #28]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002b4:	270f      	movs	r7, #15
 80002b6:	403e      	ands	r6, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 80002b8:	0907      	lsrs	r7, r0, #4
 80002ba:	9706      	str	r7, [sp, #24]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002bc:	270f      	movs	r7, #15
 80002be:	4038      	ands	r0, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 80002c0:	090f      	lsrs	r7, r1, #4
 80002c2:	9705      	str	r7, [sp, #20]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002c4:	270f      	movs	r7, #15
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002c6:	5ca2      	ldrb	r2, [r4, r2]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002c8:	18e3      	adds	r3, r4, r3
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002ca:	7c1b      	ldrb	r3, [r3, #16]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002cc:	4039      	ands	r1, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 80002ce:	9f07      	ldr	r7, [sp, #28]
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002d0:	0112      	lsls	r2, r2, #4
 80002d2:	431a      	orrs	r2, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80002d4:	19e3      	adds	r3, r4, r7
 80002d6:	3320      	adds	r3, #32
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002d8:	19a6      	adds	r6, r4, r6
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002da:	781b      	ldrb	r3, [r3, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002dc:	3630      	adds	r6, #48	; 0x30
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002de:	7836      	ldrb	r6, [r6, #0]
 80002e0:	011b      	lsls	r3, r3, #4
		first_part_byte = Pi[i * 2][first_part_byte];
 80002e2:	9f06      	ldr	r7, [sp, #24]
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002e4:	4333      	orrs	r3, r6
	out_data_32 = internal[0];
 80002e6:	b2d2      	uxtb	r2, r2
	out_data_32 = (out_data_32 << 8) + internal[1];
 80002e8:	0212      	lsls	r2, r2, #8
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	189b      	adds	r3, r3, r2
		first_part_byte = Pi[i * 2][first_part_byte];
 80002ee:	19e2      	adds	r2, r4, r7
 80002f0:	3240      	adds	r2, #64	; 0x40
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002f2:	1820      	adds	r0, r4, r0
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002f4:	7812      	ldrb	r2, [r2, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80002f6:	3050      	adds	r0, #80	; 0x50
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002f8:	7800      	ldrb	r0, [r0, #0]
 80002fa:	0112      	lsls	r2, r2, #4
		first_part_byte = Pi[i * 2][first_part_byte];
 80002fc:	9f05      	ldr	r7, [sp, #20]
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80002fe:	4302      	orrs	r2, r0
	out_data_32 = (out_data_32 << 8) + internal[2];
 8000300:	021b      	lsls	r3, r3, #8
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	18d2      	adds	r2, r2, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 8000306:	19e3      	adds	r3, r4, r7
 8000308:	3360      	adds	r3, #96	; 0x60
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800030a:	1861      	adds	r1, r4, r1
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800030c:	781b      	ldrb	r3, [r3, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800030e:	3170      	adds	r1, #112	; 0x70
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	430b      	orrs	r3, r1
	out_data_32 = (out_data_32 << 8) + internal[3];
 8000316:	0212      	lsls	r2, r2, #8
 8000318:	b2db      	uxtb	r3, r3
 800031a:	189b      	adds	r3, r3, r2
	out_data_32 = (out_data_32 << 11)|(out_data_32 >> 21);
 800031c:	2215      	movs	r2, #21
 800031e:	41d3      	rors	r3, r2
		c[i] = a[i] ^ b[i];
 8000320:	9a02      	ldr	r2, [sp, #8]
	out_data[0] = out_data_32 >> 24;
 8000322:	0e1e      	lsrs	r6, r3, #24
		c[i] = a[i] ^ b[i];
 8000324:	4072      	eors	r2, r6
 8000326:	b2d6      	uxtb	r6, r2
 8000328:	9a04      	ldr	r2, [sp, #16]
	out_data[1] = out_data_32 >> 16;
 800032a:	0c18      	lsrs	r0, r3, #16
		c[i] = a[i] ^ b[i];
 800032c:	4042      	eors	r2, r0
 800032e:	9903      	ldr	r1, [sp, #12]
 8000330:	b2d0      	uxtb	r0, r2
	out_data[2] = out_data_32 >> 8;
 8000332:	0a1a      	lsrs	r2, r3, #8
		c[i] = a[i] ^ b[i];
 8000334:	4051      	eors	r1, r2
 8000336:	b2ca      	uxtb	r2, r1
 8000338:	9901      	ldr	r1, [sp, #4]
 800033a:	464f      	mov	r7, r9
 800033c:	4059      	eors	r1, r3
 800033e:	b2cb      	uxtb	r3, r1
	memcpy(out_data, a_0, MAGMA_BLOCK_SIZE);
 8000340:	4659      	mov	r1, fp
 8000342:	7029      	strb	r1, [r5, #0]
 8000344:	4641      	mov	r1, r8
 8000346:	7069      	strb	r1, [r5, #1]
 8000348:	4661      	mov	r1, ip
 800034a:	9701      	str	r7, [sp, #4]
 800034c:	70a9      	strb	r1, [r5, #2]
 800034e:	465f      	mov	r7, fp
 8000350:	4649      	mov	r1, r9
	memcpy(out_data + MAGMA_BLOCK_SIZE, G, MAGMA_BLOCK_SIZE);
 8000352:	712e      	strb	r6, [r5, #4]
	memcpy(out_data, a_0, MAGMA_BLOCK_SIZE);
 8000354:	70e9      	strb	r1, [r5, #3]
	memcpy(out_data + MAGMA_BLOCK_SIZE, G, MAGMA_BLOCK_SIZE);
 8000356:	7168      	strb	r0, [r5, #5]
 8000358:	71aa      	strb	r2, [r5, #6]
 800035a:	71eb      	strb	r3, [r5, #7]
 800035c:	9908      	ldr	r1, [sp, #32]
 800035e:	9702      	str	r7, [sp, #8]
 8000360:	4667      	mov	r7, ip
 8000362:	9703      	str	r7, [sp, #12]
 8000364:	4647      	mov	r7, r8
 8000366:	9704      	str	r7, [sp, #16]

	for(uint8_t i = 0; i < 31; i++)
 8000368:	291f      	cmp	r1, #31
 800036a:	d010      	beq.n	800038e <Magma_ECB_enc+0x16e>
		c[i] = a[i] ^ b[i];
 800036c:	4680      	mov	r8, r0
 800036e:	4694      	mov	ip, r2
 8000370:	4699      	mov	r9, r3
 8000372:	46b3      	mov	fp, r6
	if (iter < 24)
 8000374:	2917      	cmp	r1, #23
 8000376:	d800      	bhi.n	800037a <Magma_ECB_enc+0x15a>
 8000378:	e77a      	b.n	8000270 <Magma_ECB_enc+0x50>
		return key + ((7 - (iter & 0x7)) << 2);
 800037a:	1c4b      	adds	r3, r1, #1
 800037c:	009a      	lsls	r2, r3, #2
 800037e:	9308      	str	r3, [sp, #32]
 8000380:	231c      	movs	r3, #28
 8000382:	4252      	negs	r2, r2
 8000384:	401a      	ands	r2, r3
 8000386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000388:	469a      	mov	sl, r3
 800038a:	4452      	add	r2, sl
 800038c:	e778      	b.n	8000280 <Magma_ECB_enc+0x60>
	memcpy(a_0, a + MAGMA_BLOCK_SIZE, MAGMA_BLOCK_SIZE);
 800038e:	ae0b      	add	r6, sp, #44	; 0x2c
 8000390:	1d2b      	adds	r3, r5, #4
 8000392:	0019      	movs	r1, r3
 8000394:	2204      	movs	r2, #4
 8000396:	0030      	movs	r0, r6
 8000398:	4698      	mov	r8, r3
 800039a:	f001 fccb 	bl	8001d34 <memcpy>
	memcpy(a_1, a, MAGMA_BLOCK_SIZE);
 800039e:	0029      	movs	r1, r5
 80003a0:	2204      	movs	r2, #4
 80003a2:	a80c      	add	r0, sp, #48	; 0x30
 80003a4:	f001 fcc6 	bl	8001d34 <memcpy>
		internal = a[i] + b[i] + (internal >> 8);
 80003a8:	7e2f      	ldrb	r7, [r5, #24]
 80003aa:	7eea      	ldrb	r2, [r5, #27]
 80003ac:	46bc      	mov	ip, r7
 80003ae:	78f3      	ldrb	r3, [r6, #3]
 80003b0:	7ea9      	ldrb	r1, [r5, #26]
		c[i] = internal & 0xff;
 80003b2:	189b      	adds	r3, r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	4692      	mov	sl, r2
		internal = a[i] + b[i] + (internal >> 8);
 80003b8:	78b2      	ldrb	r2, [r6, #2]
 80003ba:	7e68      	ldrb	r0, [r5, #25]
 80003bc:	1852      	adds	r2, r2, r1
 80003be:	0a1b      	lsrs	r3, r3, #8
 80003c0:	7871      	ldrb	r1, [r6, #1]
 80003c2:	189b      	adds	r3, r3, r2
		c[i] = internal & 0xff;
 80003c4:	b2da      	uxtb	r2, r3
		internal = a[i] + b[i] + (internal >> 8);
 80003c6:	1809      	adds	r1, r1, r0
 80003c8:	0a1b      	lsrs	r3, r3, #8
 80003ca:	7830      	ldrb	r0, [r6, #0]
 80003cc:	185b      	adds	r3, r3, r1
		c[i] = internal & 0xff;
 80003ce:	b2d9      	uxtb	r1, r3
		internal = a[i] + b[i] + (internal >> 8);
 80003d0:	4460      	add	r0, ip
 80003d2:	0a1b      	lsrs	r3, r3, #8
 80003d4:	181b      	adds	r3, r3, r0
		c[i] = internal & 0xff;
 80003d6:	b2db      	uxtb	r3, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80003d8:	0918      	lsrs	r0, r3, #4
 80003da:	4683      	mov	fp, r0
 80003dc:	0908      	lsrs	r0, r1, #4
 80003de:	4681      	mov	r9, r0
 80003e0:	0910      	lsrs	r0, r2, #4
 80003e2:	4684      	mov	ip, r0
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80003e4:	270f      	movs	r7, #15
 80003e6:	200f      	movs	r0, #15
 80003e8:	403b      	ands	r3, r7
 80003ea:	4010      	ands	r0, r2
 80003ec:	4039      	ands	r1, r7
 80003ee:	220f      	movs	r2, #15
 80003f0:	4657      	mov	r7, sl
 80003f2:	4017      	ands	r7, r2
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80003f4:	465a      	mov	r2, fp
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80003f6:	18e3      	adds	r3, r4, r3
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80003f8:	5ca2      	ldrb	r2, [r4, r2]
 80003fa:	7c1b      	ldrb	r3, [r3, #16]
 80003fc:	0112      	lsls	r2, r2, #4
 80003fe:	4313      	orrs	r3, r2
	out_data_32 = internal[0];
 8000400:	b2db      	uxtb	r3, r3
	out_data_32 = (out_data_32 << 8) + internal[1];
 8000402:	021b      	lsls	r3, r3, #8
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000404:	9001      	str	r0, [sp, #4]
		first_part_byte = Pi[i * 2][first_part_byte];
 8000406:	4650      	mov	r0, sl
	out_data_32 = (out_data_32 << 8) + internal[1];
 8000408:	469a      	mov	sl, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 800040a:	464b      	mov	r3, r9
 800040c:	4662      	mov	r2, ip
 800040e:	18e3      	adds	r3, r4, r3
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000410:	1861      	adds	r1, r4, r1
		first_part_byte = Pi[i * 2][first_part_byte];
 8000412:	3320      	adds	r3, #32
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000414:	781b      	ldrb	r3, [r3, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000416:	3130      	adds	r1, #48	; 0x30
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000418:	7809      	ldrb	r1, [r1, #0]
 800041a:	011b      	lsls	r3, r3, #4
 800041c:	430b      	orrs	r3, r1
		first_part_byte = Pi[i * 2][first_part_byte];
 800041e:	18a1      	adds	r1, r4, r2
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000420:	9a01      	ldr	r2, [sp, #4]
		first_part_byte = Pi[i * 2][first_part_byte];
 8000422:	3140      	adds	r1, #64	; 0x40
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000424:	18a2      	adds	r2, r4, r2
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000426:	7809      	ldrb	r1, [r1, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000428:	3250      	adds	r2, #80	; 0x50
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800042a:	7812      	ldrb	r2, [r2, #0]
		first_part_byte = Pi[i * 2][first_part_byte];
 800042c:	0900      	lsrs	r0, r0, #4
	out_data_32 = (out_data_32 << 8) + internal[1];
 800042e:	b2db      	uxtb	r3, r3
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000430:	0109      	lsls	r1, r1, #4
	out_data_32 = (out_data_32 << 8) + internal[1];
 8000432:	4453      	add	r3, sl
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000434:	4311      	orrs	r1, r2
		first_part_byte = Pi[i * 2][first_part_byte];
 8000436:	1820      	adds	r0, r4, r0
	out_data_32 = (out_data_32 << 8) + internal[2];
 8000438:	021b      	lsls	r3, r3, #8
		first_part_byte = Pi[i * 2][first_part_byte];
 800043a:	3060      	adds	r0, #96	; 0x60
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800043c:	19e4      	adds	r4, r4, r7
	out_data_32 = (out_data_32 << 8) + internal[2];
 800043e:	b2c9      	uxtb	r1, r1
 8000440:	18c9      	adds	r1, r1, r3
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000442:	3470      	adds	r4, #112	; 0x70
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000444:	7803      	ldrb	r3, [r0, #0]
 8000446:	7822      	ldrb	r2, [r4, #0]
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4313      	orrs	r3, r2
	out_data_32 = (out_data_32 << 11)|(out_data_32 >> 21);
 800044c:	2215      	movs	r2, #21
	out_data_32 = (out_data_32 << 8) + internal[3];
 800044e:	0209      	lsls	r1, r1, #8
 8000450:	b2db      	uxtb	r3, r3
 8000452:	185b      	adds	r3, r3, r1
	out_data_32 = (out_data_32 << 11)|(out_data_32 >> 21);
 8000454:	41d3      	rors	r3, r2
	out_data[3] = out_data_32;
 8000456:	a90d      	add	r1, sp, #52	; 0x34
	out_data[2] = out_data_32 >> 8;
 8000458:	0a1a      	lsrs	r2, r3, #8
	out_data[3] = out_data_32;
 800045a:	70cb      	strb	r3, [r1, #3]
	out_data[2] = out_data_32 >> 8;
 800045c:	708a      	strb	r2, [r1, #2]
	out_data[1] = out_data_32 >> 16;
 800045e:	0c1a      	lsrs	r2, r3, #16
	out_data[0] = out_data_32 >> 24;
 8000460:	0e1b      	lsrs	r3, r3, #24
	out_data[1] = out_data_32 >> 16;
 8000462:	704a      	strb	r2, [r1, #1]
	out_data[0] = out_data_32 >> 24;
 8000464:	700b      	strb	r3, [r1, #0]
		c[i] = a[i] ^ b[i];
 8000466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	memcpy(out_data, G, MAGMA_BLOCK_SIZE);
 800046a:	0028      	movs	r0, r5
		c[i] = a[i] ^ b[i];
 800046c:	4053      	eors	r3, r2
	memcpy(out_data, G, MAGMA_BLOCK_SIZE);
 800046e:	2204      	movs	r2, #4
		c[i] = a[i] ^ b[i];
 8000470:	930d      	str	r3, [sp, #52]	; 0x34
	memcpy(out_data, G, MAGMA_BLOCK_SIZE);
 8000472:	f001 fc5f 	bl	8001d34 <memcpy>
	memcpy(out_data + MAGMA_BLOCK_SIZE, a_0, MAGMA_BLOCK_SIZE);
 8000476:	2204      	movs	r2, #4
 8000478:	0031      	movs	r1, r6
 800047a:	4640      	mov	r0, r8
 800047c:	f001 fc5a 	bl	8001d34 <memcpy>
		G(get_iter_key(ctx->key_orig, i), ctx->out, ctx->out);
	G_Fin(get_iter_key(ctx->key_orig, 31), ctx->out, ctx->out);
}
 8000480:	b00f      	add	sp, #60	; 0x3c
 8000482:	bc3c      	pop	{r2, r3, r4, r5}
 8000484:	4690      	mov	r8, r2
 8000486:	4699      	mov	r9, r3
 8000488:	46a2      	mov	sl, r4
 800048a:	46ab      	mov	fp, r5
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	080025b0 	.word	0x080025b0

08000494 <Magma_Init>:
{
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	0004      	movs	r4, r0
 8000498:	b083      	sub	sp, #12
	memcpy(ctx->key_orig, key, MAGMA_KEY_SIZE);
 800049a:	2220      	movs	r2, #32
 800049c:	3018      	adds	r0, #24
 800049e:	f001 fc49 	bl	8001d34 <memcpy>
	memset(data, 0x00, MAGMA_DATA_SIZE);
 80004a2:	2208      	movs	r2, #8
 80004a4:	2100      	movs	r1, #0
 80004a6:	4668      	mov	r0, sp
 80004a8:	f001 fc4d 	bl	8001d46 <memset>
	Magma_ECB_enc(ctx, data);
 80004ac:	4669      	mov	r1, sp
 80004ae:	0020      	movs	r0, r4
 80004b0:	f7ff feb6 	bl	8000220 <Magma_ECB_enc>
	if (ctx->out[0] & 0x80)
 80004b4:	7823      	ldrb	r3, [r4, #0]
		tmp = (tmp << 8) + data[i];
 80004b6:	2100      	movs	r1, #0
	if (ctx->out[0] & 0x80)
 80004b8:	b25a      	sxtb	r2, r3
		tmp = (tmp << 8) + data[i];
 80004ba:	0218      	lsls	r0, r3, #8
	if (ctx->out[0] & 0x80)
 80004bc:	2a00      	cmp	r2, #0
 80004be:	da00      	bge.n	80004c2 <Magma_Init+0x2e>
 80004c0:	e09e      	b.n	8000600 <Magma_Init+0x16c>
		tmp = (tmp << 8) + data[i];
 80004c2:	2300      	movs	r3, #0
 80004c4:	7862      	ldrb	r2, [r4, #1]
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	4159      	adcs	r1, r3
 80004ca:	0e03      	lsrs	r3, r0, #24
 80004cc:	020f      	lsls	r7, r1, #8
 80004ce:	431f      	orrs	r7, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	78a2      	ldrb	r2, [r4, #2]
 80004d4:	0206      	lsls	r6, r0, #8
 80004d6:	1992      	adds	r2, r2, r6
 80004d8:	417b      	adcs	r3, r7
 80004da:	0219      	lsls	r1, r3, #8
 80004dc:	2300      	movs	r3, #0
 80004de:	0e15      	lsrs	r5, r2, #24
 80004e0:	0210      	lsls	r0, r2, #8
 80004e2:	78e2      	ldrb	r2, [r4, #3]
 80004e4:	4329      	orrs	r1, r5
 80004e6:	1812      	adds	r2, r2, r0
 80004e8:	414b      	adcs	r3, r1
 80004ea:	0219      	lsls	r1, r3, #8
 80004ec:	2300      	movs	r3, #0
 80004ee:	0e15      	lsrs	r5, r2, #24
 80004f0:	0210      	lsls	r0, r2, #8
 80004f2:	7922      	ldrb	r2, [r4, #4]
 80004f4:	4329      	orrs	r1, r5
 80004f6:	1812      	adds	r2, r2, r0
 80004f8:	414b      	adcs	r3, r1
 80004fa:	0219      	lsls	r1, r3, #8
 80004fc:	2300      	movs	r3, #0
 80004fe:	0e15      	lsrs	r5, r2, #24
 8000500:	0210      	lsls	r0, r2, #8
 8000502:	7962      	ldrb	r2, [r4, #5]
 8000504:	4329      	orrs	r1, r5
 8000506:	1812      	adds	r2, r2, r0
 8000508:	414b      	adcs	r3, r1
 800050a:	0219      	lsls	r1, r3, #8
 800050c:	2300      	movs	r3, #0
 800050e:	0e15      	lsrs	r5, r2, #24
 8000510:	0210      	lsls	r0, r2, #8
 8000512:	79a2      	ldrb	r2, [r4, #6]
 8000514:	4329      	orrs	r1, r5
 8000516:	1812      	adds	r2, r2, r0
 8000518:	414b      	adcs	r3, r1
 800051a:	0219      	lsls	r1, r3, #8
 800051c:	2300      	movs	r3, #0
 800051e:	0e15      	lsrs	r5, r2, #24
 8000520:	0210      	lsls	r0, r2, #8
 8000522:	79e2      	ldrb	r2, [r4, #7]
 8000524:	4329      	orrs	r1, r5
 8000526:	1812      	adds	r2, r2, r0
 8000528:	414b      	adcs	r3, r1
	tmp <<= i;
 800052a:	1892      	adds	r2, r2, r2
 800052c:	415b      	adcs	r3, r3
 800052e:	0015      	movs	r5, r2
		data[i] = tmp >> (56 - i * 8);
 8000530:	0e19      	lsrs	r1, r3, #24
 8000532:	7021      	strb	r1, [r4, #0]
 8000534:	0c19      	lsrs	r1, r3, #16
 8000536:	7061      	strb	r1, [r4, #1]
 8000538:	70e3      	strb	r3, [r4, #3]
 800053a:	0a19      	lsrs	r1, r3, #8
 800053c:	0e13      	lsrs	r3, r2, #24
 800053e:	7123      	strb	r3, [r4, #4]
 8000540:	0c2b      	lsrs	r3, r5, #16
 8000542:	7163      	strb	r3, [r4, #5]
 8000544:	0a2b      	lsrs	r3, r5, #8
 8000546:	70a1      	strb	r1, [r4, #2]
 8000548:	71a3      	strb	r3, [r4, #6]
 800054a:	71e5      	strb	r5, [r4, #7]
	memcpy(ctx->key_add1, ctx->out, MAGMA_ADD_KEY_SIZE);
 800054c:	0020      	movs	r0, r4
 800054e:	2208      	movs	r2, #8
 8000550:	0021      	movs	r1, r4
 8000552:	3008      	adds	r0, #8
 8000554:	f001 fbee 	bl	8001d34 <memcpy>
	if (ctx->out[0] & 0x80)
 8000558:	7825      	ldrb	r5, [r4, #0]
 800055a:	b26b      	sxtb	r3, r5
 800055c:	2b00      	cmp	r3, #0
 800055e:	da00      	bge.n	8000562 <Magma_Init+0xce>
 8000560:	e097      	b.n	8000692 <Magma_Init+0x1fe>
		tmp = (tmp << 8) + data[i];
 8000562:	2100      	movs	r1, #0
 8000564:	2300      	movs	r3, #0
 8000566:	7860      	ldrb	r0, [r4, #1]
 8000568:	022a      	lsls	r2, r5, #8
 800056a:	1812      	adds	r2, r2, r0
 800056c:	414b      	adcs	r3, r1
 800056e:	021f      	lsls	r7, r3, #8
 8000570:	2300      	movs	r3, #0
 8000572:	0e11      	lsrs	r1, r2, #24
 8000574:	0216      	lsls	r6, r2, #8
 8000576:	78a2      	ldrb	r2, [r4, #2]
 8000578:	430f      	orrs	r7, r1
 800057a:	1992      	adds	r2, r2, r6
 800057c:	417b      	adcs	r3, r7
 800057e:	0219      	lsls	r1, r3, #8
 8000580:	2300      	movs	r3, #0
 8000582:	0e15      	lsrs	r5, r2, #24
 8000584:	0210      	lsls	r0, r2, #8
 8000586:	78e2      	ldrb	r2, [r4, #3]
 8000588:	4329      	orrs	r1, r5
 800058a:	1812      	adds	r2, r2, r0
 800058c:	414b      	adcs	r3, r1
 800058e:	0219      	lsls	r1, r3, #8
 8000590:	2300      	movs	r3, #0
 8000592:	0e15      	lsrs	r5, r2, #24
 8000594:	0210      	lsls	r0, r2, #8
 8000596:	7922      	ldrb	r2, [r4, #4]
 8000598:	4329      	orrs	r1, r5
 800059a:	1812      	adds	r2, r2, r0
 800059c:	414b      	adcs	r3, r1
 800059e:	0219      	lsls	r1, r3, #8
 80005a0:	2300      	movs	r3, #0
 80005a2:	0e15      	lsrs	r5, r2, #24
 80005a4:	0210      	lsls	r0, r2, #8
 80005a6:	7962      	ldrb	r2, [r4, #5]
 80005a8:	4329      	orrs	r1, r5
 80005aa:	1812      	adds	r2, r2, r0
 80005ac:	414b      	adcs	r3, r1
 80005ae:	0219      	lsls	r1, r3, #8
 80005b0:	2300      	movs	r3, #0
 80005b2:	0e15      	lsrs	r5, r2, #24
 80005b4:	0210      	lsls	r0, r2, #8
 80005b6:	79a2      	ldrb	r2, [r4, #6]
 80005b8:	4329      	orrs	r1, r5
 80005ba:	1812      	adds	r2, r2, r0
 80005bc:	414b      	adcs	r3, r1
 80005be:	0219      	lsls	r1, r3, #8
 80005c0:	2300      	movs	r3, #0
 80005c2:	0e15      	lsrs	r5, r2, #24
 80005c4:	0210      	lsls	r0, r2, #8
 80005c6:	79e2      	ldrb	r2, [r4, #7]
 80005c8:	4329      	orrs	r1, r5
 80005ca:	1812      	adds	r2, r2, r0
 80005cc:	414b      	adcs	r3, r1
	tmp <<= i;
 80005ce:	1892      	adds	r2, r2, r2
 80005d0:	415b      	adcs	r3, r3
 80005d2:	0015      	movs	r5, r2
		data[i] = tmp >> (56 - i * 8);
 80005d4:	0e19      	lsrs	r1, r3, #24
 80005d6:	7021      	strb	r1, [r4, #0]
 80005d8:	0c19      	lsrs	r1, r3, #16
 80005da:	7061      	strb	r1, [r4, #1]
 80005dc:	70e3      	strb	r3, [r4, #3]
 80005de:	0a19      	lsrs	r1, r3, #8
 80005e0:	0e13      	lsrs	r3, r2, #24
 80005e2:	7123      	strb	r3, [r4, #4]
 80005e4:	0c2b      	lsrs	r3, r5, #16
 80005e6:	7163      	strb	r3, [r4, #5]
 80005e8:	0a2b      	lsrs	r3, r5, #8
 80005ea:	70a1      	strb	r1, [r4, #2]
 80005ec:	71a3      	strb	r3, [r4, #6]
 80005ee:	71e5      	strb	r5, [r4, #7]
	memcpy(ctx->key_add2, ctx->out, MAGMA_ADD_KEY_SIZE);
 80005f0:	0020      	movs	r0, r4
 80005f2:	2208      	movs	r2, #8
 80005f4:	0021      	movs	r1, r4
 80005f6:	3010      	adds	r0, #16
 80005f8:	f001 fb9c 	bl	8001d34 <memcpy>
}
 80005fc:	b003      	add	sp, #12
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp = (tmp << 8) + data[i];
 8000600:	2300      	movs	r3, #0
 8000602:	7862      	ldrb	r2, [r4, #1]
 8000604:	1812      	adds	r2, r2, r0
 8000606:	414b      	adcs	r3, r1
 8000608:	0219      	lsls	r1, r3, #8
 800060a:	2300      	movs	r3, #0
 800060c:	0e15      	lsrs	r5, r2, #24
 800060e:	0210      	lsls	r0, r2, #8
 8000610:	78a2      	ldrb	r2, [r4, #2]
 8000612:	4329      	orrs	r1, r5
 8000614:	1880      	adds	r0, r0, r2
 8000616:	4159      	adcs	r1, r3
 8000618:	020b      	lsls	r3, r1, #8
 800061a:	2100      	movs	r1, #0
 800061c:	0e05      	lsrs	r5, r0, #24
 800061e:	0202      	lsls	r2, r0, #8
 8000620:	78e0      	ldrb	r0, [r4, #3]
 8000622:	432b      	orrs	r3, r5
 8000624:	1812      	adds	r2, r2, r0
 8000626:	414b      	adcs	r3, r1
 8000628:	0219      	lsls	r1, r3, #8
 800062a:	2300      	movs	r3, #0
 800062c:	0e15      	lsrs	r5, r2, #24
 800062e:	0210      	lsls	r0, r2, #8
 8000630:	7922      	ldrb	r2, [r4, #4]
 8000632:	4329      	orrs	r1, r5
 8000634:	1880      	adds	r0, r0, r2
 8000636:	4159      	adcs	r1, r3
 8000638:	020b      	lsls	r3, r1, #8
 800063a:	2100      	movs	r1, #0
 800063c:	0e05      	lsrs	r5, r0, #24
 800063e:	0202      	lsls	r2, r0, #8
 8000640:	7960      	ldrb	r0, [r4, #5]
 8000642:	432b      	orrs	r3, r5
 8000644:	1812      	adds	r2, r2, r0
 8000646:	414b      	adcs	r3, r1
 8000648:	0219      	lsls	r1, r3, #8
 800064a:	2300      	movs	r3, #0
 800064c:	0e15      	lsrs	r5, r2, #24
 800064e:	0210      	lsls	r0, r2, #8
 8000650:	79a2      	ldrb	r2, [r4, #6]
 8000652:	4329      	orrs	r1, r5
 8000654:	1880      	adds	r0, r0, r2
 8000656:	4159      	adcs	r1, r3
 8000658:	020b      	lsls	r3, r1, #8
 800065a:	2100      	movs	r1, #0
 800065c:	0e05      	lsrs	r5, r0, #24
 800065e:	0202      	lsls	r2, r0, #8
 8000660:	79e0      	ldrb	r0, [r4, #7]
 8000662:	432b      	orrs	r3, r5
 8000664:	1812      	adds	r2, r2, r0
 8000666:	414b      	adcs	r3, r1
	tmp <<= i;
 8000668:	1892      	adds	r2, r2, r2
 800066a:	415b      	adcs	r3, r3
 800066c:	0015      	movs	r5, r2
		data[i] = tmp >> (56 - i * 8);
 800066e:	0e19      	lsrs	r1, r3, #24
 8000670:	7021      	strb	r1, [r4, #0]
 8000672:	0c19      	lsrs	r1, r3, #16
 8000674:	7061      	strb	r1, [r4, #1]
 8000676:	70e3      	strb	r3, [r4, #3]
 8000678:	0a19      	lsrs	r1, r3, #8
 800067a:	0e13      	lsrs	r3, r2, #24
 800067c:	7123      	strb	r3, [r4, #4]
 800067e:	0c2b      	lsrs	r3, r5, #16
 8000680:	7163      	strb	r3, [r4, #5]
 8000682:	0a2b      	lsrs	r3, r5, #8
 8000684:	71a3      	strb	r3, [r4, #6]
		ctx->out[7] ^= 0x33;
 8000686:	002a      	movs	r2, r5
 8000688:	2333      	movs	r3, #51	; 0x33
 800068a:	405a      	eors	r2, r3
		data[i] = tmp >> (56 - i * 8);
 800068c:	70a1      	strb	r1, [r4, #2]
		ctx->out[7] ^= 0x33;
 800068e:	71e2      	strb	r2, [r4, #7]
 8000690:	e75c      	b.n	800054c <Magma_Init+0xb8>
		tmp = (tmp << 8) + data[i];
 8000692:	2100      	movs	r1, #0
 8000694:	2300      	movs	r3, #0
 8000696:	7860      	ldrb	r0, [r4, #1]
 8000698:	022a      	lsls	r2, r5, #8
 800069a:	1812      	adds	r2, r2, r0
 800069c:	414b      	adcs	r3, r1
 800069e:	021f      	lsls	r7, r3, #8
 80006a0:	2300      	movs	r3, #0
 80006a2:	0e11      	lsrs	r1, r2, #24
 80006a4:	0216      	lsls	r6, r2, #8
 80006a6:	78a2      	ldrb	r2, [r4, #2]
 80006a8:	430f      	orrs	r7, r1
 80006aa:	1992      	adds	r2, r2, r6
 80006ac:	417b      	adcs	r3, r7
 80006ae:	0219      	lsls	r1, r3, #8
 80006b0:	2300      	movs	r3, #0
 80006b2:	0e15      	lsrs	r5, r2, #24
 80006b4:	0210      	lsls	r0, r2, #8
 80006b6:	78e2      	ldrb	r2, [r4, #3]
 80006b8:	4329      	orrs	r1, r5
 80006ba:	1880      	adds	r0, r0, r2
 80006bc:	4159      	adcs	r1, r3
 80006be:	020b      	lsls	r3, r1, #8
 80006c0:	2100      	movs	r1, #0
 80006c2:	0e05      	lsrs	r5, r0, #24
 80006c4:	0202      	lsls	r2, r0, #8
 80006c6:	7920      	ldrb	r0, [r4, #4]
 80006c8:	432b      	orrs	r3, r5
 80006ca:	1812      	adds	r2, r2, r0
 80006cc:	414b      	adcs	r3, r1
 80006ce:	0219      	lsls	r1, r3, #8
 80006d0:	2300      	movs	r3, #0
 80006d2:	0e15      	lsrs	r5, r2, #24
 80006d4:	0210      	lsls	r0, r2, #8
 80006d6:	7962      	ldrb	r2, [r4, #5]
 80006d8:	4329      	orrs	r1, r5
 80006da:	1880      	adds	r0, r0, r2
 80006dc:	4159      	adcs	r1, r3
 80006de:	020b      	lsls	r3, r1, #8
 80006e0:	2100      	movs	r1, #0
 80006e2:	0e05      	lsrs	r5, r0, #24
 80006e4:	0202      	lsls	r2, r0, #8
 80006e6:	79a0      	ldrb	r0, [r4, #6]
 80006e8:	432b      	orrs	r3, r5
 80006ea:	1812      	adds	r2, r2, r0
 80006ec:	414b      	adcs	r3, r1
 80006ee:	0219      	lsls	r1, r3, #8
 80006f0:	2300      	movs	r3, #0
 80006f2:	0e15      	lsrs	r5, r2, #24
 80006f4:	0210      	lsls	r0, r2, #8
 80006f6:	79e2      	ldrb	r2, [r4, #7]
 80006f8:	4329      	orrs	r1, r5
 80006fa:	1812      	adds	r2, r2, r0
 80006fc:	414b      	adcs	r3, r1
	tmp <<= i;
 80006fe:	1892      	adds	r2, r2, r2
 8000700:	415b      	adcs	r3, r3
 8000702:	0015      	movs	r5, r2
		data[i] = tmp >> (56 - i * 8);
 8000704:	0e19      	lsrs	r1, r3, #24
 8000706:	7021      	strb	r1, [r4, #0]
 8000708:	0c19      	lsrs	r1, r3, #16
 800070a:	7061      	strb	r1, [r4, #1]
 800070c:	70e3      	strb	r3, [r4, #3]
 800070e:	0a19      	lsrs	r1, r3, #8
 8000710:	0e13      	lsrs	r3, r2, #24
 8000712:	7123      	strb	r3, [r4, #4]
 8000714:	0c2b      	lsrs	r3, r5, #16
 8000716:	7163      	strb	r3, [r4, #5]
 8000718:	0a2b      	lsrs	r3, r5, #8
 800071a:	71a3      	strb	r3, [r4, #6]
		ctx->out[7] ^= 0x33;
 800071c:	002a      	movs	r2, r5
 800071e:	2333      	movs	r3, #51	; 0x33
 8000720:	405a      	eors	r2, r3
		data[i] = tmp >> (56 - i * 8);
 8000722:	70a1      	strb	r1, [r4, #2]
		ctx->out[7] ^= 0x33;
 8000724:	71e2      	strb	r2, [r4, #7]
 8000726:	e763      	b.n	80005f0 <Magma_Init+0x15c>

08000728 <Magma_ECB_dec>:

void Magma_ECB_dec(magma_ctx_t *ctx, const uint8_t *blk)
{
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4645      	mov	r5, r8
 800072c:	46de      	mov	lr, fp
 800072e:	4657      	mov	r7, sl
 8000730:	464e      	mov	r6, r9
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0005      	movs	r5, r0
 8000736:	b08f      	sub	sp, #60	; 0x3c
	if (blk != ctx->out)
 8000738:	4288      	cmp	r0, r1
 800073a:	d002      	beq.n	8000742 <Magma_ECB_dec+0x1a>
		memcpy(ctx->out, blk, MAGMA_DATA_SIZE);
 800073c:	2208      	movs	r2, #8
 800073e:	f001 faf9 	bl	8001d34 <memcpy>
 8000742:	2318      	movs	r3, #24
 8000744:	469c      	mov	ip, r3
 8000746:	44ac      	add	ip, r5
 8000748:	4663      	mov	r3, ip
 800074a:	9309      	str	r3, [sp, #36]	; 0x24
 800074c:	78eb      	ldrb	r3, [r5, #3]
 800074e:	4c96      	ldr	r4, [pc, #600]	; (80009a8 <Magma_ECB_dec+0x280>)
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	792b      	ldrb	r3, [r5, #4]
		sec_part_byte = (in_data[i] & 0x0f);
 8000754:	270f      	movs	r7, #15
 8000756:	469b      	mov	fp, r3
 8000758:	79eb      	ldrb	r3, [r5, #7]
 800075a:	469a      	mov	sl, r3
 800075c:	782b      	ldrb	r3, [r5, #0]
 800075e:	9303      	str	r3, [sp, #12]
 8000760:	79ab      	ldrb	r3, [r5, #6]
 8000762:	4698      	mov	r8, r3
 8000764:	796b      	ldrb	r3, [r5, #5]
 8000766:	4699      	mov	r9, r3
 8000768:	78ab      	ldrb	r3, [r5, #2]
 800076a:	9304      	str	r3, [sp, #16]
 800076c:	786b      	ldrb	r3, [r5, #1]
 800076e:	9305      	str	r3, [sp, #20]
{
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	425b      	negs	r3, r3
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	339f      	adds	r3, #159	; 0x9f
 8000778:	469c      	mov	ip, r3
 800077a:	4643      	mov	r3, r8
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	e003      	b.n	8000788 <Magma_ECB_dec+0x60>
		c[i] = a[i] ^ b[i];
 8000780:	4689      	mov	r9, r1
 8000782:	469a      	mov	sl, r3
 8000784:	4683      	mov	fp, r0
 8000786:	9200      	str	r2, [sp, #0]
	if (iter < 24)
 8000788:	4663      	mov	r3, ip
 800078a:	2b17      	cmp	r3, #23
 800078c:	d800      	bhi.n	8000790 <Magma_ECB_dec+0x68>
 800078e:	e101      	b.n	8000994 <Magma_ECB_dec+0x26c>
		return key + ((7 - (iter & 0x7)) << 2);
 8000790:	221c      	movs	r2, #28
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	401a      	ands	r2, r3
 8000796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000798:	4698      	mov	r8, r3
 800079a:	4442      	add	r2, r8
		internal = a[i] + b[i] + (internal >> 8);
 800079c:	9e00      	ldr	r6, [sp, #0]
 800079e:	78d3      	ldrb	r3, [r2, #3]
 80007a0:	46b0      	mov	r8, r6
 80007a2:	7890      	ldrb	r0, [r2, #2]
		c[i] = internal & 0xff;
 80007a4:	4453      	add	r3, sl
 80007a6:	b2d9      	uxtb	r1, r3
		internal = a[i] + b[i] + (internal >> 8);
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4440      	add	r0, r8
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	7856      	ldrb	r6, [r2, #1]
 80007b0:	181b      	adds	r3, r3, r0
 80007b2:	b29b      	uxth	r3, r3
		c[i] = internal & 0xff;
 80007b4:	b2d8      	uxtb	r0, r3
		internal = a[i] + b[i] + (internal >> 8);
 80007b6:	444e      	add	r6, r9
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	199b      	adds	r3, r3, r6
 80007be:	b29b      	uxth	r3, r3
		c[i] = internal & 0xff;
 80007c0:	b2de      	uxtb	r6, r3
		internal = a[i] + b[i] + (internal >> 8);
 80007c2:	445a      	add	r2, fp
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	189b      	adds	r3, r3, r2
		c[i] = internal & 0xff;
 80007c8:	b2db      	uxtb	r3, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80007ca:	091a      	lsrs	r2, r3, #4
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80007cc:	403b      	ands	r3, r7
 80007ce:	4698      	mov	r8, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80007d0:	0933      	lsrs	r3, r6, #4
 80007d2:	9308      	str	r3, [sp, #32]
 80007d4:	0903      	lsrs	r3, r0, #4
 80007d6:	9307      	str	r3, [sp, #28]
 80007d8:	090b      	lsrs	r3, r1, #4
 80007da:	9306      	str	r3, [sp, #24]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80007dc:	4643      	mov	r3, r8
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80007de:	5ca2      	ldrb	r2, [r4, r2]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80007e0:	18e3      	adds	r3, r4, r3
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80007e2:	7c1b      	ldrb	r3, [r3, #16]
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	431a      	orrs	r2, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80007e8:	9b08      	ldr	r3, [sp, #32]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80007ea:	403e      	ands	r6, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 80007ec:	18e3      	adds	r3, r4, r3
 80007ee:	3320      	adds	r3, #32
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80007f0:	19a6      	adds	r6, r4, r6
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80007f2:	781b      	ldrb	r3, [r3, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80007f4:	3630      	adds	r6, #48	; 0x30
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80007f6:	7836      	ldrb	r6, [r6, #0]
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4333      	orrs	r3, r6
	out_data_32 = internal[0];
 80007fc:	b2d2      	uxtb	r2, r2
	out_data_32 = (out_data_32 << 8) + internal[1];
 80007fe:	0212      	lsls	r2, r2, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	189b      	adds	r3, r3, r2
		first_part_byte = Pi[i * 2][first_part_byte];
 8000804:	9a07      	ldr	r2, [sp, #28]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000806:	4038      	ands	r0, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 8000808:	18a2      	adds	r2, r4, r2
 800080a:	3240      	adds	r2, #64	; 0x40
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800080c:	1820      	adds	r0, r4, r0
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800080e:	7812      	ldrb	r2, [r2, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000810:	3050      	adds	r0, #80	; 0x50
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000812:	7800      	ldrb	r0, [r0, #0]
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	4302      	orrs	r2, r0
	out_data_32 = (out_data_32 << 8) + internal[2];
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	18d2      	adds	r2, r2, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 800081e:	9b06      	ldr	r3, [sp, #24]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000820:	4039      	ands	r1, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 8000822:	18e3      	adds	r3, r4, r3
 8000824:	3360      	adds	r3, #96	; 0x60
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000826:	1861      	adds	r1, r4, r1
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000828:	781b      	ldrb	r3, [r3, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800082a:	3170      	adds	r1, #112	; 0x70
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800082c:	7809      	ldrb	r1, [r1, #0]
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	430b      	orrs	r3, r1
	out_data_32 = (out_data_32 << 8) + internal[3];
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	b2db      	uxtb	r3, r3
 8000836:	189b      	adds	r3, r3, r2
	out_data_32 = (out_data_32 << 11)|(out_data_32 >> 21);
 8000838:	2215      	movs	r2, #21
 800083a:	41d3      	rors	r3, r2
		c[i] = a[i] ^ b[i];
 800083c:	9a03      	ldr	r2, [sp, #12]
	out_data[0] = out_data_32 >> 24;
 800083e:	0e18      	lsrs	r0, r3, #24
		c[i] = a[i] ^ b[i];
 8000840:	4042      	eors	r2, r0
 8000842:	b2d0      	uxtb	r0, r2
 8000844:	9a05      	ldr	r2, [sp, #20]
	out_data[1] = out_data_32 >> 16;
 8000846:	0c19      	lsrs	r1, r3, #16
		c[i] = a[i] ^ b[i];
 8000848:	404a      	eors	r2, r1
 800084a:	9e04      	ldr	r6, [sp, #16]
 800084c:	b2d1      	uxtb	r1, r2
	out_data[2] = out_data_32 >> 8;
 800084e:	0a1a      	lsrs	r2, r3, #8
		c[i] = a[i] ^ b[i];
 8000850:	4056      	eors	r6, r2
 8000852:	b2f2      	uxtb	r2, r6
 8000854:	9e02      	ldr	r6, [sp, #8]
	memcpy(out_data + MAGMA_BLOCK_SIZE, G, MAGMA_BLOCK_SIZE);
 8000856:	7128      	strb	r0, [r5, #4]
		c[i] = a[i] ^ b[i];
 8000858:	405e      	eors	r6, r3
 800085a:	b2f3      	uxtb	r3, r6
	memcpy(out_data, a_0, MAGMA_BLOCK_SIZE);
 800085c:	465e      	mov	r6, fp
 800085e:	702e      	strb	r6, [r5, #0]
 8000860:	464e      	mov	r6, r9
 8000862:	706e      	strb	r6, [r5, #1]
 8000864:	9e00      	ldr	r6, [sp, #0]
	memcpy(out_data + MAGMA_BLOCK_SIZE, G, MAGMA_BLOCK_SIZE);
 8000866:	7169      	strb	r1, [r5, #5]
	memcpy(out_data, a_0, MAGMA_BLOCK_SIZE);
 8000868:	70ae      	strb	r6, [r5, #2]
 800086a:	4656      	mov	r6, sl
 800086c:	70ee      	strb	r6, [r5, #3]

	for(uint8_t i = 31; i > 0; i--)
 800086e:	4666      	mov	r6, ip
 8000870:	3e01      	subs	r6, #1
 8000872:	b2f6      	uxtb	r6, r6
 8000874:	46b4      	mov	ip, r6
	memcpy(out_data + MAGMA_BLOCK_SIZE, G, MAGMA_BLOCK_SIZE);
 8000876:	71aa      	strb	r2, [r5, #6]
 8000878:	71eb      	strb	r3, [r5, #7]
 800087a:	9e01      	ldr	r6, [sp, #4]
 800087c:	3604      	adds	r6, #4
 800087e:	9601      	str	r6, [sp, #4]
 8000880:	4656      	mov	r6, sl
 8000882:	9602      	str	r6, [sp, #8]
 8000884:	465e      	mov	r6, fp
 8000886:	9603      	str	r6, [sp, #12]
 8000888:	9e00      	ldr	r6, [sp, #0]
 800088a:	9604      	str	r6, [sp, #16]
 800088c:	464e      	mov	r6, r9
 800088e:	9605      	str	r6, [sp, #20]
	for(uint8_t i = 31; i > 0; i--)
 8000890:	4666      	mov	r6, ip
 8000892:	2e00      	cmp	r6, #0
 8000894:	d000      	beq.n	8000898 <Magma_ECB_dec+0x170>
 8000896:	e773      	b.n	8000780 <Magma_ECB_dec+0x58>
	memcpy(a_0, a + MAGMA_BLOCK_SIZE, MAGMA_BLOCK_SIZE);
 8000898:	1d2b      	adds	r3, r5, #4
 800089a:	0019      	movs	r1, r3
 800089c:	2204      	movs	r2, #4
 800089e:	a80b      	add	r0, sp, #44	; 0x2c
 80008a0:	4698      	mov	r8, r3
 80008a2:	f001 fa47 	bl	8001d34 <memcpy>
	memcpy(a_1, a, MAGMA_BLOCK_SIZE);
 80008a6:	0029      	movs	r1, r5
 80008a8:	2204      	movs	r2, #4
 80008aa:	a80c      	add	r0, sp, #48	; 0x30
 80008ac:	f001 fa42 	bl	8001d34 <memcpy>
		internal = a[i] + b[i] + (internal >> 8);
 80008b0:	7e2e      	ldrb	r6, [r5, #24]
 80008b2:	ab0a      	add	r3, sp, #40	; 0x28
 80008b4:	7eea      	ldrb	r2, [r5, #27]
 80008b6:	46b4      	mov	ip, r6
 80008b8:	79db      	ldrb	r3, [r3, #7]
 80008ba:	7ea9      	ldrb	r1, [r5, #26]
		c[i] = internal & 0xff;
 80008bc:	189b      	adds	r3, r3, r2
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4692      	mov	sl, r2
		internal = a[i] + b[i] + (internal >> 8);
 80008c2:	aa0a      	add	r2, sp, #40	; 0x28
 80008c4:	7992      	ldrb	r2, [r2, #6]
 80008c6:	7e68      	ldrb	r0, [r5, #25]
 80008c8:	1852      	adds	r2, r2, r1
 80008ca:	a90a      	add	r1, sp, #40	; 0x28
 80008cc:	7949      	ldrb	r1, [r1, #5]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	1809      	adds	r1, r1, r0
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	a80a      	add	r0, sp, #40	; 0x28
		c[i] = internal & 0xff;
 80008d6:	b2da      	uxtb	r2, r3
		internal = a[i] + b[i] + (internal >> 8);
 80008d8:	7900      	ldrb	r0, [r0, #4]
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	185b      	adds	r3, r3, r1
		c[i] = internal & 0xff;
 80008de:	b2d9      	uxtb	r1, r3
		internal = a[i] + b[i] + (internal >> 8);
 80008e0:	4460      	add	r0, ip
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	181b      	adds	r3, r3, r0
		c[i] = internal & 0xff;
 80008e6:	b2db      	uxtb	r3, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 80008e8:	0918      	lsrs	r0, r3, #4
 80008ea:	4683      	mov	fp, r0
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80008ec:	4656      	mov	r6, sl
		first_part_byte = Pi[i * 2][first_part_byte];
 80008ee:	0908      	lsrs	r0, r1, #4
 80008f0:	4681      	mov	r9, r0
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80008f2:	403b      	ands	r3, r7
		first_part_byte = Pi[i * 2][first_part_byte];
 80008f4:	0910      	lsrs	r0, r2, #4
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80008f6:	4039      	ands	r1, r7
 80008f8:	403a      	ands	r2, r7
 80008fa:	4037      	ands	r7, r6
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 80008fc:	465e      	mov	r6, fp
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 80008fe:	18e3      	adds	r3, r4, r3
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000900:	5da6      	ldrb	r6, [r4, r6]
 8000902:	7c1b      	ldrb	r3, [r3, #16]
 8000904:	0136      	lsls	r6, r6, #4
 8000906:	4333      	orrs	r3, r6
	out_data_32 = internal[0];
 8000908:	b2db      	uxtb	r3, r3
	out_data_32 = (out_data_32 << 8) + internal[1];
 800090a:	021b      	lsls	r3, r3, #8
		first_part_byte = Pi[i * 2][first_part_byte];
 800090c:	4684      	mov	ip, r0
 800090e:	4650      	mov	r0, sl
	out_data_32 = (out_data_32 << 8) + internal[1];
 8000910:	469a      	mov	sl, r3
		first_part_byte = Pi[i * 2][first_part_byte];
 8000912:	464b      	mov	r3, r9
 8000914:	18e3      	adds	r3, r4, r3
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000916:	1861      	adds	r1, r4, r1
		first_part_byte = Pi[i * 2][first_part_byte];
 8000918:	3320      	adds	r3, #32
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800091a:	781b      	ldrb	r3, [r3, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800091c:	3130      	adds	r1, #48	; 0x30
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800091e:	7809      	ldrb	r1, [r1, #0]
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	430b      	orrs	r3, r1
		first_part_byte = Pi[i * 2][first_part_byte];
 8000924:	4661      	mov	r1, ip
 8000926:	1861      	adds	r1, r4, r1
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000928:	18a2      	adds	r2, r4, r2
		first_part_byte = Pi[i * 2][first_part_byte];
 800092a:	3140      	adds	r1, #64	; 0x40
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800092c:	7809      	ldrb	r1, [r1, #0]
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 800092e:	3250      	adds	r2, #80	; 0x50
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000930:	7812      	ldrb	r2, [r2, #0]
		first_part_byte = Pi[i * 2][first_part_byte];
 8000932:	0900      	lsrs	r0, r0, #4
	out_data_32 = (out_data_32 << 8) + internal[1];
 8000934:	b2db      	uxtb	r3, r3
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 8000936:	0109      	lsls	r1, r1, #4
	out_data_32 = (out_data_32 << 8) + internal[1];
 8000938:	4453      	add	r3, sl
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800093a:	4311      	orrs	r1, r2
		first_part_byte = Pi[i * 2][first_part_byte];
 800093c:	1820      	adds	r0, r4, r0
	out_data_32 = (out_data_32 << 8) + internal[2];
 800093e:	021b      	lsls	r3, r3, #8
		first_part_byte = Pi[i * 2][first_part_byte];
 8000940:	3060      	adds	r0, #96	; 0x60
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000942:	19e4      	adds	r4, r4, r7
	out_data_32 = (out_data_32 << 8) + internal[2];
 8000944:	b2c9      	uxtb	r1, r1
 8000946:	18c9      	adds	r1, r1, r3
		sec_part_byte = Pi[i * 2 + 1][sec_part_byte];
 8000948:	3470      	adds	r4, #112	; 0x70
		out_data[i] = (first_part_byte << 4) | sec_part_byte;
 800094a:	7803      	ldrb	r3, [r0, #0]
 800094c:	7822      	ldrb	r2, [r4, #0]
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	4313      	orrs	r3, r2
	out_data_32 = (out_data_32 << 11)|(out_data_32 >> 21);
 8000952:	2215      	movs	r2, #21
	out_data_32 = (out_data_32 << 8) + internal[3];
 8000954:	0209      	lsls	r1, r1, #8
 8000956:	b2db      	uxtb	r3, r3
 8000958:	185b      	adds	r3, r3, r1
	out_data_32 = (out_data_32 << 11)|(out_data_32 >> 21);
 800095a:	41d3      	rors	r3, r2
	out_data[3] = out_data_32;
 800095c:	a90d      	add	r1, sp, #52	; 0x34
	out_data[2] = out_data_32 >> 8;
 800095e:	0a1a      	lsrs	r2, r3, #8
	out_data[3] = out_data_32;
 8000960:	70cb      	strb	r3, [r1, #3]
	out_data[2] = out_data_32 >> 8;
 8000962:	708a      	strb	r2, [r1, #2]
	out_data[1] = out_data_32 >> 16;
 8000964:	0c1a      	lsrs	r2, r3, #16
	out_data[0] = out_data_32 >> 24;
 8000966:	0e1b      	lsrs	r3, r3, #24
	out_data[1] = out_data_32 >> 16;
 8000968:	704a      	strb	r2, [r1, #1]
	out_data[0] = out_data_32 >> 24;
 800096a:	700b      	strb	r3, [r1, #0]
		c[i] = a[i] ^ b[i];
 800096c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800096e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	memcpy(out_data, G, MAGMA_BLOCK_SIZE);
 8000970:	0028      	movs	r0, r5
		c[i] = a[i] ^ b[i];
 8000972:	4053      	eors	r3, r2
	memcpy(out_data, G, MAGMA_BLOCK_SIZE);
 8000974:	2204      	movs	r2, #4
		c[i] = a[i] ^ b[i];
 8000976:	930d      	str	r3, [sp, #52]	; 0x34
	memcpy(out_data, G, MAGMA_BLOCK_SIZE);
 8000978:	f001 f9dc 	bl	8001d34 <memcpy>
	memcpy(out_data + MAGMA_BLOCK_SIZE, a_0, MAGMA_BLOCK_SIZE);
 800097c:	2204      	movs	r2, #4
 800097e:	a90b      	add	r1, sp, #44	; 0x2c
 8000980:	4640      	mov	r0, r8
 8000982:	f001 f9d7 	bl	8001d34 <memcpy>
		G(get_iter_key(ctx->key_orig, i), ctx->out, ctx->out);
	G_Fin(get_iter_key(ctx->key_orig, 0), ctx->out, ctx->out);
}
 8000986:	b00f      	add	sp, #60	; 0x3c
 8000988:	bc3c      	pop	{r2, r3, r4, r5}
 800098a:	4690      	mov	r8, r2
 800098c:	4699      	mov	r9, r3
 800098e:	46a2      	mov	sl, r4
 8000990:	46ab      	mov	fp, r5
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return key + ((iter & 0x7) << 2);
 8000994:	2304      	movs	r3, #4
 8000996:	9a01      	ldr	r2, [sp, #4]
 8000998:	425b      	negs	r3, r3
 800099a:	1a9a      	subs	r2, r3, r2
 800099c:	3320      	adds	r3, #32
 800099e:	401a      	ands	r2, r3
 80009a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009a2:	4698      	mov	r8, r3
 80009a4:	4442      	add	r2, r8
 80009a6:	e6f9      	b.n	800079c <Magma_ECB_dec+0x74>
 80009a8:	080025b0 	.word	0x080025b0

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b510      	push	{r4, lr}
 80009ae:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b0:	2230      	movs	r2, #48	; 0x30
 80009b2:	2100      	movs	r1, #0
 80009b4:	a812      	add	r0, sp, #72	; 0x48
 80009b6:	f001 f9c6 	bl	8001d46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	2214      	movs	r2, #20
 80009bc:	2100      	movs	r1, #0
 80009be:	a801      	add	r0, sp, #4
 80009c0:	f001 f9c1 	bl	8001d46 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c4:	2228      	movs	r2, #40	; 0x28
 80009c6:	2100      	movs	r1, #0
 80009c8:	a806      	add	r0, sp, #24
 80009ca:	f001 f9bc 	bl	8001d46 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ce:	4914      	ldr	r1, [pc, #80]	; (8000a20 <SystemClock_Config+0x74>)
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <SystemClock_Config+0x78>)
 80009d2:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d4:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	401a      	ands	r2, r3
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4313      	orrs	r3, r2
 80009de:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80009e0:	2321      	movs	r3, #33	; 0x21
 80009e2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	025b      	lsls	r3, r3, #9
 80009e8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009ea:	2301      	movs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009ee:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f0:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f000 fbb5 	bl	8001160 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f8:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009fe:	3b0d      	subs	r3, #13
 8000a00:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a04:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a08:	f000 feea 	bl	80017e0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	9306      	str	r3, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a10:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a12:	a806      	add	r0, sp, #24
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a14:	04db      	lsls	r3, r3, #19
 8000a16:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f000 fff6 	bl	8001a08 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000a1c:	b01e      	add	sp, #120	; 0x78
 8000a1e:	bd10      	pop	{r4, pc}
 8000a20:	40007000 	.word	0x40007000
 8000a24:	ffffe7ff 	.word	0xffffe7ff

08000a28 <main>:
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2502      	movs	r5, #2
{
 8000a30:	b0b5      	sub	sp, #212	; 0xd4
  HAL_Init();
 8000a32:	f000 f997 	bl	8000d64 <HAL_Init>
  SystemClock_Config();
 8000a36:	f7ff ffb9 	bl	80009ac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	2214      	movs	r2, #20
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	a81b      	add	r0, sp, #108	; 0x6c
 8000a40:	f001 f981 	bl	8001d46 <memset>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a44:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <main+0x148>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a48:	2110      	movs	r1, #16
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a4c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	433a      	orrs	r2, r7
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	403a      	ands	r2, r7
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a5e:	4332      	orrs	r2, r6
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	4032      	ands	r2, r6
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	402b      	ands	r3, r5
 8000a76:	9302      	str	r3, [sp, #8]
 8000a78:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a7a:	f000 fad3 	bl	8001024 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	483c      	ldr	r0, [pc, #240]	; (8000b74 <main+0x14c>)
 8000a84:	f000 face 	bl	8001024 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a8a:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	a91b      	add	r1, sp, #108	; 0x6c
 8000a8e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a94:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f000 f9cf 	bl	8000e38 <HAL_GPIO_Init>
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a9c:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	a91b      	add	r1, sp, #108	; 0x6c
 8000aa0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aa6:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f000 f9c5 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <main+0x150>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	a91b      	add	r1, sp, #108	; 0x6c
 8000ab2:	4830      	ldr	r0, [pc, #192]	; (8000b74 <main+0x14c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000ab8:	931b      	str	r3, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f000 f9bd 	bl	8000e38 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	a91b      	add	r1, sp, #108	; 0x6c
 8000ac0:	482c      	ldr	r0, [pc, #176]	; (8000b74 <main+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac6:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f000 f9b5 	bl	8000e38 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8000ace:	482b      	ldr	r0, [pc, #172]	; (8000b7c <main+0x154>)
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <main+0x158>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad2:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8000ad4:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	2382      	movs	r3, #130	; 0x82
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000adc:	33fc      	adds	r3, #252	; 0xfc
 8000ade:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8000ae0:	3bfa      	subs	r3, #250	; 0xfa
 8000ae2:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aec:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aee:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	f001 f894 	bl	8001c20 <HAL_SPI_Init>
  hpcd_USB_FS.Instance = USB;
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <main+0x15c>)
 8000afa:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <main+0x160>)
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000afc:	6184      	str	r4, [r0, #24]
  hpcd_USB_FS.Instance = USB;
 8000afe:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b00:	2308      	movs	r3, #8
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b02:	61c4      	str	r4, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b04:	6204      	str	r4, [r0, #32]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b06:	6085      	str	r5, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b08:	6105      	str	r5, [r0, #16]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b0a:	6043      	str	r3, [r0, #4]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b0c:	f000 fa90 	bl	8001030 <HAL_PCD_Init>
  const uint8_t key[] =
 8000b10:	a905      	add	r1, sp, #20
 8000b12:	000a      	movs	r2, r1
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <main+0x164>)
 8000b16:	cb31      	ldmia	r3!, {r0, r4, r5}
 8000b18:	c231      	stmia	r2!, {r0, r4, r5}
 8000b1a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8000b1c:	c231      	stmia	r2!, {r0, r4, r5}
 8000b1e:	cb11      	ldmia	r3!, {r0, r4}
 8000b20:	c211      	stmia	r2!, {r0, r4}
  	(uint8_t []){0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <main+0x168>)
  Magma_Init(&ctx_magma, key);
 8000b24:	a80d      	add	r0, sp, #52	; 0x34
  	(uint8_t []){0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
 8000b26:	9303      	str	r3, [sp, #12]
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <main+0x16c>)
 8000b2a:	9304      	str	r3, [sp, #16]
  Magma_Init(&ctx_magma, key);
 8000b2c:	f7ff fcb2 	bl	8000494 <Magma_Init>
  Magma_ECB_enc(&ctx_magma, data[0]);
 8000b30:	a903      	add	r1, sp, #12
 8000b32:	a80d      	add	r0, sp, #52	; 0x34
 8000b34:	f7ff fb74 	bl	8000220 <Magma_ECB_enc>
 8000b38:	4f17      	ldr	r7, [pc, #92]	; (8000b98 <main+0x170>)
 8000b3a:	4e18      	ldr	r6, [pc, #96]	; (8000b9c <main+0x174>)
	 tick = HAL_GetTick();
 8000b3c:	f000 f92e 	bl	8000d9c <HAL_GetTick>
 8000b40:	2420      	movs	r4, #32
 8000b42:	0005      	movs	r5, r0
		 Magma_ECB_enc(&ctx_magma, data[0]);
 8000b44:	a903      	add	r1, sp, #12
 8000b46:	a80d      	add	r0, sp, #52	; 0x34
 8000b48:	f7ff fb6a 	bl	8000220 <Magma_ECB_enc>
		 Magma_ECB_dec(&ctx_magma, ctx_magma.out);
 8000b4c:	a90d      	add	r1, sp, #52	; 0x34
 8000b4e:	0008      	movs	r0, r1
 8000b50:	3c01      	subs	r4, #1
 8000b52:	f7ff fde9 	bl	8000728 <Magma_ECB_dec>
	 for (int i = 0; i < 32; i++){
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d1f4      	bne.n	8000b44 <main+0x11c>
	 all_tick = HAL_GetTick() - tick;
 8000b5a:	f000 f91f 	bl	8000d9c <HAL_GetTick>
 8000b5e:	1b43      	subs	r3, r0, r5
 8000b60:	b2db      	uxtb	r3, r3
	 snprintf(tic33_buf, 10, "%ld ms", all_tick);
 8000b62:	0032      	movs	r2, r6
 8000b64:	210a      	movs	r1, #10
 8000b66:	a81b      	add	r0, sp, #108	; 0x6c
	 all_tick = HAL_GetTick() - tick;
 8000b68:	703b      	strb	r3, [r7, #0]
	 snprintf(tic33_buf, 10, "%ld ms", all_tick);
 8000b6a:	f001 f8f5 	bl	8001d58 <sniprintf>
  {
 8000b6e:	e7e5      	b.n	8000b3c <main+0x114>
 8000b70:	40021000 	.word	0x40021000
 8000b74:	50000400 	.word	0x50000400
 8000b78:	00000407 	.word	0x00000407
 8000b7c:	20000094 	.word	0x20000094
 8000b80:	40013000 	.word	0x40013000
 8000b84:	200000ec 	.word	0x200000ec
 8000b88:	40005c00 	.word	0x40005c00
 8000b8c:	08002590 	.word	0x08002590
 8000b90:	98badcfe 	.word	0x98badcfe
 8000b94:	10325476 	.word	0x10325476
 8000b98:	20000084 	.word	0x20000084
 8000b9c:	08002630 	.word	0x08002630

08000ba0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_MspInit+0x18>)
 8000ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000bae:	0552      	lsls	r2, r2, #21
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb4:	4770      	bx	lr
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	0004      	movs	r4, r0
 8000bc0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	2214      	movs	r2, #20
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	a801      	add	r0, sp, #4
 8000bc8:	f001 f8bd 	bl	8001d46 <memset>
  if(hspi->Instance==SPI1)
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_SPI_MspInit+0x50>)
 8000bce:	6822      	ldr	r2, [r4, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d001      	beq.n	8000bd8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bd4:	b006      	add	sp, #24
 8000bd6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_SPI_MspInit+0x54>)
 8000bdc:	0152      	lsls	r2, r2, #5
 8000bde:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2201      	movs	r2, #1
 8000be8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4311      	orrs	r1, r2
 8000bee:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	9200      	str	r2, [sp, #0]
 8000bf8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfa:	23e0      	movs	r3, #224	; 0xe0
 8000bfc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	3bde      	subs	r3, #222	; 0xde
 8000c00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	3301      	adds	r3, #1
 8000c04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f000 f917 	bl	8000e38 <HAL_GPIO_Init>
}
 8000c0a:	e7e3      	b.n	8000bd4 <HAL_SPI_MspInit+0x18>
 8000c0c:	40013000 	.word	0x40013000
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_PCD_MspInit+0x18>)
 8000c16:	6802      	ldr	r2, [r0, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d105      	bne.n	8000c28 <HAL_PCD_MspInit+0x14>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_PCD_MspInit+0x1c>)
 8000c20:	041b      	lsls	r3, r3, #16
 8000c22:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000c24:	430b      	orrs	r3, r1
 8000c26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c28:	4770      	bx	lr
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40005c00 	.word	0x40005c00
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c34:	4770      	bx	lr
 8000c36:	46c0      	nop			; (mov r8, r8)

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	e7fe      	b.n	8000c38 <HardFault_Handler>
 8000c3a:	46c0      	nop			; (mov r8, r8)

08000c3c <SVC_Handler>:
 8000c3c:	4770      	bx	lr
 8000c3e:	46c0      	nop			; (mov r8, r8)

08000c40 <PendSV_Handler>:
 8000c40:	4770      	bx	lr
 8000c42:	46c0      	nop			; (mov r8, r8)

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f8a1 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bd10      	pop	{r4, pc}

08000c4c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <_sbrk+0x30>)
{
 8000c4e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8000c50:	6813      	ldr	r3, [r2, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000c56:	4669      	mov	r1, sp
 8000c58:	1818      	adds	r0, r3, r0
 8000c5a:	4288      	cmp	r0, r1
 8000c5c:	d808      	bhi.n	8000c70 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000c5e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	bd10      	pop	{r4, pc}
	if (heap_end + incr > stack_ptr)
 8000c64:	4669      	mov	r1, sp
		heap_end = &end;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <_sbrk+0x34>)
	if (heap_end + incr > stack_ptr)
 8000c68:	1818      	adds	r0, r3, r0
		heap_end = &end;
 8000c6a:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	d9f6      	bls.n	8000c5e <_sbrk+0x12>
		errno = ENOMEM;
 8000c70:	f001 f836 	bl	8001ce0 <__errno>
 8000c74:	230c      	movs	r3, #12
 8000c76:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000c78:	3b0d      	subs	r3, #13
 8000c7a:	e7f1      	b.n	8000c60 <_sbrk+0x14>
 8000c7c:	20000088 	.word	0x20000088
 8000c80:	20000368 	.word	0x20000368

08000c84 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <SystemInit+0x44>)
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	6819      	ldr	r1, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <SystemInit+0x48>)
 8000c94:	400a      	ands	r2, r1
 8000c96:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <SystemInit+0x4c>)
 8000c9c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c9e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000ca0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	438a      	bics	r2, r1
 8000ca6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	490a      	ldr	r1, [pc, #40]	; (8000cd4 <SystemInit+0x50>)
 8000cac:	400a      	ands	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	4909      	ldr	r1, [pc, #36]	; (8000cd8 <SystemInit+0x54>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <SystemInit+0x58>)
 8000cc0:	0512      	lsls	r2, r2, #20
 8000cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc4:	4770      	bx	lr
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	88ff400c 	.word	0x88ff400c
 8000cd0:	fef6fff6 	.word	0xfef6fff6
 8000cd4:	fffbffff 	.word	0xfffbffff
 8000cd8:	ff02ffff 	.word	0xff02ffff
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000ce4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ce6:	e003      	b.n	8000cf0 <LoopCopyDataInit>

08000ce8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000cea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cee:	3104      	adds	r1, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000cf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cf8:	d3f6      	bcc.n	8000ce8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000cfc:	e002      	b.n	8000d04 <LoopFillZerobss>

08000cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000cfe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d00:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d02:	3204      	adds	r2, #4

08000d04 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <LoopForever+0x16>)
  cmp  r2, r3
 8000d06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d08:	d3f9      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d0a:	f7ff ffbb 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f000 ffed 	bl	8001cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fe89 	bl	8000a28 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
   ldr   r0, =_estack
 8000d18:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000d1c:	0800268c 	.word	0x0800268c
  ldr  r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d24:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000d28:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8000d2c:	20000368 	.word	0x20000368

08000d30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_COMP_IRQHandler>
	...

08000d34 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d34:	21fa      	movs	r1, #250	; 0xfa
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_InitTick+0x2c>)
{
 8000d38:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d3a:	0089      	lsls	r1, r1, #2
{
 8000d3c:	0004      	movs	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	f7ff f9e2 	bl	8000108 <__udivsi3>
 8000d44:	f000 f85c 	bl	8000e00 <HAL_SYSTICK_Config>
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d105      	bne.n	8000d5a <HAL_InitTick+0x26>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	0021      	movs	r1, r4
 8000d52:	3801      	subs	r0, #1
 8000d54:	f000 f828 	bl	8000da8 <HAL_NVIC_SetPriority>
 8000d58:	2300      	movs	r3, #0
  }

  /* Return function status */
  return status;
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	20000000 	.word	0x20000000

08000d64 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_Init+0x24>)
{
 8000d68:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d6a:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	f7ff ffdf 	bl	8000d34 <HAL_InitTick>
 8000d76:	1e04      	subs	r4, r0, #0
 8000d78:	d002      	beq.n	8000d80 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000d7a:	2401      	movs	r4, #1
}
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000d80:	f7ff ff0e 	bl	8000ba0 <HAL_MspInit>
 8000d84:	e7fa      	b.n	8000d7c <HAL_Init+0x18>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d8c:	4a02      	ldr	r2, [pc, #8]	; (8000d98 <HAL_IncTick+0xc>)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	4770      	bx	lr
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	20000360 	.word	0x20000360

08000d9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d9c:	4b01      	ldr	r3, [pc, #4]	; (8000da4 <HAL_GetTick+0x8>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
}
 8000da0:	4770      	bx	lr
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000360 	.word	0x20000360

08000da8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	22ff      	movs	r2, #255	; 0xff
 8000daa:	2303      	movs	r3, #3
 8000dac:	b530      	push	{r4, r5, lr}
 8000dae:	0014      	movs	r4, r2
 8000db0:	b2c5      	uxtb	r5, r0
 8000db2:	402b      	ands	r3, r5
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	409c      	lsls	r4, r3
 8000db8:	0189      	lsls	r1, r1, #6
 8000dba:	400a      	ands	r2, r1
 8000dbc:	43e4      	mvns	r4, r4
 8000dbe:	409a      	lsls	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	db0b      	blt.n	8000ddc <HAL_NVIC_SetPriority+0x34>
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_NVIC_SetPriority+0x50>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc6:	0880      	lsrs	r0, r0, #2
 8000dc8:	469c      	mov	ip, r3
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	0080      	lsls	r0, r0, #2
 8000dce:	4460      	add	r0, ip
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	58c1      	ldr	r1, [r0, r3]
 8000dd4:	400c      	ands	r4, r1
 8000dd6:	4322      	orrs	r2, r4
 8000dd8:	50c2      	str	r2, [r0, r3]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000dda:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	230f      	movs	r3, #15
 8000dde:	4907      	ldr	r1, [pc, #28]	; (8000dfc <HAL_NVIC_SetPriority+0x54>)
 8000de0:	402b      	ands	r3, r5
 8000de2:	468c      	mov	ip, r1
 8000de4:	3b08      	subs	r3, #8
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	69d9      	ldr	r1, [r3, #28]
 8000dee:	400c      	ands	r4, r1
 8000df0:	4322      	orrs	r2, r4
 8000df2:	61da      	str	r2, [r3, #28]
 8000df4:	e7f1      	b.n	8000dda <HAL_NVIC_SetPriority+0x32>
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_SYSTICK_Config+0x2c>)
 8000e02:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e04:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d80e      	bhi.n	8000e28 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e10:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e12:	6a03      	ldr	r3, [r0, #32]
 8000e14:	0609      	lsls	r1, r1, #24
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1e:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e22:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e24:	3307      	adds	r3, #7
 8000e26:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e28:	4770      	bx	lr
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	00ffffff 	.word	0x00ffffff
 8000e30:	e000e010 	.word	0xe000e010
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	46de      	mov	lr, fp
 8000e3c:	4657      	mov	r7, sl
 8000e3e:	464e      	mov	r6, r9
 8000e40:	4645      	mov	r5, r8
 8000e42:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e44:	680b      	ldr	r3, [r1, #0]
{
 8000e46:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e48:	469c      	mov	ip, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <HAL_GPIO_Init+0x18>
 8000e4e:	e08a      	b.n	8000f66 <HAL_GPIO_Init+0x12e>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e50:	2301      	movs	r3, #1
 8000e52:	469a      	mov	sl, r3
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4b6b      	ldr	r3, [pc, #428]	; (8001004 <HAL_GPIO_Init+0x1cc>)
  uint32_t position = 0x00U;
 8000e56:	2200      	movs	r2, #0
        temp = EXTI->IMR;
 8000e58:	4698      	mov	r8, r3
 8000e5a:	4663      	mov	r3, ip
 8000e5c:	9101      	str	r1, [sp, #4]
 8000e5e:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e60:	4654      	mov	r4, sl
 8000e62:	4094      	lsls	r4, r2
 8000e64:	9d00      	ldr	r5, [sp, #0]
 8000e66:	4025      	ands	r5, r4
    if(iocurrent)
 8000e68:	d078      	beq.n	8000f5c <HAL_GPIO_Init+0x124>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	2710      	movs	r7, #16
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	0019      	movs	r1, r3
 8000e72:	43b9      	bics	r1, r7
 8000e74:	4689      	mov	r9, r1
 8000e76:	2902      	cmp	r1, #2
 8000e78:	d100      	bne.n	8000e7c <HAL_GPIO_Init+0x44>
 8000e7a:	e07b      	b.n	8000f74 <HAL_GPIO_Init+0x13c>
 8000e7c:	0051      	lsls	r1, r2, #1
 8000e7e:	468c      	mov	ip, r1
 8000e80:	2103      	movs	r1, #3
 8000e82:	4666      	mov	r6, ip
 8000e84:	40b1      	lsls	r1, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e86:	2601      	movs	r6, #1
 8000e88:	4276      	negs	r6, r6
 8000e8a:	46b3      	mov	fp, r6
 8000e8c:	44d9      	add	r9, fp
 8000e8e:	464e      	mov	r6, r9
 8000e90:	43c9      	mvns	r1, r1
 8000e92:	2e01      	cmp	r6, #1
 8000e94:	d800      	bhi.n	8000e98 <HAL_GPIO_Init+0x60>
 8000e96:	e08d      	b.n	8000fb4 <HAL_GPIO_Init+0x17c>
      temp = GPIOx->MODER;
 8000e98:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9a:	4667      	mov	r7, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e9c:	400c      	ands	r4, r1
 8000e9e:	46a1      	mov	r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	2403      	movs	r4, #3
 8000ea2:	401c      	ands	r4, r3
 8000ea4:	40bc      	lsls	r4, r7
 8000ea6:	464f      	mov	r7, r9
 8000ea8:	433c      	orrs	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000eaa:	4667      	mov	r7, ip
      GPIOx->MODER = temp;
 8000eac:	6004      	str	r4, [r0, #0]
      temp = GPIOx->PUPDR;
 8000eae:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb0:	400c      	ands	r4, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000eb2:	9901      	ldr	r1, [sp, #4]
 8000eb4:	6889      	ldr	r1, [r1, #8]
 8000eb6:	40b9      	lsls	r1, r7
 8000eb8:	4321      	orrs	r1, r4
      GPIOx->PUPDR = temp;
 8000eba:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0549      	lsls	r1, r1, #21
 8000ec0:	420b      	tst	r3, r1
 8000ec2:	d04b      	beq.n	8000f5c <HAL_GPIO_Init+0x124>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4656      	mov	r6, sl
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ec6:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec8:	4c4f      	ldr	r4, [pc, #316]	; (8001008 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000eca:	4017      	ands	r7, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ece:	4331      	orrs	r1, r6
 8000ed0:	6361      	str	r1, [r4, #52]	; 0x34
 8000ed2:	4c4e      	ldr	r4, [pc, #312]	; (800100c <HAL_GPIO_Init+0x1d4>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ed4:	00be      	lsls	r6, r7, #2
 8000ed6:	46a4      	mov	ip, r4
 8000ed8:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8000eda:	0891      	lsrs	r1, r2, #2
 8000edc:	0089      	lsls	r1, r1, #2
 8000ede:	4461      	add	r1, ip
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ee0:	40b7      	lsls	r7, r6
 8000ee2:	46b4      	mov	ip, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ee4:	26a0      	movs	r6, #160	; 0xa0
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	688c      	ldr	r4, [r1, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ee8:	05f6      	lsls	r6, r6, #23
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000eea:	43bc      	bics	r4, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000eec:	42b0      	cmp	r0, r6
 8000eee:	d01a      	beq.n	8000f26 <HAL_GPIO_Init+0xee>
 8000ef0:	4e47      	ldr	r6, [pc, #284]	; (8001010 <HAL_GPIO_Init+0x1d8>)
 8000ef2:	42b0      	cmp	r0, r6
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0xc0>
 8000ef6:	e07b      	b.n	8000ff0 <HAL_GPIO_Init+0x1b8>
 8000ef8:	4e46      	ldr	r6, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x1dc>)
 8000efa:	46b1      	mov	r9, r6
 8000efc:	2602      	movs	r6, #2
 8000efe:	4548      	cmp	r0, r9
 8000f00:	d00e      	beq.n	8000f20 <HAL_GPIO_Init+0xe8>
 8000f02:	4e45      	ldr	r6, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x1e0>)
 8000f04:	42b0      	cmp	r0, r6
 8000f06:	d100      	bne.n	8000f0a <HAL_GPIO_Init+0xd2>
 8000f08:	e077      	b.n	8000ffa <HAL_GPIO_Init+0x1c2>
 8000f0a:	4e44      	ldr	r6, [pc, #272]	; (800101c <HAL_GPIO_Init+0x1e4>)
 8000f0c:	46b1      	mov	r9, r6
 8000f0e:	2604      	movs	r6, #4
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0xe8>
 8000f14:	4e42      	ldr	r6, [pc, #264]	; (8001020 <HAL_GPIO_Init+0x1e8>)
 8000f16:	46b1      	mov	r9, r6
 8000f18:	2605      	movs	r6, #5
 8000f1a:	4548      	cmp	r0, r9
 8000f1c:	d000      	beq.n	8000f20 <HAL_GPIO_Init+0xe8>
 8000f1e:	2606      	movs	r6, #6
 8000f20:	4667      	mov	r7, ip
 8000f22:	40be      	lsls	r6, r7
 8000f24:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f26:	608c      	str	r4, [r1, #8]
        temp = EXTI->IMR;
 8000f28:	4641      	mov	r1, r8
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	43ec      	mvns	r4, r5
        temp = EXTI->IMR;
 8000f2c:	6809      	ldr	r1, [r1, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2e:	03de      	lsls	r6, r3, #15
 8000f30:	d45c      	bmi.n	8000fec <HAL_GPIO_Init+0x1b4>
        temp &= ~((uint32_t)iocurrent);
 8000f32:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000f34:	4646      	mov	r6, r8
 8000f36:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8000f38:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3a:	039e      	lsls	r6, r3, #14
 8000f3c:	d454      	bmi.n	8000fe8 <HAL_GPIO_Init+0x1b0>
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000f40:	4646      	mov	r6, r8
 8000f42:	6071      	str	r1, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f44:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	02de      	lsls	r6, r3, #11
 8000f48:	d44c      	bmi.n	8000fe4 <HAL_GPIO_Init+0x1ac>
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000f4c:	4646      	mov	r6, r8
 8000f4e:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8000f50:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	d444      	bmi.n	8000fe0 <HAL_GPIO_Init+0x1a8>
        temp &= ~((uint32_t)iocurrent);
 8000f56:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000f58:	4643      	mov	r3, r8
 8000f5a:	60d9      	str	r1, [r3, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f5c:	9b00      	ldr	r3, [sp, #0]
      }
    }
    position++;
 8000f5e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f60:	40d3      	lsrs	r3, r2
 8000f62:	d000      	beq.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000f64:	e77c      	b.n	8000e60 <HAL_GPIO_Init+0x28>
  }
}
 8000f66:	b003      	add	sp, #12
 8000f68:	bc3c      	pop	{r2, r3, r4, r5}
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	4699      	mov	r9, r3
 8000f6e:	46a2      	mov	sl, r4
 8000f70:	46ab      	mov	fp, r5
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	08d1      	lsrs	r1, r2, #3
 8000f76:	0089      	lsls	r1, r1, #2
 8000f78:	1841      	adds	r1, r0, r1
 8000f7a:	6a0e      	ldr	r6, [r1, #32]
 8000f7c:	46b1      	mov	r9, r6
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000f7e:	2607      	movs	r6, #7
 8000f80:	0037      	movs	r7, r6
 8000f82:	4017      	ands	r7, r2
 8000f84:	00be      	lsls	r6, r7, #2
 8000f86:	270f      	movs	r7, #15
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	46bb      	mov	fp, r7
 8000f8c:	46b4      	mov	ip, r6
 8000f8e:	464f      	mov	r7, r9
 8000f90:	465e      	mov	r6, fp
 8000f92:	43b7      	bics	r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000f94:	9e01      	ldr	r6, [sp, #4]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000f96:	46b9      	mov	r9, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000f98:	6937      	ldr	r7, [r6, #16]
 8000f9a:	4666      	mov	r6, ip
 8000f9c:	40b7      	lsls	r7, r6
 8000f9e:	46bc      	mov	ip, r7
 8000fa0:	464f      	mov	r7, r9
 8000fa2:	4666      	mov	r6, ip
 8000fa4:	4337      	orrs	r7, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	620f      	str	r7, [r1, #32]
 8000fa8:	0051      	lsls	r1, r2, #1
 8000faa:	468c      	mov	ip, r1
 8000fac:	2103      	movs	r1, #3
 8000fae:	4666      	mov	r6, ip
 8000fb0:	40b1      	lsls	r1, r6
 8000fb2:	43c9      	mvns	r1, r1
        temp = GPIOx->OSPEEDR;
 8000fb4:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fb8:	400f      	ands	r7, r1
 8000fba:	46bb      	mov	fp, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbc:	68f7      	ldr	r7, [r6, #12]
 8000fbe:	4666      	mov	r6, ip
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	46b9      	mov	r9, r7
 8000fc4:	465f      	mov	r7, fp
 8000fc6:	464e      	mov	r6, r9
 8000fc8:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8000fca:	6087      	str	r7, [r0, #8]
        temp= GPIOx->OTYPER;
 8000fcc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fce:	0037      	movs	r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd0:	4656      	mov	r6, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd2:	43a7      	bics	r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd4:	091c      	lsrs	r4, r3, #4
 8000fd6:	4034      	ands	r4, r6
 8000fd8:	4094      	lsls	r4, r2
 8000fda:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8000fdc:	6044      	str	r4, [r0, #4]
 8000fde:	e75b      	b.n	8000e98 <HAL_GPIO_Init+0x60>
          temp |= iocurrent;
 8000fe0:	4329      	orrs	r1, r5
 8000fe2:	e7b9      	b.n	8000f58 <HAL_GPIO_Init+0x120>
          temp |= iocurrent;
 8000fe4:	4329      	orrs	r1, r5
 8000fe6:	e7b1      	b.n	8000f4c <HAL_GPIO_Init+0x114>
          temp |= iocurrent;
 8000fe8:	4329      	orrs	r1, r5
 8000fea:	e7a9      	b.n	8000f40 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 8000fec:	4329      	orrs	r1, r5
 8000fee:	e7a1      	b.n	8000f34 <HAL_GPIO_Init+0xfc>
 8000ff0:	4656      	mov	r6, sl
 8000ff2:	4667      	mov	r7, ip
 8000ff4:	40be      	lsls	r6, r7
 8000ff6:	4334      	orrs	r4, r6
 8000ff8:	e795      	b.n	8000f26 <HAL_GPIO_Init+0xee>
 8000ffa:	2603      	movs	r6, #3
 8000ffc:	4667      	mov	r7, ip
 8000ffe:	40be      	lsls	r6, r7
 8001000:	4334      	orrs	r4, r6
 8001002:	e790      	b.n	8000f26 <HAL_GPIO_Init+0xee>
 8001004:	40010400 	.word	0x40010400
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	50000400 	.word	0x50000400
 8001014:	50000800 	.word	0x50000800
 8001018:	50000c00 	.word	0x50000c00
 800101c:	50001000 	.word	0x50001000
 8001020:	50001c00 	.word	0x50001c00

08001024 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001024:	2a00      	cmp	r2, #0
 8001026:	d101      	bne.n	800102c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8001028:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800102a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800102c:	6181      	str	r1, [r0, #24]
 800102e:	e7fc      	b.n	800102a <HAL_GPIO_WritePin+0x6>

08001030 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	0004      	movs	r4, r0
 8001034:	b086      	sub	sp, #24
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001036:	2800      	cmp	r0, #0
 8001038:	d062      	beq.n	8001100 <HAL_PCD_Init+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_PCD_Init+0xe4>)
 800103c:	5cc3      	ldrb	r3, [r0, r3]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d057      	beq.n	80010f4 <HAL_PCD_Init+0xc4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001044:	2203      	movs	r2, #3
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_PCD_Init+0xe4>)

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001048:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800104a:	54e2      	strb	r2, [r4, r3]
  __HAL_PCD_DISABLE(hpcd);
 800104c:	f000 fe28 	bl	8001ca0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001050:	6860      	ldr	r0, [r4, #4]
 8001052:	2800      	cmp	r0, #0
 8001054:	d02c      	beq.n	80010b0 <HAL_PCD_Init+0x80>
 8001056:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001058:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800105a:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 800105c:	015a      	lsls	r2, r3, #5
 800105e:	18a2      	adds	r2, r4, r2
 8001060:	0015      	movs	r5, r2
 8001062:	3529      	adds	r5, #41	; 0x29
 8001064:	702e      	strb	r6, [r5, #0]
    hpcd->IN_ep[i].num = i;
 8001066:	3d01      	subs	r5, #1
 8001068:	702b      	strb	r3, [r5, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800106a:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800106c:	70e9      	strb	r1, [r5, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800106e:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001070:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001072:	1c9a      	adds	r2, r3, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 8001076:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].xfer_len = 0U;
 800107a:	5111      	str	r1, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107c:	4283      	cmp	r3, r0
 800107e:	d3ed      	bcc.n	800105c <HAL_PCD_Init+0x2c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001080:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001082:	2100      	movs	r1, #0
 8001084:	0153      	lsls	r3, r2, #5
 8001086:	18e3      	adds	r3, r4, r3
 8001088:	001d      	movs	r5, r3
 800108a:	352a      	adds	r5, #42	; 0x2a
 800108c:	35ff      	adds	r5, #255	; 0xff
 800108e:	7029      	strb	r1, [r5, #0]
    hpcd->OUT_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001090:	333d      	adds	r3, #61	; 0x3d
    hpcd->OUT_ep[i].num = i;
 8001092:	3d01      	subs	r5, #1
 8001094:	702a      	strb	r2, [r5, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001096:	70e9      	strb	r1, [r5, #3]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001098:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800109a:	3510      	adds	r5, #16
 800109c:	6029      	str	r1, [r5, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800109e:	6019      	str	r1, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a0:	0013      	movs	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a4:	330a      	adds	r3, #10
 80010a6:	015b      	lsls	r3, r3, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a8:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010aa:	5119      	str	r1, [r3, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ac:	4282      	cmp	r2, r0
 80010ae:	d3e9      	bcc.n	8001084 <HAL_PCD_Init+0x54>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b0:	0023      	movs	r3, r4
 80010b2:	466a      	mov	r2, sp
 80010b4:	3310      	adds	r3, #16
 80010b6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80010b8:	c223      	stmia	r2!, {r0, r1, r5}
 80010ba:	cb03      	ldmia	r3!, {r0, r1}
 80010bc:	c203      	stmia	r2!, {r0, r1}
 80010be:	6861      	ldr	r1, [r4, #4]
 80010c0:	68a2      	ldr	r2, [r4, #8]
 80010c2:	68e3      	ldr	r3, [r4, #12]
 80010c4:	6820      	ldr	r0, [r4, #0]
 80010c6:	f000 fdf5 	bl	8001cb4 <USB_DevInit>
 80010ca:	1e05      	subs	r5, r0, #0
 80010cc:	d10d      	bne.n	80010ea <HAL_PCD_Init+0xba>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80010ce:	2324      	movs	r3, #36	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010d0:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 80010d2:	54e0      	strb	r0, [r4, r3]
  hpcd->State = HAL_PCD_STATE_READY;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_PCD_Init+0xe4>)
 80010d6:	54e2      	strb	r2, [r4, r3]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010d8:	69e3      	ldr	r3, [r4, #28]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d016      	beq.n	800110c <HAL_PCD_Init+0xdc>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80010de:	6a23      	ldr	r3, [r4, #32]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d00f      	beq.n	8001104 <HAL_PCD_Init+0xd4>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
  }

  return HAL_OK;
}
 80010e4:	0028      	movs	r0, r5
 80010e6:	b006      	add	sp, #24
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ea:	2202      	movs	r2, #2
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_PCD_Init+0xe4>)
    return HAL_ERROR;
 80010ee:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f0:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80010f2:	e7f7      	b.n	80010e4 <HAL_PCD_Init+0xb4>
    hpcd->Lock = HAL_UNLOCKED;
 80010f4:	228a      	movs	r2, #138	; 0x8a
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	5483      	strb	r3, [r0, r2]
    HAL_PCD_MspInit(hpcd);
 80010fa:	f7ff fd8b 	bl	8000c14 <HAL_PCD_MspInit>
 80010fe:	e7a1      	b.n	8001044 <HAL_PCD_Init+0x14>
    return HAL_ERROR;
 8001100:	2501      	movs	r5, #1
 8001102:	e7ef      	b.n	80010e4 <HAL_PCD_Init+0xb4>
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8001104:	0020      	movs	r0, r4
 8001106:	f000 f807 	bl	8001118 <HAL_PCDEx_ActivateBCD>
 800110a:	e7eb      	b.n	80010e4 <HAL_PCD_Init+0xb4>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800110c:	0020      	movs	r0, r4
 800110e:	f000 f813 	bl	8001138 <HAL_PCDEx_ActivateLPM>
 8001112:	e7e4      	b.n	80010de <HAL_PCD_Init+0xae>
 8001114:	00000229 	.word	0x00000229

08001118 <HAL_PCDEx_ActivateBCD>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->battery_charging_active = 1U;
 8001118:	239b      	movs	r3, #155	; 0x9b
 800111a:	2101      	movs	r1, #1
 800111c:	009b      	lsls	r3, r3, #2
  USB_TypeDef *USBx = hpcd->Instance;
 800111e:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8001120:	50c1      	str	r1, [r0, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001122:	2358      	movs	r3, #88	; 0x58
 8001124:	2001      	movs	r0, #1
 8001126:	5ad1      	ldrh	r1, [r2, r3]
 8001128:	4301      	orrs	r1, r0
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 800112a:	2002      	movs	r0, #2
  USBx->BCDR |= (USB_BCDR_BCDEN);
 800112c:	52d1      	strh	r1, [r2, r3]
  USBx->BCDR |= (USB_BCDR_DCDEN);
 800112e:	5ad1      	ldrh	r1, [r2, r3]
 8001130:	4301      	orrs	r1, r0
 8001132:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 8001134:	2000      	movs	r0, #0
 8001136:	4770      	bx	lr

08001138 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
 8001138:	239a      	movs	r3, #154	; 0x9a
 800113a:	2101      	movs	r1, #1
 800113c:	009b      	lsls	r3, r3, #2
  USB_TypeDef *USBx = hpcd->Instance;
 800113e:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8001140:	50c1      	str	r1, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 8001142:	2100      	movs	r1, #0
 8001144:	3b08      	subs	r3, #8
 8001146:	54c1      	strb	r1, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001148:	2354      	movs	r3, #84	; 0x54
 800114a:	2001      	movs	r0, #1
 800114c:	5ad1      	ldrh	r1, [r2, r3]
 800114e:	4301      	orrs	r1, r0
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001150:	2002      	movs	r0, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001152:	52d1      	strh	r1, [r2, r3]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001154:	5ad1      	ldrh	r1, [r2, r3]
 8001156:	4301      	orrs	r1, r0
 8001158:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 800115a:	2000      	movs	r0, #0
 800115c:	4770      	bx	lr
 800115e:	46c0      	nop			; (mov r8, r8)

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	46d6      	mov	lr, sl
 8001164:	464f      	mov	r7, r9
 8001166:	4646      	mov	r6, r8
 8001168:	b5c0      	push	{r6, r7, lr}
 800116a:	0004      	movs	r4, r0
 800116c:	b082      	sub	sp, #8
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800116e:	2800      	cmp	r0, #0
 8001170:	d100      	bne.n	8001174 <HAL_RCC_OscConfig+0x14>
 8001172:	e14d      	b.n	8001410 <HAL_RCC_OscConfig+0x2b0>
    return HAL_ERROR;
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001174:	250c      	movs	r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001176:	2680      	movs	r6, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001178:	4bbe      	ldr	r3, [pc, #760]	; (8001474 <HAL_RCC_OscConfig+0x314>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800117a:	0276      	lsls	r6, r6, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001180:	68da      	ldr	r2, [r3, #12]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	6803      	ldr	r3, [r0, #0]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001184:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	07da      	lsls	r2, r3, #31
 8001188:	d533      	bpl.n	80011f2 <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800118a:	2d08      	cmp	r5, #8
 800118c:	d100      	bne.n	8001190 <HAL_RCC_OscConfig+0x30>
 800118e:	e136      	b.n	80013fe <HAL_RCC_OscConfig+0x29e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001190:	2d0c      	cmp	r5, #12
 8001192:	d100      	bne.n	8001196 <HAL_RCC_OscConfig+0x36>
 8001194:	e130      	b.n	80013f8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	2080      	movs	r0, #128	; 0x80
 8001198:	6861      	ldr	r1, [r4, #4]
 800119a:	0240      	lsls	r0, r0, #9
 800119c:	4281      	cmp	r1, r0
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x42>
 80011a0:	e1bc      	b.n	800151c <HAL_RCC_OscConfig+0x3bc>
 80011a2:	22a0      	movs	r2, #160	; 0xa0
 80011a4:	02d2      	lsls	r2, r2, #11
 80011a6:	4291      	cmp	r1, r2
 80011a8:	d100      	bne.n	80011ac <HAL_RCC_OscConfig+0x4c>
 80011aa:	e290      	b.n	80016ce <HAL_RCC_OscConfig+0x56e>
 80011ac:	4fb1      	ldr	r7, [pc, #708]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011ae:	4bb2      	ldr	r3, [pc, #712]	; (8001478 <HAL_RCC_OscConfig+0x318>)
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	401a      	ands	r2, r3
 80011b4:	603a      	str	r2, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	4ab0      	ldr	r2, [pc, #704]	; (800147c <HAL_RCC_OscConfig+0x31c>)
 80011ba:	4003      	ands	r3, r0
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	9b01      	ldr	r3, [sp, #4]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4013      	ands	r3, r2
 80011c4:	603b      	str	r3, [r7, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c6:	2900      	cmp	r1, #0
 80011c8:	d000      	beq.n	80011cc <HAL_RCC_OscConfig+0x6c>
 80011ca:	e1ab      	b.n	8001524 <HAL_RCC_OscConfig+0x3c4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fde6 	bl	8000d9c <HAL_GetTick>

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 80011d4:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011d6:	4698      	mov	r8, r3
 80011d8:	e006      	b.n	80011e8 <HAL_RCC_OscConfig+0x88>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011da:	f7ff fddf 	bl	8000d9c <HAL_GetTick>
 80011de:	464b      	mov	r3, r9
 80011e0:	1ac0      	subs	r0, r0, r3
 80011e2:	2864      	cmp	r0, #100	; 0x64
 80011e4:	d900      	bls.n	80011e8 <HAL_RCC_OscConfig+0x88>
 80011e6:	e1dc      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011e8:	4642      	mov	r2, r8
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	4213      	tst	r3, r2
 80011ee:	d1f4      	bne.n	80011da <HAL_RCC_OscConfig+0x7a>
 80011f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	079a      	lsls	r2, r3, #30
 80011f4:	d500      	bpl.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011f6:	e0cf      	b.n	8001398 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f8:	06da      	lsls	r2, r3, #27
 80011fa:	d52a      	bpl.n	8001252 <HAL_RCC_OscConfig+0xf2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80011fc:	2d00      	cmp	r5, #0
 80011fe:	d100      	bne.n	8001202 <HAL_RCC_OscConfig+0xa2>
 8001200:	e10d      	b.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001202:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001204:	4e9b      	ldr	r6, [pc, #620]	; (8001474 <HAL_RCC_OscConfig+0x314>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001206:	2b00      	cmp	r3, #0
 8001208:	d100      	bne.n	800120c <HAL_RCC_OscConfig+0xac>
 800120a:	e1f6      	b.n	80015fa <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_MSI_ENABLE();
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	6832      	ldr	r2, [r6, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4313      	orrs	r3, r2
 8001214:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fdc1 	bl	8000d9c <HAL_GetTick>

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800121a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800121c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800121e:	00bf      	lsls	r7, r7, #2
 8001220:	e006      	b.n	8001230 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fdbb 	bl	8000d9c <HAL_GetTick>
 8001226:	4643      	mov	r3, r8
 8001228:	1ac0      	subs	r0, r0, r3
 800122a:	2802      	cmp	r0, #2
 800122c:	d900      	bls.n	8001230 <HAL_RCC_OscConfig+0xd0>
 800122e:	e1b8      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001230:	6833      	ldr	r3, [r6, #0]
 8001232:	423b      	tst	r3, r7
 8001234:	d0f5      	beq.n	8001222 <HAL_RCC_OscConfig+0xc2>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001236:	6873      	ldr	r3, [r6, #4]
 8001238:	4a91      	ldr	r2, [pc, #580]	; (8001480 <HAL_RCC_OscConfig+0x320>)
 800123a:	4013      	ands	r3, r2
 800123c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800123e:	4313      	orrs	r3, r2
 8001240:	6073      	str	r3, [r6, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001242:	6872      	ldr	r2, [r6, #4]
 8001244:	6a23      	ldr	r3, [r4, #32]
 8001246:	0212      	lsls	r2, r2, #8
 8001248:	061b      	lsls	r3, r3, #24
 800124a:	0a12      	lsrs	r2, r2, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	6073      	str	r3, [r6, #4]
 8001250:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	071a      	lsls	r2, r3, #28
 8001254:	d519      	bpl.n	800128a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001256:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001258:	4e86      	ldr	r6, [pc, #536]	; (8001474 <HAL_RCC_OscConfig+0x314>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x100>
 800125e:	e1b7      	b.n	80015d0 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSI_ENABLE();
 8001260:	2201      	movs	r2, #1
 8001262:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001264:	4313      	orrs	r3, r2
 8001266:	6533      	str	r3, [r6, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fd98 	bl	8000d9c <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800126c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800126e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001270:	4698      	mov	r8, r3
 8001272:	e005      	b.n	8001280 <HAL_RCC_OscConfig+0x120>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fd92 	bl	8000d9c <HAL_GetTick>
 8001278:	1bc0      	subs	r0, r0, r7
 800127a:	2802      	cmp	r0, #2
 800127c:	d900      	bls.n	8001280 <HAL_RCC_OscConfig+0x120>
 800127e:	e190      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001280:	4642      	mov	r2, r8
 8001282:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001284:	421a      	tst	r2, r3
 8001286:	d0f5      	beq.n	8001274 <HAL_RCC_OscConfig+0x114>
 8001288:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128a:	075a      	lsls	r2, r3, #29
 800128c:	d542      	bpl.n	8001314 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001290:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001292:	4a78      	ldr	r2, [pc, #480]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001294:	055b      	lsls	r3, r3, #21
 8001296:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001298:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4219      	tst	r1, r3
 800129c:	d104      	bne.n	80012a8 <HAL_RCC_OscConfig+0x148>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80012a4:	2301      	movs	r3, #1
 80012a6:	469a      	mov	sl, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	2780      	movs	r7, #128	; 0x80
 80012aa:	4e76      	ldr	r6, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x324>)
 80012ac:	007f      	lsls	r7, r7, #1
 80012ae:	6833      	ldr	r3, [r6, #0]
 80012b0:	423b      	tst	r3, r7
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x156>
 80012b4:	e165      	b.n	8001582 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	68a3      	ldr	r3, [r4, #8]
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	4293      	cmp	r3, r2
 80012be:	d100      	bne.n	80012c2 <HAL_RCC_OscConfig+0x162>
 80012c0:	e20f      	b.n	80016e2 <HAL_RCC_OscConfig+0x582>
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d100      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
 80012c6:	e141      	b.n	800154c <HAL_RCC_OscConfig+0x3ec>
 80012c8:	21a0      	movs	r1, #160	; 0xa0
 80012ca:	00c9      	lsls	r1, r1, #3
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d100      	bne.n	80012d2 <HAL_RCC_OscConfig+0x172>
 80012d0:	e24f      	b.n	8001772 <HAL_RCC_OscConfig+0x612>
 80012d2:	4b68      	ldr	r3, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012d4:	496c      	ldr	r1, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x328>)
 80012d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d8:	400a      	ands	r2, r1
 80012da:	651a      	str	r2, [r3, #80]	; 0x50
 80012dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012de:	496b      	ldr	r1, [pc, #428]	; (800148c <HAL_RCC_OscConfig+0x32c>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fd5a 	bl	8000d9c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012e8:	2680      	movs	r6, #128	; 0x80
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x330>)
      tickstart = HAL_GetTick();
 80012ec:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012ee:	4f61      	ldr	r7, [pc, #388]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012f0:	00b6      	lsls	r6, r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012f4:	e006      	b.n	8001304 <HAL_RCC_OscConfig+0x1a4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fd51 	bl	8000d9c <HAL_GetTick>
 80012fa:	464b      	mov	r3, r9
 80012fc:	1ac0      	subs	r0, r0, r3
 80012fe:	4540      	cmp	r0, r8
 8001300:	d900      	bls.n	8001304 <HAL_RCC_OscConfig+0x1a4>
 8001302:	e14e      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001306:	4233      	tst	r3, r6
 8001308:	d0f5      	beq.n	80012f6 <HAL_RCC_OscConfig+0x196>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800130a:	4653      	mov	r3, sl
 800130c:	2b01      	cmp	r3, #1
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x1b2>
 8001310:	e1d6      	b.n	80016c0 <HAL_RCC_OscConfig+0x560>
 8001312:	6823      	ldr	r3, [r4, #0]
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001314:	069b      	lsls	r3, r3, #26
 8001316:	d520      	bpl.n	800135a <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001318:	69a3      	ldr	r3, [r4, #24]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800131a:	4e56      	ldr	r6, [pc, #344]	; (8001474 <HAL_RCC_OscConfig+0x314>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800131c:	2b00      	cmp	r3, #0
 800131e:	d100      	bne.n	8001322 <HAL_RCC_OscConfig+0x1c2>
 8001320:	e181      	b.n	8001626 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_HSI48_ENABLE();
 8001322:	2101      	movs	r1, #1
 8001324:	68b2      	ldr	r2, [r6, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001326:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 8001328:	430a      	orrs	r2, r1
 800132a:	60b2      	str	r2, [r6, #8]
 800132c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800132e:	4a59      	ldr	r2, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x334>)
 8001330:	430b      	orrs	r3, r1
 8001332:	6373      	str	r3, [r6, #52]	; 0x34
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	6a11      	ldr	r1, [r2, #32]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	430b      	orrs	r3, r1
 800133c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800133e:	f7ff fd2d 	bl	8000d9c <HAL_GetTick>
 8001342:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001344:	e006      	b.n	8001354 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001346:	f7ff fd29 	bl	8000d9c <HAL_GetTick>
 800134a:	4643      	mov	r3, r8
 800134c:	1ac0      	subs	r0, r0, r3
 800134e:	2802      	cmp	r0, #2
 8001350:	d900      	bls.n	8001354 <HAL_RCC_OscConfig+0x1f4>
 8001352:	e126      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001354:	68b3      	ldr	r3, [r6, #8]
 8001356:	421f      	tst	r7, r3
 8001358:	d0f5      	beq.n	8001346 <HAL_RCC_OscConfig+0x1e6>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800135c:	2b00      	cmp	r3, #0
 800135e:	d019      	beq.n	8001394 <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001360:	2d0c      	cmp	r5, #12
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x206>
 8001364:	e178      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001366:	2b02      	cmp	r3, #2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x20c>
 800136a:	e1cd      	b.n	8001708 <HAL_RCC_OscConfig+0x5a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4c41      	ldr	r4, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800136e:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <HAL_RCC_OscConfig+0x338>)
 8001370:	6823      	ldr	r3, [r4, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001372:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001374:	4013      	ands	r3, r2
 8001376:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001378:	f7ff fd10 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800137c:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 800137e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001380:	e005      	b.n	800138e <HAL_RCC_OscConfig+0x22e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fd0b 	bl	8000d9c <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	2802      	cmp	r0, #2
 800138a:	d900      	bls.n	800138e <HAL_RCC_OscConfig+0x22e>
 800138c:	e109      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	422b      	tst	r3, r5
 8001392:	d1f6      	bne.n	8001382 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }

  return HAL_OK;
 8001394:	2000      	movs	r0, #0
 8001396:	e03c      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001398:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800139a:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800139c:	421a      	tst	r2, r3
 800139e:	d004      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013a0:	4834      	ldr	r0, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x314>)
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013a2:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013a4:	6801      	ldr	r1, [r0, #0]
 80013a6:	4311      	orrs	r1, r2
 80013a8:	6001      	str	r1, [r0, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013aa:	2d04      	cmp	r5, #4
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_OscConfig+0x250>
 80013ae:	e07e      	b.n	80014ae <HAL_RCC_OscConfig+0x34e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b0:	2d0c      	cmp	r5, #12
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x256>
 80013b4:	e078      	b.n	80014a8 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013b6:	4e2f      	ldr	r6, [pc, #188]	; (8001474 <HAL_RCC_OscConfig+0x314>)
      if(hsi_state != RCC_HSI_OFF)
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x25e>
 80013bc:	e0f3      	b.n	80015a6 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013be:	2109      	movs	r1, #9
 80013c0:	6832      	ldr	r2, [r6, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c2:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013c4:	438a      	bics	r2, r1
 80013c6:	4313      	orrs	r3, r2
 80013c8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff fce7 	bl	8000d9c <HAL_GetTick>
 80013ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d0:	e006      	b.n	80013e0 <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fce3 	bl	8000d9c <HAL_GetTick>
 80013d6:	4643      	mov	r3, r8
 80013d8:	1ac0      	subs	r0, r0, r3
 80013da:	2802      	cmp	r0, #2
 80013dc:	d900      	bls.n	80013e0 <HAL_RCC_OscConfig+0x280>
 80013de:	e0e0      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e0:	6833      	ldr	r3, [r6, #0]
 80013e2:	421f      	tst	r7, r3
 80013e4:	d0f5      	beq.n	80013d2 <HAL_RCC_OscConfig+0x272>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	6872      	ldr	r2, [r6, #4]
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	492c      	ldr	r1, [pc, #176]	; (800149c <HAL_RCC_OscConfig+0x33c>)
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	400a      	ands	r2, r1
 80013f0:	4313      	orrs	r3, r2
 80013f2:	6073      	str	r3, [r6, #4]
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	e6ff      	b.n	80011f8 <HAL_RCC_OscConfig+0x98>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x29e>
 80013fc:	e6cb      	b.n	8001196 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	0392      	lsls	r2, r2, #14
 8001404:	d400      	bmi.n	8001408 <HAL_RCC_OscConfig+0x2a8>
 8001406:	e6f4      	b.n	80011f2 <HAL_RCC_OscConfig+0x92>
 8001408:	6862      	ldr	r2, [r4, #4]
 800140a:	2a00      	cmp	r2, #0
 800140c:	d000      	beq.n	8001410 <HAL_RCC_OscConfig+0x2b0>
 800140e:	e6f0      	b.n	80011f2 <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
}
 8001412:	b002      	add	sp, #8
 8001414:	bc1c      	pop	{r2, r3, r4}
 8001416:	4690      	mov	r8, r2
 8001418:	4699      	mov	r9, r3
 800141a:	46a2      	mov	sl, r4
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	059b      	lsls	r3, r3, #22
 8001424:	d502      	bpl.n	800142c <HAL_RCC_OscConfig+0x2cc>
 8001426:	69e3      	ldr	r3, [r4, #28]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f1      	beq.n	8001410 <HAL_RCC_OscConfig+0x2b0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800142e:	4814      	ldr	r0, [pc, #80]	; (8001480 <HAL_RCC_OscConfig+0x320>)
 8001430:	6851      	ldr	r1, [r2, #4]
 8001432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001434:	4001      	ands	r1, r0
 8001436:	4319      	orrs	r1, r3
 8001438:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	6850      	ldr	r0, [r2, #4]
 800143c:	6a21      	ldr	r1, [r4, #32]
 800143e:	0200      	lsls	r0, r0, #8
 8001440:	0a00      	lsrs	r0, r0, #8
 8001442:	0609      	lsls	r1, r1, #24
 8001444:	4301      	orrs	r1, r0
 8001446:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001448:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	0b5b      	lsrs	r3, r3, #13
 800144e:	3301      	adds	r3, #1
 8001450:	0212      	lsls	r2, r2, #8
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001456:	060a      	lsls	r2, r1, #24
 8001458:	4911      	ldr	r1, [pc, #68]	; (80014a0 <HAL_RCC_OscConfig+0x340>)
 800145a:	0f12      	lsrs	r2, r2, #28
 800145c:	5c8a      	ldrb	r2, [r1, r2]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001460:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x344>)
 8001464:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001466:	f7ff fc65 	bl	8000d34 <HAL_InitTick>
        if(status != HAL_OK)
 800146a:	2800      	cmp	r0, #0
 800146c:	d1d1      	bne.n	8001412 <HAL_RCC_OscConfig+0x2b2>
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	e6ef      	b.n	8001252 <HAL_RCC_OscConfig+0xf2>
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40021000 	.word	0x40021000
 8001478:	fffeffff 	.word	0xfffeffff
 800147c:	fffbffff 	.word	0xfffbffff
 8001480:	ffff1fff 	.word	0xffff1fff
 8001484:	40007000 	.word	0x40007000
 8001488:	fffffeff 	.word	0xfffffeff
 800148c:	fffffbff 	.word	0xfffffbff
 8001490:	00001388 	.word	0x00001388
 8001494:	40010000 	.word	0x40010000
 8001498:	feffffff 	.word	0xfeffffff
 800149c:	ffffe0ff 	.word	0xffffe0ff
 80014a0:	08002638 	.word	0x08002638
 80014a4:	20000000 	.word	0x20000000
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	d000      	beq.n	80014ae <HAL_RCC_OscConfig+0x34e>
 80014ac:	e783      	b.n	80013b6 <HAL_RCC_OscConfig+0x256>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014ae:	4abc      	ldr	r2, [pc, #752]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	0752      	lsls	r2, r2, #29
 80014b4:	d501      	bpl.n	80014ba <HAL_RCC_OscConfig+0x35a>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0aa      	beq.n	8001410 <HAL_RCC_OscConfig+0x2b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4ab9      	ldr	r2, [pc, #740]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 80014bc:	6921      	ldr	r1, [r4, #16]
 80014be:	6850      	ldr	r0, [r2, #4]
 80014c0:	4eb8      	ldr	r6, [pc, #736]	; (80017a4 <HAL_RCC_OscConfig+0x644>)
 80014c2:	0209      	lsls	r1, r1, #8
 80014c4:	4030      	ands	r0, r6
 80014c6:	4301      	orrs	r1, r0
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014c8:	2009      	movs	r0, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	6051      	str	r1, [r2, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	4381      	bics	r1, r0
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6013      	str	r3, [r2, #0]
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d4:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80014d6:	68d1      	ldr	r1, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80014d8:	400b      	ands	r3, r1
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d100      	bne.n	80014e0 <HAL_RCC_OscConfig+0x380>
 80014de:	e111      	b.n	8001704 <HAL_RCC_OscConfig+0x5a4>
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x386>
 80014e4:	e0d5      	b.n	8001692 <HAL_RCC_OscConfig+0x532>
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d100      	bne.n	80014ec <HAL_RCC_OscConfig+0x38c>
 80014ea:	e0ff      	b.n	80016ec <HAL_RCC_OscConfig+0x58c>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014ec:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80014ee:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014f0:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80014f6:	3301      	adds	r3, #1
 80014f8:	4098      	lsls	r0, r3
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fa:	4ba9      	ldr	r3, [pc, #676]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 80014fc:	4aaa      	ldr	r2, [pc, #680]	; (80017a8 <HAL_RCC_OscConfig+0x648>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	0f1b      	lsrs	r3, r3, #28
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	40d8      	lsrs	r0, r3
 8001508:	4ba8      	ldr	r3, [pc, #672]	; (80017ac <HAL_RCC_OscConfig+0x64c>)
 800150a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fc11 	bl	8000d34 <HAL_InitTick>
      if(status != HAL_OK)
 8001512:	2800      	cmp	r0, #0
 8001514:	d000      	beq.n	8001518 <HAL_RCC_OscConfig+0x3b8>
 8001516:	e77c      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	e66d      	b.n	80011f8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	4aa0      	ldr	r2, [pc, #640]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001524:	f7ff fc3a 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001528:	2780      	movs	r7, #128	; 0x80
 800152a:	4b9d      	ldr	r3, [pc, #628]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
        tickstart = HAL_GetTick();
 800152c:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152e:	4698      	mov	r8, r3
 8001530:	02bf      	lsls	r7, r7, #10
 8001532:	e005      	b.n	8001540 <HAL_RCC_OscConfig+0x3e0>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc32 	bl	8000d9c <HAL_GetTick>
 8001538:	464b      	mov	r3, r9
 800153a:	1ac0      	subs	r0, r0, r3
 800153c:	2864      	cmp	r0, #100	; 0x64
 800153e:	d830      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001540:	4643      	mov	r3, r8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	423b      	tst	r3, r7
 8001546:	d0f5      	beq.n	8001534 <HAL_RCC_OscConfig+0x3d4>
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	e652      	b.n	80011f2 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	4e94      	ldr	r6, [pc, #592]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 800154e:	4a98      	ldr	r2, [pc, #608]	; (80017b0 <HAL_RCC_OscConfig+0x650>)
 8001550:	6d33      	ldr	r3, [r6, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001552:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001554:	4013      	ands	r3, r2
 8001556:	6533      	str	r3, [r6, #80]	; 0x50
 8001558:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800155a:	4a96      	ldr	r2, [pc, #600]	; (80017b4 <HAL_RCC_OscConfig+0x654>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800155c:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155e:	4013      	ands	r3, r2
 8001560:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001562:	f7ff fc1b 	bl	8000d9c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	4b94      	ldr	r3, [pc, #592]	; (80017b8 <HAL_RCC_OscConfig+0x658>)
      tickstart = HAL_GetTick();
 8001568:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800156c:	e005      	b.n	800157a <HAL_RCC_OscConfig+0x41a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fc15 	bl	8000d9c <HAL_GetTick>
 8001572:	464b      	mov	r3, r9
 8001574:	1ac0      	subs	r0, r0, r3
 8001576:	4540      	cmp	r0, r8
 8001578:	d813      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x442>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800157c:	423b      	tst	r3, r7
 800157e:	d1f6      	bne.n	800156e <HAL_RCC_OscConfig+0x40e>
 8001580:	e6c3      	b.n	800130a <HAL_RCC_OscConfig+0x1aa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001582:	6833      	ldr	r3, [r6, #0]
 8001584:	433b      	orrs	r3, r7
 8001586:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001588:	f7ff fc08 	bl	8000d9c <HAL_GetTick>
 800158c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	6833      	ldr	r3, [r6, #0]
 8001590:	423b      	tst	r3, r7
 8001592:	d000      	beq.n	8001596 <HAL_RCC_OscConfig+0x436>
 8001594:	e68f      	b.n	80012b6 <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff fc01 	bl	8000d9c <HAL_GetTick>
 800159a:	4643      	mov	r3, r8
 800159c:	1ac0      	subs	r0, r0, r3
 800159e:	2864      	cmp	r0, #100	; 0x64
 80015a0:	d9f5      	bls.n	800158e <HAL_RCC_OscConfig+0x42e>
            return HAL_TIMEOUT;
 80015a2:	2003      	movs	r0, #3
 80015a4:	e735      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_HSI_DISABLE();
 80015a6:	2201      	movs	r2, #1
 80015a8:	6833      	ldr	r3, [r6, #0]
 80015aa:	4393      	bics	r3, r2
 80015ac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015ae:	f7ff fbf5 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b2:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80015b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b6:	4698      	mov	r8, r3
 80015b8:	e004      	b.n	80015c4 <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fbef 	bl	8000d9c <HAL_GetTick>
 80015be:	1bc0      	subs	r0, r0, r7
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d8ee      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c4:	4642      	mov	r2, r8
 80015c6:	6833      	ldr	r3, [r6, #0]
 80015c8:	421a      	tst	r2, r3
 80015ca:	d1f6      	bne.n	80015ba <HAL_RCC_OscConfig+0x45a>
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	e613      	b.n	80011f8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 80015d0:	2201      	movs	r2, #1
 80015d2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80015d4:	4393      	bics	r3, r2
 80015d6:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbe0 	bl	8000d9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015dc:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80015de:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e0:	4698      	mov	r8, r3
 80015e2:	e004      	b.n	80015ee <HAL_RCC_OscConfig+0x48e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fbda 	bl	8000d9c <HAL_GetTick>
 80015e8:	1bc0      	subs	r0, r0, r7
 80015ea:	2802      	cmp	r0, #2
 80015ec:	d8d9      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x442>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ee:	4642      	mov	r2, r8
 80015f0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80015f2:	421a      	tst	r2, r3
 80015f4:	d1f6      	bne.n	80015e4 <HAL_RCC_OscConfig+0x484>
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	e647      	b.n	800128a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_DISABLE();
 80015fa:	6833      	ldr	r3, [r6, #0]
 80015fc:	4a6c      	ldr	r2, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x650>)
 80015fe:	4013      	ands	r3, r2
 8001600:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001602:	f7ff fbcb 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 800160a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800160c:	4698      	mov	r8, r3
 800160e:	e004      	b.n	800161a <HAL_RCC_OscConfig+0x4ba>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff fbc4 	bl	8000d9c <HAL_GetTick>
 8001614:	1bc0      	subs	r0, r0, r7
 8001616:	2802      	cmp	r0, #2
 8001618:	d8c3      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800161a:	4642      	mov	r2, r8
 800161c:	6833      	ldr	r3, [r6, #0]
 800161e:	4213      	tst	r3, r2
 8001620:	d1f6      	bne.n	8001610 <HAL_RCC_OscConfig+0x4b0>
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	e615      	b.n	8001252 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI48_DISABLE();
 8001626:	2201      	movs	r2, #1
 8001628:	68b3      	ldr	r3, [r6, #8]
 800162a:	4964      	ldr	r1, [pc, #400]	; (80017bc <HAL_RCC_OscConfig+0x65c>)
 800162c:	4393      	bics	r3, r2
 800162e:	4a64      	ldr	r2, [pc, #400]	; (80017c0 <HAL_RCC_OscConfig+0x660>)
 8001630:	60b3      	str	r3, [r6, #8]
 8001632:	6a13      	ldr	r3, [r2, #32]
 8001634:	400b      	ands	r3, r1
 8001636:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001638:	f7ff fbb0 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800163c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800163e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001640:	4698      	mov	r8, r3
 8001642:	e004      	b.n	800164e <HAL_RCC_OscConfig+0x4ee>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001644:	f7ff fbaa 	bl	8000d9c <HAL_GetTick>
 8001648:	1bc0      	subs	r0, r0, r7
 800164a:	2802      	cmp	r0, #2
 800164c:	d8a9      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800164e:	4642      	mov	r2, r8
 8001650:	68b3      	ldr	r3, [r6, #8]
 8001652:	421a      	tst	r2, r3
 8001654:	d1f6      	bne.n	8001644 <HAL_RCC_OscConfig+0x4e4>
 8001656:	e680      	b.n	800135a <HAL_RCC_OscConfig+0x1fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	2b01      	cmp	r3, #1
 800165a:	d100      	bne.n	800165e <HAL_RCC_OscConfig+0x4fe>
 800165c:	e6d8      	b.n	8001410 <HAL_RCC_OscConfig+0x2b0>
        pll_config = RCC->CFGR;
 800165e:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 8001662:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	4013      	ands	r3, r2
        return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166c:	428b      	cmp	r3, r1
 800166e:	d000      	beq.n	8001672 <HAL_RCC_OscConfig+0x512>
 8001670:	e6cf      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001672:	23f0      	movs	r3, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001674:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001676:	039b      	lsls	r3, r3, #14
 8001678:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	428b      	cmp	r3, r1
 800167c:	d000      	beq.n	8001680 <HAL_RCC_OscConfig+0x520>
 800167e:	e6c8      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001680:	20c0      	movs	r0, #192	; 0xc0
 8001682:	0400      	lsls	r0, r0, #16
 8001684:	4002      	ands	r2, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001686:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001688:	1a10      	subs	r0, r2, r0
 800168a:	1e42      	subs	r2, r0, #1
 800168c:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 800168e:	b2c0      	uxtb	r0, r0
 8001690:	e6bf      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001692:	028b      	lsls	r3, r1, #10
 8001694:	484b      	ldr	r0, [pc, #300]	; (80017c4 <HAL_RCC_OscConfig+0x664>)
 8001696:	0f1b      	lsrs	r3, r3, #28
 8001698:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800169a:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169c:	68d3      	ldr	r3, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800169e:	0f89      	lsrs	r1, r1, #30
 80016a0:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a2:	03db      	lsls	r3, r3, #15
 80016a4:	d46f      	bmi.n	8001786 <HAL_RCC_OscConfig+0x626>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016a6:	6813      	ldr	r3, [r2, #0]
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80016a8:	0142      	lsls	r2, r0, #5
 80016aa:	1a12      	subs	r2, r2, r0
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016ac:	06db      	lsls	r3, r3, #27
 80016ae:	d56f      	bpl.n	8001790 <HAL_RCC_OscConfig+0x630>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80016b0:	0193      	lsls	r3, r2, #6
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	1818      	adds	r0, r3, r0
 80016b8:	0200      	lsls	r0, r0, #8
 80016ba:	f7fe fd25 	bl	8000108 <__udivsi3>
 80016be:	e71c      	b.n	80014fa <HAL_RCC_OscConfig+0x39a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 80016c2:	4941      	ldr	r1, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x668>)
 80016c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80016c6:	400b      	ands	r3, r1
 80016c8:	6393      	str	r3, [r2, #56]	; 0x38
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	e622      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 80016d2:	02db      	lsls	r3, r3, #11
 80016d4:	6811      	ldr	r1, [r2, #0]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	4303      	orrs	r3, r0
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e720      	b.n	8001524 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 80016e4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80016e6:	430b      	orrs	r3, r1
 80016e8:	6513      	str	r3, [r2, #80]	; 0x50
 80016ea:	e5fb      	b.n	80012e4 <HAL_RCC_OscConfig+0x184>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	3007      	adds	r0, #7
 80016f0:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 80016f2:	4243      	negs	r3, r0
 80016f4:	4158      	adcs	r0, r3
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_RCC_OscConfig+0x66c>)
 80016f8:	4240      	negs	r0, r0
 80016fa:	4018      	ands	r0, r3
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x670>)
 80016fe:	469c      	mov	ip, r3
 8001700:	4460      	add	r0, ip
 8001702:	e6fa      	b.n	80014fa <HAL_RCC_OscConfig+0x39a>
      sysclockfreq = HSE_VALUE;
 8001704:	4833      	ldr	r0, [pc, #204]	; (80017d4 <HAL_RCC_OscConfig+0x674>)
 8001706:	e6f8      	b.n	80014fa <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8001708:	4d25      	ldr	r5, [pc, #148]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <HAL_RCC_OscConfig+0x678>)
 800170c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800170e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001710:	4013      	ands	r3, r2
 8001712:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001714:	f7ff fb42 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001718:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800171a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800171c:	e005      	b.n	800172a <HAL_RCC_OscConfig+0x5ca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff fb3d 	bl	8000d9c <HAL_GetTick>
 8001722:	1bc0      	subs	r0, r0, r7
 8001724:	2802      	cmp	r0, #2
 8001726:	d900      	bls.n	800172a <HAL_RCC_OscConfig+0x5ca>
 8001728:	e73b      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	4233      	tst	r3, r6
 800172e:	d1f6      	bne.n	800171e <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001732:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001734:	68ea      	ldr	r2, [r5, #12]
 8001736:	430b      	orrs	r3, r1
 8001738:	4928      	ldr	r1, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x67c>)
 800173a:	400a      	ands	r2, r1
 800173c:	4313      	orrs	r3, r2
 800173e:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001740:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001742:	4313      	orrs	r3, r2
 8001744:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	682a      	ldr	r2, [r5, #0]
 800174a:	045b      	lsls	r3, r3, #17
 800174c:	4313      	orrs	r3, r2
 800174e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001750:	f7ff fb24 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001754:	4d12      	ldr	r5, [pc, #72]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
        tickstart = HAL_GetTick();
 8001756:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001758:	04a4      	lsls	r4, r4, #18
 800175a:	e005      	b.n	8001768 <HAL_RCC_OscConfig+0x608>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb1e 	bl	8000d9c <HAL_GetTick>
 8001760:	1b80      	subs	r0, r0, r6
 8001762:	2802      	cmp	r0, #2
 8001764:	d900      	bls.n	8001768 <HAL_RCC_OscConfig+0x608>
 8001766:	e71c      	b.n	80015a2 <HAL_RCC_OscConfig+0x442>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	4223      	tst	r3, r4
 800176c:	d0f6      	beq.n	800175c <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 800176e:	2000      	movs	r0, #0
 8001770:	e64f      	b.n	8001412 <HAL_RCC_OscConfig+0x2b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x640>)
 8001774:	3901      	subs	r1, #1
 8001776:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001778:	39ff      	subs	r1, #255	; 0xff
 800177a:	4301      	orrs	r1, r0
 800177c:	6519      	str	r1, [r3, #80]	; 0x50
 800177e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001780:	430a      	orrs	r2, r1
 8001782:	651a      	str	r2, [r3, #80]	; 0x50
 8001784:	e5ae      	b.n	80012e4 <HAL_RCC_OscConfig+0x184>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_RCC_OscConfig+0x674>)
 8001788:	4358      	muls	r0, r3
 800178a:	f7fe fcbd 	bl	8000108 <__udivsi3>
 800178e:	e6b4      	b.n	80014fa <HAL_RCC_OscConfig+0x39a>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001790:	0193      	lsls	r3, r2, #6
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	1818      	adds	r0, r3, r0
 8001798:	0280      	lsls	r0, r0, #10
 800179a:	f7fe fcb5 	bl	8000108 <__udivsi3>
 800179e:	e6ac      	b.n	80014fa <HAL_RCC_OscConfig+0x39a>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	ffffe0ff 	.word	0xffffe0ff
 80017a8:	08002638 	.word	0x08002638
 80017ac:	20000000 	.word	0x20000000
 80017b0:	fffffeff 	.word	0xfffffeff
 80017b4:	fffffbff 	.word	0xfffffbff
 80017b8:	00001388 	.word	0x00001388
 80017bc:	ffffdfff 	.word	0xffffdfff
 80017c0:	40010000 	.word	0x40010000
 80017c4:	08002648 	.word	0x08002648
 80017c8:	efffffff 	.word	0xefffffff
 80017cc:	00b71b00 	.word	0x00b71b00
 80017d0:	003d0900 	.word	0x003d0900
 80017d4:	017d7840 	.word	0x017d7840
 80017d8:	feffffff 	.word	0xfeffffff
 80017dc:	ff02ffff 	.word	0xff02ffff

080017e0 <HAL_RCC_ClockConfig>:
{
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	46ce      	mov	lr, r9
 80017e4:	4647      	mov	r7, r8
 80017e6:	0004      	movs	r4, r0
 80017e8:	b580      	push	{r7, lr}
 80017ea:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d00d      	beq.n	800180c <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	2301      	movs	r3, #1
 80017f2:	497a      	ldr	r1, [pc, #488]	; (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 80017f4:	680a      	ldr	r2, [r1, #0]
 80017f6:	401a      	ands	r2, r3
 80017f8:	42aa      	cmp	r2, r5
 80017fa:	d20c      	bcs.n	8001816 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fc:	680a      	ldr	r2, [r1, #0]
 80017fe:	439a      	bics	r2, r3
 8001800:	432a      	orrs	r2, r5
 8001802:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001804:	680a      	ldr	r2, [r1, #0]
 8001806:	4013      	ands	r3, r2
 8001808:	42ab      	cmp	r3, r5
 800180a:	d004      	beq.n	8001816 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800180c:	2001      	movs	r0, #1
}
 800180e:	bc0c      	pop	{r2, r3}
 8001810:	4690      	mov	r8, r2
 8001812:	4699      	mov	r9, r3
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	079a      	lsls	r2, r3, #30
 800181a:	d506      	bpl.n	800182a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	20f0      	movs	r0, #240	; 0xf0
 800181e:	4970      	ldr	r1, [pc, #448]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
 8001820:	68ca      	ldr	r2, [r1, #12]
 8001822:	4382      	bics	r2, r0
 8001824:	68a0      	ldr	r0, [r4, #8]
 8001826:	4302      	orrs	r2, r0
 8001828:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	07db      	lsls	r3, r3, #31
 800182c:	d52c      	bpl.n	8001888 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800182e:	4a6c      	ldr	r2, [pc, #432]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	6863      	ldr	r3, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001832:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001834:	2b02      	cmp	r3, #2
 8001836:	d065      	beq.n	8001904 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001838:	2b03      	cmp	r3, #3
 800183a:	d100      	bne.n	800183e <HAL_RCC_ClockConfig+0x5e>
 800183c:	e087      	b.n	800194e <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800183e:	2b01      	cmp	r3, #1
 8001840:	d100      	bne.n	8001844 <HAL_RCC_ClockConfig+0x64>
 8001842:	e0af      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1c4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001844:	0592      	lsls	r2, r2, #22
 8001846:	d5e1      	bpl.n	800180c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001848:	2103      	movs	r1, #3
 800184a:	4e65      	ldr	r6, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
 800184c:	68f2      	ldr	r2, [r6, #12]
 800184e:	438a      	bics	r2, r1
 8001850:	4313      	orrs	r3, r2
 8001852:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8001854:	f7ff faa2 	bl	8000d9c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001858:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800185a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185c:	2b02      	cmp	r3, #2
 800185e:	d100      	bne.n	8001862 <HAL_RCC_ClockConfig+0x82>
 8001860:	e090      	b.n	8001984 <HAL_RCC_ClockConfig+0x1a4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001862:	2b03      	cmp	r3, #3
 8001864:	d100      	bne.n	8001868 <HAL_RCC_ClockConfig+0x88>
 8001866:	e0a1      	b.n	80019ac <HAL_RCC_ClockConfig+0x1cc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001868:	2b01      	cmp	r3, #1
 800186a:	d079      	beq.n	8001960 <HAL_RCC_ClockConfig+0x180>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800186c:	230c      	movs	r3, #12
 800186e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	4b5c      	ldr	r3, [pc, #368]	; (80019e4 <HAL_RCC_ClockConfig+0x204>)
 8001872:	4699      	mov	r9, r3
 8001874:	e004      	b.n	8001880 <HAL_RCC_ClockConfig+0xa0>
 8001876:	f7ff fa91 	bl	8000d9c <HAL_GetTick>
 800187a:	1bc0      	subs	r0, r0, r7
 800187c:	4548      	cmp	r0, r9
 800187e:	d87f      	bhi.n	8001980 <HAL_RCC_ClockConfig+0x1a0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001880:	4642      	mov	r2, r8
 8001882:	68f3      	ldr	r3, [r6, #12]
 8001884:	421a      	tst	r2, r3
 8001886:	d1f6      	bne.n	8001876 <HAL_RCC_ClockConfig+0x96>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	2101      	movs	r1, #1
 800188a:	4a54      	ldr	r2, [pc, #336]	; (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	400b      	ands	r3, r1
 8001890:	42ab      	cmp	r3, r5
 8001892:	d905      	bls.n	80018a0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	438b      	bics	r3, r1
 8001898:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	4219      	tst	r1, r3
 800189e:	d1b5      	bne.n	800180c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	075a      	lsls	r2, r3, #29
 80018a4:	d506      	bpl.n	80018b4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a6:	494e      	ldr	r1, [pc, #312]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
 80018a8:	484f      	ldr	r0, [pc, #316]	; (80019e8 <HAL_RCC_ClockConfig+0x208>)
 80018aa:	68ca      	ldr	r2, [r1, #12]
 80018ac:	4002      	ands	r2, r0
 80018ae:	68e0      	ldr	r0, [r4, #12]
 80018b0:	4302      	orrs	r2, r0
 80018b2:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	071b      	lsls	r3, r3, #28
 80018b6:	d507      	bpl.n	80018c8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018b8:	4949      	ldr	r1, [pc, #292]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
 80018ba:	6923      	ldr	r3, [r4, #16]
 80018bc:	68ca      	ldr	r2, [r1, #12]
 80018be:	484b      	ldr	r0, [pc, #300]	; (80019ec <HAL_RCC_ClockConfig+0x20c>)
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4002      	ands	r2, r0
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80018ca:	4a45      	ldr	r2, [pc, #276]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
 80018cc:	68d1      	ldr	r1, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80018ce:	400b      	ands	r3, r1
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d01a      	beq.n	800190a <HAL_RCC_ClockConfig+0x12a>
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d023      	beq.n	8001920 <HAL_RCC_ClockConfig+0x140>
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d018      	beq.n	800190e <HAL_RCC_ClockConfig+0x12e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018dc:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018de:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018e0:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018e6:	3301      	adds	r3, #1
 80018e8:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_ClockConfig+0x200>)
 80018ec:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_RCC_ClockConfig+0x210>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	0f1b      	lsrs	r3, r3, #28
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	40d8      	lsrs	r0, r3
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_RCC_ClockConfig+0x214>)
 80018fa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fa19 	bl	8000d34 <HAL_InitTick>
 8001902:	e784      	b.n	800180e <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001904:	0392      	lsls	r2, r2, #14
 8001906:	d49f      	bmi.n	8001848 <HAL_RCC_ClockConfig+0x68>
 8001908:	e780      	b.n	800180c <HAL_RCC_ClockConfig+0x2c>
      sysclockfreq = HSE_VALUE;
 800190a:	483b      	ldr	r0, [pc, #236]	; (80019f8 <HAL_RCC_ClockConfig+0x218>)
 800190c:	e7ed      	b.n	80018ea <HAL_RCC_ClockConfig+0x10a>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800190e:	6810      	ldr	r0, [r2, #0]
        sysclockfreq =  HSI_VALUE;
 8001910:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_RCC_ClockConfig+0x21c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001912:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8001914:	17c0      	asrs	r0, r0, #31
 8001916:	4018      	ands	r0, r3
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <HAL_RCC_ClockConfig+0x220>)
 800191a:	469c      	mov	ip, r3
 800191c:	4460      	add	r0, ip
 800191e:	e7e4      	b.n	80018ea <HAL_RCC_ClockConfig+0x10a>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001920:	028b      	lsls	r3, r1, #10
 8001922:	4838      	ldr	r0, [pc, #224]	; (8001a04 <HAL_RCC_ClockConfig+0x224>)
 8001924:	0f1b      	lsrs	r3, r3, #28
 8001926:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001928:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192a:	68d3      	ldr	r3, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800192c:	0f89      	lsrs	r1, r1, #30
 800192e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001930:	03db      	lsls	r3, r3, #15
 8001932:	d410      	bmi.n	8001956 <HAL_RCC_ClockConfig+0x176>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001934:	6813      	ldr	r3, [r2, #0]
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001936:	0142      	lsls	r2, r0, #5
 8001938:	1a12      	subs	r2, r2, r0
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800193a:	06db      	lsls	r3, r3, #27
 800193c:	d546      	bpl.n	80019cc <HAL_RCC_ClockConfig+0x1ec>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800193e:	0193      	lsls	r3, r2, #6
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1818      	adds	r0, r3, r0
 8001946:	0200      	lsls	r0, r0, #8
 8001948:	f7fe fbde 	bl	8000108 <__udivsi3>
 800194c:	e7cd      	b.n	80018ea <HAL_RCC_ClockConfig+0x10a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800194e:	0192      	lsls	r2, r2, #6
 8001950:	d500      	bpl.n	8001954 <HAL_RCC_ClockConfig+0x174>
 8001952:	e779      	b.n	8001848 <HAL_RCC_ClockConfig+0x68>
 8001954:	e75a      	b.n	800180c <HAL_RCC_ClockConfig+0x2c>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_ClockConfig+0x218>)
 8001958:	4358      	muls	r0, r3
 800195a:	f7fe fbd5 	bl	8000108 <__udivsi3>
 800195e:	e7c4      	b.n	80018ea <HAL_RCC_ClockConfig+0x10a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001960:	330b      	adds	r3, #11
 8001962:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_RCC_ClockConfig+0x204>)
 8001966:	4699      	mov	r9, r3
 8001968:	e004      	b.n	8001974 <HAL_RCC_ClockConfig+0x194>
 800196a:	f7ff fa17 	bl	8000d9c <HAL_GetTick>
 800196e:	1bc0      	subs	r0, r0, r7
 8001970:	4548      	cmp	r0, r9
 8001972:	d805      	bhi.n	8001980 <HAL_RCC_ClockConfig+0x1a0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001974:	4642      	mov	r2, r8
 8001976:	68f3      	ldr	r3, [r6, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	2b04      	cmp	r3, #4
 800197c:	d1f5      	bne.n	800196a <HAL_RCC_ClockConfig+0x18a>
 800197e:	e783      	b.n	8001888 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8001980:	2003      	movs	r0, #3
 8001982:	e744      	b.n	800180e <HAL_RCC_ClockConfig+0x2e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001984:	330a      	adds	r3, #10
 8001986:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x204>)
 800198a:	4699      	mov	r9, r3
 800198c:	e004      	b.n	8001998 <HAL_RCC_ClockConfig+0x1b8>
 800198e:	f7ff fa05 	bl	8000d9c <HAL_GetTick>
 8001992:	1bc0      	subs	r0, r0, r7
 8001994:	4548      	cmp	r0, r9
 8001996:	d8f3      	bhi.n	8001980 <HAL_RCC_ClockConfig+0x1a0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001998:	4642      	mov	r2, r8
 800199a:	68f3      	ldr	r3, [r6, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d1f5      	bne.n	800198e <HAL_RCC_ClockConfig+0x1ae>
 80019a2:	e771      	b.n	8001888 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a4:	0752      	lsls	r2, r2, #29
 80019a6:	d500      	bpl.n	80019aa <HAL_RCC_ClockConfig+0x1ca>
 80019a8:	e74e      	b.n	8001848 <HAL_RCC_ClockConfig+0x68>
 80019aa:	e72f      	b.n	800180c <HAL_RCC_ClockConfig+0x2c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ac:	3309      	adds	r3, #9
 80019ae:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_RCC_ClockConfig+0x204>)
 80019b2:	4699      	mov	r9, r3
 80019b4:	e004      	b.n	80019c0 <HAL_RCC_ClockConfig+0x1e0>
 80019b6:	f7ff f9f1 	bl	8000d9c <HAL_GetTick>
 80019ba:	1bc0      	subs	r0, r0, r7
 80019bc:	4548      	cmp	r0, r9
 80019be:	d8df      	bhi.n	8001980 <HAL_RCC_ClockConfig+0x1a0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c0:	4642      	mov	r2, r8
 80019c2:	68f3      	ldr	r3, [r6, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d1f5      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x1d6>
 80019ca:	e75d      	b.n	8001888 <HAL_RCC_ClockConfig+0xa8>
         pllvco = (HSI_VALUE * pllm) / plld;
 80019cc:	0193      	lsls	r3, r2, #6
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	1818      	adds	r0, r3, r0
 80019d4:	0280      	lsls	r0, r0, #10
 80019d6:	f7fe fb97 	bl	8000108 <__udivsi3>
 80019da:	e786      	b.n	80018ea <HAL_RCC_ClockConfig+0x10a>
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	00001388 	.word	0x00001388
 80019e8:	fffff8ff 	.word	0xfffff8ff
 80019ec:	ffffc7ff 	.word	0xffffc7ff
 80019f0:	08002638 	.word	0x08002638
 80019f4:	20000000 	.word	0x20000000
 80019f8:	017d7840 	.word	0x017d7840
 80019fc:	ff48e500 	.word	0xff48e500
 8001a00:	00f42400 	.word	0x00f42400
 8001a04:	08002648 	.word	0x08002648

08001a08 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a08:	2282      	movs	r2, #130	; 0x82
{
 8001a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0c:	46ce      	mov	lr, r9
 8001a0e:	4647      	mov	r7, r8
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a10:	6803      	ldr	r3, [r0, #0]
 8001a12:	0112      	lsls	r2, r2, #4
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	0004      	movs	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a18:	4213      	tst	r3, r2
 8001a1a:	d031      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a20:	4a74      	ldr	r2, [pc, #464]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a28:	4219      	tst	r1, r3
 8001a2a:	d104      	bne.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	4698      	mov	r8, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	2680      	movs	r6, #128	; 0x80
 8001a38:	4d6f      	ldr	r5, [pc, #444]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a3a:	0076      	lsls	r6, r6, #1
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	4233      	tst	r3, r6
 8001a40:	d062      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a42:	6866      	ldr	r6, [r4, #4]
 8001a44:	20c0      	movs	r0, #192	; 0xc0
 8001a46:	27c0      	movs	r7, #192	; 0xc0
 8001a48:	0035      	movs	r5, r6
 8001a4a:	0032      	movs	r2, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a4c:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a4e:	0380      	lsls	r0, r0, #14
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	02bf      	lsls	r7, r7, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a54:	4005      	ands	r5, r0
 8001a56:	403a      	ands	r2, r7
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a58:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a5a:	428d      	cmp	r5, r1
 8001a5c:	d06a      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a5e:	21c0      	movs	r1, #192	; 0xc0
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a60:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a62:	0289      	lsls	r1, r1, #10
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d100      	bne.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001a68:	e09a      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	400b      	ands	r3, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a6e:	d169      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a70:	4960      	ldr	r1, [pc, #384]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a72:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001a74:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a76:	4643      	mov	r3, r8
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a78:	650a      	str	r2, [r1, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d054      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8001a7e:	6823      	ldr	r3, [r4, #0]
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a80:	07da      	lsls	r2, r3, #31
 8001a82:	d506      	bpl.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a84:	2003      	movs	r0, #3
 8001a86:	495b      	ldr	r1, [pc, #364]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a88:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001a8a:	4382      	bics	r2, r0
 8001a8c:	68e0      	ldr	r0, [r4, #12]
 8001a8e:	4302      	orrs	r2, r0
 8001a90:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a92:	079a      	lsls	r2, r3, #30
 8001a94:	d506      	bpl.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a96:	200c      	movs	r0, #12
 8001a98:	4956      	ldr	r1, [pc, #344]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a9a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001a9c:	4382      	bics	r2, r0
 8001a9e:	6920      	ldr	r0, [r4, #16]
 8001aa0:	4302      	orrs	r2, r0
 8001aa2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001aa4:	075a      	lsls	r2, r3, #29
 8001aa6:	d506      	bpl.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001aa8:	4952      	ldr	r1, [pc, #328]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001aaa:	4854      	ldr	r0, [pc, #336]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001aac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001aae:	4002      	ands	r2, r0
 8001ab0:	6960      	ldr	r0, [r4, #20]
 8001ab2:	4302      	orrs	r2, r0
 8001ab4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ab6:	071a      	lsls	r2, r3, #28
 8001ab8:	d506      	bpl.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aba:	494e      	ldr	r1, [pc, #312]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001abc:	4850      	ldr	r0, [pc, #320]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001abe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001ac0:	4002      	ands	r2, r0
 8001ac2:	69a0      	ldr	r0, [r4, #24]
 8001ac4:	4302      	orrs	r2, r0
 8001ac6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ac8:	05da      	lsls	r2, r3, #23
 8001aca:	d506      	bpl.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001acc:	4949      	ldr	r1, [pc, #292]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ace:	484d      	ldr	r0, [pc, #308]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ad0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001ad2:	4002      	ands	r2, r0
 8001ad4:	69e0      	ldr	r0, [r4, #28]
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ada:	065a      	lsls	r2, r3, #25
 8001adc:	d506      	bpl.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ade:	4945      	ldr	r1, [pc, #276]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ae0:	4849      	ldr	r0, [pc, #292]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ae2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001ae4:	4002      	ands	r2, r0
 8001ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001aee:	061b      	lsls	r3, r3, #24
 8001af0:	d506      	bpl.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001af2:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001af4:	4945      	ldr	r1, [pc, #276]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001af6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001af8:	400b      	ands	r3, r1
 8001afa:	6a21      	ldr	r1, [r4, #32]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001b00:	bc0c      	pop	{r2, r3}
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	4333      	orrs	r3, r6
 8001b0c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f945 	bl	8000d9c <HAL_GetTick>
 8001b12:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	e004      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff f941 	bl	8000d9c <HAL_GetTick>
 8001b1a:	1bc0      	subs	r0, r0, r7
 8001b1c:	2864      	cmp	r0, #100	; 0x64
 8001b1e:	d851      	bhi.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	4233      	tst	r3, r6
 8001b24:	d0f7      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001b26:	e78c      	b.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001b2a:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	638b      	str	r3, [r1, #56]	; 0x38
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	e7a5      	b.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x78>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b34:	68a1      	ldr	r1, [r4, #8]
 8001b36:	4008      	ands	r0, r1
 8001b38:	4285      	cmp	r5, r0
 8001b3a:	d000      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001b3c:	e78f      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b40:	403b      	ands	r3, r7
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b42:	d014      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d033      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b48:	6821      	ldr	r1, [r4, #0]
 8001b4a:	0689      	lsls	r1, r1, #26
 8001b4c:	d530      	bpl.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b4e:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b50:	4d28      	ldr	r5, [pc, #160]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b52:	0309      	lsls	r1, r1, #12
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b54:	6d28      	ldr	r0, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b56:	6d2f      	ldr	r7, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b5a:	4339      	orrs	r1, r7
 8001b5c:	6529      	str	r1, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b5e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001b60:	4f2c      	ldr	r7, [pc, #176]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b62:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b64:	4039      	ands	r1, r7
 8001b66:	6529      	str	r1, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001b68:	652b      	str	r3, [r5, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b6a:	05c3      	lsls	r3, r0, #23
 8001b6c:	d42c      	bmi.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d000      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001b76:	e77b      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001b78:	25c0      	movs	r5, #192	; 0xc0
 8001b7a:	03ad      	lsls	r5, r5, #14
 8001b7c:	4035      	ands	r5, r6
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b80:	4925      	ldr	r1, [pc, #148]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	400b      	ands	r3, r1
 8001b86:	431d      	orrs	r5, r3
 8001b88:	6015      	str	r5, [r2, #0]
 8001b8a:	22c0      	movs	r2, #192	; 0xc0
 8001b8c:	4919      	ldr	r1, [pc, #100]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b8e:	0292      	lsls	r2, r2, #10
 8001b90:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001b92:	431a      	orrs	r2, r3
    if(pwrclkchanged == SET)
 8001b94:	4643      	mov	r3, r8
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b96:	650a      	str	r2, [r1, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d000      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001b9c:	e76f      	b.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001b9e:	e7c3      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ba0:	6819      	ldr	r1, [r3, #0]
          return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ba4:	0389      	lsls	r1, r1, #14
 8001ba6:	d4ab      	bmi.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001bac:	d1ca      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001bae:	e7e6      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x176>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001bb0:	21c0      	movs	r1, #192	; 0xc0
 8001bb2:	68a0      	ldr	r0, [r4, #8]
 8001bb4:	0289      	lsls	r1, r1, #10
 8001bb6:	4001      	ands	r1, r0
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	d0d8      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	051b      	lsls	r3, r3, #20
 8001bc0:	d5d5      	bpl.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001bc2:	e7c4      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x146>
          return HAL_TIMEOUT;
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	e79b      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f8e8 	bl	8000d9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bcc:	2680      	movs	r6, #128	; 0x80
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x214>)
        tickstart = HAL_GetTick();
 8001bd0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd2:	00b6      	lsls	r6, r6, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd6:	e004      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f8e0 	bl	8000d9c <HAL_GetTick>
 8001bdc:	1bc0      	subs	r0, r0, r7
 8001bde:	4548      	cmp	r0, r9
 8001be0:	d8f0      	bhi.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001be2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001be4:	4233      	tst	r3, r6
 8001be6:	d0f7      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8001be8:	22c0      	movs	r2, #192	; 0xc0
 8001bea:	6866      	ldr	r6, [r4, #4]
 8001bec:	0292      	lsls	r2, r2, #10
 8001bee:	4032      	ands	r2, r6
 8001bf0:	e7bd      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	fffff3ff 	.word	0xfffff3ff
 8001c00:	ffffcfff 	.word	0xffffcfff
 8001c04:	fffcffff 	.word	0xfffcffff
 8001c08:	fbffffff 	.word	0xfbffffff
 8001c0c:	fff3ffff 	.word	0xfff3ffff
 8001c10:	efffffff 	.word	0xefffffff
 8001c14:	fff7ffff 	.word	0xfff7ffff
 8001c18:	ffcfffff 	.word	0xffcfffff
 8001c1c:	00001388 	.word	0x00001388

08001c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	1e04      	subs	r4, r0, #0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c24:	d038      	beq.n	8001c98 <HAL_SPI_Init+0x78>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c2a:	3351      	adds	r3, #81	; 0x51
 8001c2c:	5cc3      	ldrb	r3, [r0, r3]
 8001c2e:	2600      	movs	r6, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d02b      	beq.n	8001c8c <HAL_SPI_Init+0x6c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c34:	2151      	movs	r1, #81	; 0x51
 8001c36:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c38:	2040      	movs	r0, #64	; 0x40
 8001c3a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c3c:	5463      	strb	r3, [r4, r1]
  __HAL_SPI_DISABLE(hspi);
 8001c3e:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c40:	68a5      	ldr	r5, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001c42:	4383      	bics	r3, r0
 8001c44:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c46:	6863      	ldr	r3, [r4, #4]
 8001c48:	69a0      	ldr	r0, [r4, #24]
 8001c4a:	432b      	orrs	r3, r5
 8001c4c:	68e5      	ldr	r5, [r4, #12]
 8001c4e:	432b      	orrs	r3, r5
 8001c50:	6925      	ldr	r5, [r4, #16]
 8001c52:	432b      	orrs	r3, r5
 8001c54:	6965      	ldr	r5, [r4, #20]
 8001c56:	432b      	orrs	r3, r5
 8001c58:	69e5      	ldr	r5, [r4, #28]
 8001c5a:	432b      	orrs	r3, r5
 8001c5c:	6a25      	ldr	r5, [r4, #32]
 8001c5e:	432b      	orrs	r3, r5
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	00ad      	lsls	r5, r5, #2
 8001c64:	4005      	ands	r5, r0
 8001c66:	432b      	orrs	r3, r5
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	0c00      	lsrs	r0, r0, #16
 8001c70:	4003      	ands	r3, r0
 8001c72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c74:	4303      	orrs	r3, r0
 8001c76:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c78:	69d3      	ldr	r3, [r2, #28]
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <HAL_SPI_Init+0x7c>)
 8001c7c:	4003      	ands	r3, r0
 8001c7e:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c80:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8001c82:	2000      	movs	r0, #0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c84:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c86:	3301      	adds	r3, #1
 8001c88:	5463      	strb	r3, [r4, r1]
}
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001c8c:	3350      	adds	r3, #80	; 0x50
 8001c8e:	54c6      	strb	r6, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8001c90:	f7fe ff94 	bl	8000bbc <HAL_SPI_MspInit>
 8001c94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c96:	e7cd      	b.n	8001c34 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
 8001c9a:	e7f6      	b.n	8001c8a <HAL_SPI_Init+0x6a>
 8001c9c:	fffff7ff 	.word	0xfffff7ff

08001ca0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	4903      	ldr	r1, [pc, #12]	; (8001cb0 <USB_DisableGlobalInt+0x10>)
 8001ca4:	5a83      	ldrh	r3, [r0, r2]
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8001caa:	2000      	movs	r0, #0
 8001cac:	4770      	bx	lr
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	0000407f 	.word	0x0000407f

08001cb4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	9202      	str	r2, [sp, #8]
 8001cb8:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2340      	movs	r3, #64	; 0x40
{
 8001cbe:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 8001cc0:	52c2      	strh	r2, [r0, r3]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001cc2:	2144      	movs	r1, #68	; 0x44
  USBx->CNTR = 0;
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	52c2      	strh	r2, [r0, r3]
  USBx->ISTR = 0;
 8001cc8:	5242      	strh	r2, [r0, r1]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001cca:	310c      	adds	r1, #12
 8001ccc:	5242      	strh	r2, [r0, r1]
  USBx->CNTR |= winterruptmask;
 8001cce:	5ac2      	ldrh	r2, [r0, r3]
 8001cd0:	4902      	ldr	r1, [pc, #8]	; (8001cdc <USB_DevInit+0x28>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	52c2      	strh	r2, [r0, r3]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	b004      	add	sp, #16
 8001cda:	4770      	bx	lr
 8001cdc:	0000bf80 	.word	0x0000bf80

08001ce0 <__errno>:
 8001ce0:	4b01      	ldr	r3, [pc, #4]	; (8001ce8 <__errno+0x8>)
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	4770      	bx	lr
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	20000004 	.word	0x20000004

08001cec <__libc_init_array>:
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	2600      	movs	r6, #0
 8001cf0:	4d0c      	ldr	r5, [pc, #48]	; (8001d24 <__libc_init_array+0x38>)
 8001cf2:	4c0d      	ldr	r4, [pc, #52]	; (8001d28 <__libc_init_array+0x3c>)
 8001cf4:	1b64      	subs	r4, r4, r5
 8001cf6:	10a4      	asrs	r4, r4, #2
 8001cf8:	42a6      	cmp	r6, r4
 8001cfa:	d109      	bne.n	8001d10 <__libc_init_array+0x24>
 8001cfc:	2600      	movs	r6, #0
 8001cfe:	f000 fc3b 	bl	8002578 <_init>
 8001d02:	4d0a      	ldr	r5, [pc, #40]	; (8001d2c <__libc_init_array+0x40>)
 8001d04:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <__libc_init_array+0x44>)
 8001d06:	1b64      	subs	r4, r4, r5
 8001d08:	10a4      	asrs	r4, r4, #2
 8001d0a:	42a6      	cmp	r6, r4
 8001d0c:	d105      	bne.n	8001d1a <__libc_init_array+0x2e>
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	00b3      	lsls	r3, r6, #2
 8001d12:	58eb      	ldr	r3, [r5, r3]
 8001d14:	4798      	blx	r3
 8001d16:	3601      	adds	r6, #1
 8001d18:	e7ee      	b.n	8001cf8 <__libc_init_array+0xc>
 8001d1a:	00b3      	lsls	r3, r6, #2
 8001d1c:	58eb      	ldr	r3, [r5, r3]
 8001d1e:	4798      	blx	r3
 8001d20:	3601      	adds	r6, #1
 8001d22:	e7f2      	b.n	8001d0a <__libc_init_array+0x1e>
 8001d24:	08002684 	.word	0x08002684
 8001d28:	08002684 	.word	0x08002684
 8001d2c:	08002684 	.word	0x08002684
 8001d30:	08002688 	.word	0x08002688

08001d34 <memcpy>:
 8001d34:	2300      	movs	r3, #0
 8001d36:	b510      	push	{r4, lr}
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d100      	bne.n	8001d3e <memcpy+0xa>
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	5ccc      	ldrb	r4, [r1, r3]
 8001d40:	54c4      	strb	r4, [r0, r3]
 8001d42:	3301      	adds	r3, #1
 8001d44:	e7f8      	b.n	8001d38 <memcpy+0x4>

08001d46 <memset>:
 8001d46:	0003      	movs	r3, r0
 8001d48:	1812      	adds	r2, r2, r0
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <memset+0xa>
 8001d4e:	4770      	bx	lr
 8001d50:	7019      	strb	r1, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	e7f9      	b.n	8001d4a <memset+0x4>
	...

08001d58 <sniprintf>:
 8001d58:	b40c      	push	{r2, r3}
 8001d5a:	b530      	push	{r4, r5, lr}
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <sniprintf+0x60>)
 8001d5e:	b09d      	sub	sp, #116	; 0x74
 8001d60:	1e0c      	subs	r4, r1, #0
 8001d62:	681d      	ldr	r5, [r3, #0]
 8001d64:	da08      	bge.n	8001d78 <sniprintf+0x20>
 8001d66:	238b      	movs	r3, #139	; 0x8b
 8001d68:	2001      	movs	r0, #1
 8001d6a:	602b      	str	r3, [r5, #0]
 8001d6c:	4240      	negs	r0, r0
 8001d6e:	b01d      	add	sp, #116	; 0x74
 8001d70:	bc30      	pop	{r4, r5}
 8001d72:	bc08      	pop	{r3}
 8001d74:	b002      	add	sp, #8
 8001d76:	4718      	bx	r3
 8001d78:	2382      	movs	r3, #130	; 0x82
 8001d7a:	a902      	add	r1, sp, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	818b      	strh	r3, [r1, #12]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9002      	str	r0, [sp, #8]
 8001d84:	6108      	str	r0, [r1, #16]
 8001d86:	429c      	cmp	r4, r3
 8001d88:	d000      	beq.n	8001d8c <sniprintf+0x34>
 8001d8a:	1e63      	subs	r3, r4, #1
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	614b      	str	r3, [r1, #20]
 8001d90:	2301      	movs	r3, #1
 8001d92:	425b      	negs	r3, r3
 8001d94:	81cb      	strh	r3, [r1, #14]
 8001d96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001d98:	ab21      	add	r3, sp, #132	; 0x84
 8001d9a:	0028      	movs	r0, r5
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f000 f86f 	bl	8001e80 <_svfiprintf_r>
 8001da2:	1c43      	adds	r3, r0, #1
 8001da4:	da01      	bge.n	8001daa <sniprintf+0x52>
 8001da6:	238b      	movs	r3, #139	; 0x8b
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	2c00      	cmp	r4, #0
 8001dac:	d0df      	beq.n	8001d6e <sniprintf+0x16>
 8001dae:	2300      	movs	r3, #0
 8001db0:	9a02      	ldr	r2, [sp, #8]
 8001db2:	7013      	strb	r3, [r2, #0]
 8001db4:	e7db      	b.n	8001d6e <sniprintf+0x16>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	20000004 	.word	0x20000004

08001dbc <__ssputs_r>:
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	688e      	ldr	r6, [r1, #8]
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	0007      	movs	r7, r0
 8001dc4:	000c      	movs	r4, r1
 8001dc6:	9203      	str	r2, [sp, #12]
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	429e      	cmp	r6, r3
 8001dcc:	d83c      	bhi.n	8001e48 <__ssputs_r+0x8c>
 8001dce:	2390      	movs	r3, #144	; 0x90
 8001dd0:	898a      	ldrh	r2, [r1, #12]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	421a      	tst	r2, r3
 8001dd6:	d034      	beq.n	8001e42 <__ssputs_r+0x86>
 8001dd8:	2503      	movs	r5, #3
 8001dda:	6909      	ldr	r1, [r1, #16]
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	1a5b      	subs	r3, r3, r1
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	6963      	ldr	r3, [r4, #20]
 8001de4:	9802      	ldr	r0, [sp, #8]
 8001de6:	435d      	muls	r5, r3
 8001de8:	0feb      	lsrs	r3, r5, #31
 8001dea:	195d      	adds	r5, r3, r5
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	106d      	asrs	r5, r5, #1
 8001df0:	3301      	adds	r3, #1
 8001df2:	181b      	adds	r3, r3, r0
 8001df4:	42ab      	cmp	r3, r5
 8001df6:	d900      	bls.n	8001dfa <__ssputs_r+0x3e>
 8001df8:	001d      	movs	r5, r3
 8001dfa:	0553      	lsls	r3, r2, #21
 8001dfc:	d532      	bpl.n	8001e64 <__ssputs_r+0xa8>
 8001dfe:	0029      	movs	r1, r5
 8001e00:	0038      	movs	r0, r7
 8001e02:	f000 fb19 	bl	8002438 <_malloc_r>
 8001e06:	1e06      	subs	r6, r0, #0
 8001e08:	d109      	bne.n	8001e1e <__ssputs_r+0x62>
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	2340      	movs	r3, #64	; 0x40
 8001e10:	2001      	movs	r0, #1
 8001e12:	89a2      	ldrh	r2, [r4, #12]
 8001e14:	4240      	negs	r0, r0
 8001e16:	4313      	orrs	r3, r2
 8001e18:	81a3      	strh	r3, [r4, #12]
 8001e1a:	b005      	add	sp, #20
 8001e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1e:	9a02      	ldr	r2, [sp, #8]
 8001e20:	6921      	ldr	r1, [r4, #16]
 8001e22:	f7ff ff87 	bl	8001d34 <memcpy>
 8001e26:	89a3      	ldrh	r3, [r4, #12]
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <__ssputs_r+0xc0>)
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	81a3      	strh	r3, [r4, #12]
 8001e32:	9b02      	ldr	r3, [sp, #8]
 8001e34:	6126      	str	r6, [r4, #16]
 8001e36:	18f6      	adds	r6, r6, r3
 8001e38:	6026      	str	r6, [r4, #0]
 8001e3a:	6165      	str	r5, [r4, #20]
 8001e3c:	9e01      	ldr	r6, [sp, #4]
 8001e3e:	1aed      	subs	r5, r5, r3
 8001e40:	60a5      	str	r5, [r4, #8]
 8001e42:	9b01      	ldr	r3, [sp, #4]
 8001e44:	429e      	cmp	r6, r3
 8001e46:	d900      	bls.n	8001e4a <__ssputs_r+0x8e>
 8001e48:	9e01      	ldr	r6, [sp, #4]
 8001e4a:	0032      	movs	r2, r6
 8001e4c:	9903      	ldr	r1, [sp, #12]
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	f000 fa95 	bl	800237e <memmove>
 8001e54:	68a3      	ldr	r3, [r4, #8]
 8001e56:	2000      	movs	r0, #0
 8001e58:	1b9b      	subs	r3, r3, r6
 8001e5a:	60a3      	str	r3, [r4, #8]
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	199e      	adds	r6, r3, r6
 8001e60:	6026      	str	r6, [r4, #0]
 8001e62:	e7da      	b.n	8001e1a <__ssputs_r+0x5e>
 8001e64:	002a      	movs	r2, r5
 8001e66:	0038      	movs	r0, r7
 8001e68:	f000 fb44 	bl	80024f4 <_realloc_r>
 8001e6c:	1e06      	subs	r6, r0, #0
 8001e6e:	d1e0      	bne.n	8001e32 <__ssputs_r+0x76>
 8001e70:	6921      	ldr	r1, [r4, #16]
 8001e72:	0038      	movs	r0, r7
 8001e74:	f000 fa96 	bl	80023a4 <_free_r>
 8001e78:	e7c7      	b.n	8001e0a <__ssputs_r+0x4e>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	fffffb7f 	.word	0xfffffb7f

08001e80 <_svfiprintf_r>:
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b0a1      	sub	sp, #132	; 0x84
 8001e84:	9003      	str	r0, [sp, #12]
 8001e86:	001d      	movs	r5, r3
 8001e88:	898b      	ldrh	r3, [r1, #12]
 8001e8a:	000f      	movs	r7, r1
 8001e8c:	0016      	movs	r6, r2
 8001e8e:	061b      	lsls	r3, r3, #24
 8001e90:	d511      	bpl.n	8001eb6 <_svfiprintf_r+0x36>
 8001e92:	690b      	ldr	r3, [r1, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10e      	bne.n	8001eb6 <_svfiprintf_r+0x36>
 8001e98:	2140      	movs	r1, #64	; 0x40
 8001e9a:	f000 facd 	bl	8002438 <_malloc_r>
 8001e9e:	6038      	str	r0, [r7, #0]
 8001ea0:	6138      	str	r0, [r7, #16]
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d105      	bne.n	8001eb2 <_svfiprintf_r+0x32>
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	9a03      	ldr	r2, [sp, #12]
 8001eaa:	3801      	subs	r0, #1
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	b021      	add	sp, #132	; 0x84
 8001eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	ac08      	add	r4, sp, #32
 8001eba:	6163      	str	r3, [r4, #20]
 8001ebc:	3320      	adds	r3, #32
 8001ebe:	7663      	strb	r3, [r4, #25]
 8001ec0:	3310      	adds	r3, #16
 8001ec2:	76a3      	strb	r3, [r4, #26]
 8001ec4:	9507      	str	r5, [sp, #28]
 8001ec6:	0035      	movs	r5, r6
 8001ec8:	782b      	ldrb	r3, [r5, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <_svfiprintf_r+0x52>
 8001ece:	2b25      	cmp	r3, #37	; 0x25
 8001ed0:	d146      	bne.n	8001f60 <_svfiprintf_r+0xe0>
 8001ed2:	1bab      	subs	r3, r5, r6
 8001ed4:	9305      	str	r3, [sp, #20]
 8001ed6:	d00c      	beq.n	8001ef2 <_svfiprintf_r+0x72>
 8001ed8:	0032      	movs	r2, r6
 8001eda:	0039      	movs	r1, r7
 8001edc:	9803      	ldr	r0, [sp, #12]
 8001ede:	f7ff ff6d 	bl	8001dbc <__ssputs_r>
 8001ee2:	1c43      	adds	r3, r0, #1
 8001ee4:	d100      	bne.n	8001ee8 <_svfiprintf_r+0x68>
 8001ee6:	e0ae      	b.n	8002046 <_svfiprintf_r+0x1c6>
 8001ee8:	6962      	ldr	r2, [r4, #20]
 8001eea:	9b05      	ldr	r3, [sp, #20]
 8001eec:	4694      	mov	ip, r2
 8001eee:	4463      	add	r3, ip
 8001ef0:	6163      	str	r3, [r4, #20]
 8001ef2:	782b      	ldrb	r3, [r5, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d100      	bne.n	8001efa <_svfiprintf_r+0x7a>
 8001ef8:	e0a5      	b.n	8002046 <_svfiprintf_r+0x1c6>
 8001efa:	2201      	movs	r2, #1
 8001efc:	2300      	movs	r3, #0
 8001efe:	4252      	negs	r2, r2
 8001f00:	6062      	str	r2, [r4, #4]
 8001f02:	a904      	add	r1, sp, #16
 8001f04:	3254      	adds	r2, #84	; 0x54
 8001f06:	1852      	adds	r2, r2, r1
 8001f08:	1c6e      	adds	r6, r5, #1
 8001f0a:	6023      	str	r3, [r4, #0]
 8001f0c:	60e3      	str	r3, [r4, #12]
 8001f0e:	60a3      	str	r3, [r4, #8]
 8001f10:	7013      	strb	r3, [r2, #0]
 8001f12:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f14:	7831      	ldrb	r1, [r6, #0]
 8001f16:	2205      	movs	r2, #5
 8001f18:	4853      	ldr	r0, [pc, #332]	; (8002068 <_svfiprintf_r+0x1e8>)
 8001f1a:	f000 fa25 	bl	8002368 <memchr>
 8001f1e:	1c75      	adds	r5, r6, #1
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d11f      	bne.n	8001f64 <_svfiprintf_r+0xe4>
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	06d3      	lsls	r3, r2, #27
 8001f28:	d504      	bpl.n	8001f34 <_svfiprintf_r+0xb4>
 8001f2a:	2353      	movs	r3, #83	; 0x53
 8001f2c:	a904      	add	r1, sp, #16
 8001f2e:	185b      	adds	r3, r3, r1
 8001f30:	2120      	movs	r1, #32
 8001f32:	7019      	strb	r1, [r3, #0]
 8001f34:	0713      	lsls	r3, r2, #28
 8001f36:	d504      	bpl.n	8001f42 <_svfiprintf_r+0xc2>
 8001f38:	2353      	movs	r3, #83	; 0x53
 8001f3a:	a904      	add	r1, sp, #16
 8001f3c:	185b      	adds	r3, r3, r1
 8001f3e:	212b      	movs	r1, #43	; 0x2b
 8001f40:	7019      	strb	r1, [r3, #0]
 8001f42:	7833      	ldrb	r3, [r6, #0]
 8001f44:	2b2a      	cmp	r3, #42	; 0x2a
 8001f46:	d016      	beq.n	8001f76 <_svfiprintf_r+0xf6>
 8001f48:	0035      	movs	r5, r6
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	200a      	movs	r0, #10
 8001f4e:	68e3      	ldr	r3, [r4, #12]
 8001f50:	782a      	ldrb	r2, [r5, #0]
 8001f52:	1c6e      	adds	r6, r5, #1
 8001f54:	3a30      	subs	r2, #48	; 0x30
 8001f56:	2a09      	cmp	r2, #9
 8001f58:	d94e      	bls.n	8001ff8 <_svfiprintf_r+0x178>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d018      	beq.n	8001f90 <_svfiprintf_r+0x110>
 8001f5e:	e010      	b.n	8001f82 <_svfiprintf_r+0x102>
 8001f60:	3501      	adds	r5, #1
 8001f62:	e7b1      	b.n	8001ec8 <_svfiprintf_r+0x48>
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <_svfiprintf_r+0x1e8>)
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	1ac0      	subs	r0, r0, r3
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4083      	lsls	r3, r0
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	002e      	movs	r6, r5
 8001f74:	e7ce      	b.n	8001f14 <_svfiprintf_r+0x94>
 8001f76:	9b07      	ldr	r3, [sp, #28]
 8001f78:	1d19      	adds	r1, r3, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	9107      	str	r1, [sp, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db01      	blt.n	8001f86 <_svfiprintf_r+0x106>
 8001f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f84:	e004      	b.n	8001f90 <_svfiprintf_r+0x110>
 8001f86:	425b      	negs	r3, r3
 8001f88:	60e3      	str	r3, [r4, #12]
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	6023      	str	r3, [r4, #0]
 8001f90:	782b      	ldrb	r3, [r5, #0]
 8001f92:	2b2e      	cmp	r3, #46	; 0x2e
 8001f94:	d10a      	bne.n	8001fac <_svfiprintf_r+0x12c>
 8001f96:	786b      	ldrb	r3, [r5, #1]
 8001f98:	2b2a      	cmp	r3, #42	; 0x2a
 8001f9a:	d135      	bne.n	8002008 <_svfiprintf_r+0x188>
 8001f9c:	9b07      	ldr	r3, [sp, #28]
 8001f9e:	3502      	adds	r5, #2
 8001fa0:	1d1a      	adds	r2, r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	9207      	str	r2, [sp, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db2b      	blt.n	8002002 <_svfiprintf_r+0x182>
 8001faa:	9309      	str	r3, [sp, #36]	; 0x24
 8001fac:	4e2f      	ldr	r6, [pc, #188]	; (800206c <_svfiprintf_r+0x1ec>)
 8001fae:	7829      	ldrb	r1, [r5, #0]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	0030      	movs	r0, r6
 8001fb4:	f000 f9d8 	bl	8002368 <memchr>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d006      	beq.n	8001fca <_svfiprintf_r+0x14a>
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	1b80      	subs	r0, r0, r6
 8001fc0:	4083      	lsls	r3, r0
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	3501      	adds	r5, #1
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	7829      	ldrb	r1, [r5, #0]
 8001fcc:	2206      	movs	r2, #6
 8001fce:	4828      	ldr	r0, [pc, #160]	; (8002070 <_svfiprintf_r+0x1f0>)
 8001fd0:	1c6e      	adds	r6, r5, #1
 8001fd2:	7621      	strb	r1, [r4, #24]
 8001fd4:	f000 f9c8 	bl	8002368 <memchr>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d03c      	beq.n	8002056 <_svfiprintf_r+0x1d6>
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <_svfiprintf_r+0x1f4>)
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d125      	bne.n	800202e <_svfiprintf_r+0x1ae>
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	9b07      	ldr	r3, [sp, #28]
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	4393      	bics	r3, r2
 8001fea:	3308      	adds	r3, #8
 8001fec:	9307      	str	r3, [sp, #28]
 8001fee:	6963      	ldr	r3, [r4, #20]
 8001ff0:	9a04      	ldr	r2, [sp, #16]
 8001ff2:	189b      	adds	r3, r3, r2
 8001ff4:	6163      	str	r3, [r4, #20]
 8001ff6:	e766      	b.n	8001ec6 <_svfiprintf_r+0x46>
 8001ff8:	4343      	muls	r3, r0
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	189b      	adds	r3, r3, r2
 8001ffe:	0035      	movs	r5, r6
 8002000:	e7a6      	b.n	8001f50 <_svfiprintf_r+0xd0>
 8002002:	2301      	movs	r3, #1
 8002004:	425b      	negs	r3, r3
 8002006:	e7d0      	b.n	8001faa <_svfiprintf_r+0x12a>
 8002008:	2300      	movs	r3, #0
 800200a:	200a      	movs	r0, #10
 800200c:	001a      	movs	r2, r3
 800200e:	3501      	adds	r5, #1
 8002010:	6063      	str	r3, [r4, #4]
 8002012:	7829      	ldrb	r1, [r5, #0]
 8002014:	1c6e      	adds	r6, r5, #1
 8002016:	3930      	subs	r1, #48	; 0x30
 8002018:	2909      	cmp	r1, #9
 800201a:	d903      	bls.n	8002024 <_svfiprintf_r+0x1a4>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0c5      	beq.n	8001fac <_svfiprintf_r+0x12c>
 8002020:	9209      	str	r2, [sp, #36]	; 0x24
 8002022:	e7c3      	b.n	8001fac <_svfiprintf_r+0x12c>
 8002024:	4342      	muls	r2, r0
 8002026:	2301      	movs	r3, #1
 8002028:	1852      	adds	r2, r2, r1
 800202a:	0035      	movs	r5, r6
 800202c:	e7f1      	b.n	8002012 <_svfiprintf_r+0x192>
 800202e:	ab07      	add	r3, sp, #28
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	003a      	movs	r2, r7
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_svfiprintf_r+0x1f8>)
 8002036:	0021      	movs	r1, r4
 8002038:	9803      	ldr	r0, [sp, #12]
 800203a:	e000      	b.n	800203e <_svfiprintf_r+0x1be>
 800203c:	bf00      	nop
 800203e:	9004      	str	r0, [sp, #16]
 8002040:	9b04      	ldr	r3, [sp, #16]
 8002042:	3301      	adds	r3, #1
 8002044:	d1d3      	bne.n	8001fee <_svfiprintf_r+0x16e>
 8002046:	89bb      	ldrh	r3, [r7, #12]
 8002048:	980d      	ldr	r0, [sp, #52]	; 0x34
 800204a:	065b      	lsls	r3, r3, #25
 800204c:	d400      	bmi.n	8002050 <_svfiprintf_r+0x1d0>
 800204e:	e72e      	b.n	8001eae <_svfiprintf_r+0x2e>
 8002050:	2001      	movs	r0, #1
 8002052:	4240      	negs	r0, r0
 8002054:	e72b      	b.n	8001eae <_svfiprintf_r+0x2e>
 8002056:	ab07      	add	r3, sp, #28
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <_svfiprintf_r+0x1f8>)
 800205e:	0021      	movs	r1, r4
 8002060:	9803      	ldr	r0, [sp, #12]
 8002062:	f000 f879 	bl	8002158 <_printf_i>
 8002066:	e7ea      	b.n	800203e <_svfiprintf_r+0x1be>
 8002068:	08002651 	.word	0x08002651
 800206c:	08002657 	.word	0x08002657
 8002070:	0800265b 	.word	0x0800265b
 8002074:	00000000 	.word	0x00000000
 8002078:	08001dbd 	.word	0x08001dbd

0800207c <_printf_common>:
 800207c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800207e:	0015      	movs	r5, r2
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	688a      	ldr	r2, [r1, #8]
 8002084:	690b      	ldr	r3, [r1, #16]
 8002086:	9000      	str	r0, [sp, #0]
 8002088:	000c      	movs	r4, r1
 800208a:	4293      	cmp	r3, r2
 800208c:	da00      	bge.n	8002090 <_printf_common+0x14>
 800208e:	0013      	movs	r3, r2
 8002090:	0022      	movs	r2, r4
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	3243      	adds	r2, #67	; 0x43
 8002096:	7812      	ldrb	r2, [r2, #0]
 8002098:	2a00      	cmp	r2, #0
 800209a:	d001      	beq.n	80020a0 <_printf_common+0x24>
 800209c:	3301      	adds	r3, #1
 800209e:	602b      	str	r3, [r5, #0]
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	d502      	bpl.n	80020ac <_printf_common+0x30>
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	3302      	adds	r3, #2
 80020aa:	602b      	str	r3, [r5, #0]
 80020ac:	2706      	movs	r7, #6
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	401f      	ands	r7, r3
 80020b2:	d027      	beq.n	8002104 <_printf_common+0x88>
 80020b4:	0023      	movs	r3, r4
 80020b6:	3343      	adds	r3, #67	; 0x43
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	1e5a      	subs	r2, r3, #1
 80020bc:	4193      	sbcs	r3, r2
 80020be:	6822      	ldr	r2, [r4, #0]
 80020c0:	0692      	lsls	r2, r2, #26
 80020c2:	d430      	bmi.n	8002126 <_printf_common+0xaa>
 80020c4:	0022      	movs	r2, r4
 80020c6:	9901      	ldr	r1, [sp, #4]
 80020c8:	3243      	adds	r2, #67	; 0x43
 80020ca:	9800      	ldr	r0, [sp, #0]
 80020cc:	9e08      	ldr	r6, [sp, #32]
 80020ce:	47b0      	blx	r6
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d025      	beq.n	8002120 <_printf_common+0xa4>
 80020d4:	2306      	movs	r3, #6
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	682a      	ldr	r2, [r5, #0]
 80020da:	68e1      	ldr	r1, [r4, #12]
 80020dc:	4003      	ands	r3, r0
 80020de:	2500      	movs	r5, #0
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d103      	bne.n	80020ec <_printf_common+0x70>
 80020e4:	1a8d      	subs	r5, r1, r2
 80020e6:	43eb      	mvns	r3, r5
 80020e8:	17db      	asrs	r3, r3, #31
 80020ea:	401d      	ands	r5, r3
 80020ec:	68a3      	ldr	r3, [r4, #8]
 80020ee:	6922      	ldr	r2, [r4, #16]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	dd01      	ble.n	80020f8 <_printf_common+0x7c>
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	18ed      	adds	r5, r5, r3
 80020f8:	2700      	movs	r7, #0
 80020fa:	42bd      	cmp	r5, r7
 80020fc:	d120      	bne.n	8002140 <_printf_common+0xc4>
 80020fe:	2000      	movs	r0, #0
 8002100:	e010      	b.n	8002124 <_printf_common+0xa8>
 8002102:	3701      	adds	r7, #1
 8002104:	68e3      	ldr	r3, [r4, #12]
 8002106:	682a      	ldr	r2, [r5, #0]
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	42bb      	cmp	r3, r7
 800210c:	ddd2      	ble.n	80020b4 <_printf_common+0x38>
 800210e:	0022      	movs	r2, r4
 8002110:	2301      	movs	r3, #1
 8002112:	3219      	adds	r2, #25
 8002114:	9901      	ldr	r1, [sp, #4]
 8002116:	9800      	ldr	r0, [sp, #0]
 8002118:	9e08      	ldr	r6, [sp, #32]
 800211a:	47b0      	blx	r6
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d1f0      	bne.n	8002102 <_printf_common+0x86>
 8002120:	2001      	movs	r0, #1
 8002122:	4240      	negs	r0, r0
 8002124:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002126:	2030      	movs	r0, #48	; 0x30
 8002128:	18e1      	adds	r1, r4, r3
 800212a:	3143      	adds	r1, #67	; 0x43
 800212c:	7008      	strb	r0, [r1, #0]
 800212e:	0021      	movs	r1, r4
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	3145      	adds	r1, #69	; 0x45
 8002134:	7809      	ldrb	r1, [r1, #0]
 8002136:	18a2      	adds	r2, r4, r2
 8002138:	3243      	adds	r2, #67	; 0x43
 800213a:	3302      	adds	r3, #2
 800213c:	7011      	strb	r1, [r2, #0]
 800213e:	e7c1      	b.n	80020c4 <_printf_common+0x48>
 8002140:	0022      	movs	r2, r4
 8002142:	2301      	movs	r3, #1
 8002144:	321a      	adds	r2, #26
 8002146:	9901      	ldr	r1, [sp, #4]
 8002148:	9800      	ldr	r0, [sp, #0]
 800214a:	9e08      	ldr	r6, [sp, #32]
 800214c:	47b0      	blx	r6
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d0e6      	beq.n	8002120 <_printf_common+0xa4>
 8002152:	3701      	adds	r7, #1
 8002154:	e7d1      	b.n	80020fa <_printf_common+0x7e>
	...

08002158 <_printf_i>:
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	9204      	str	r2, [sp, #16]
 800215e:	000a      	movs	r2, r1
 8002160:	3243      	adds	r2, #67	; 0x43
 8002162:	9305      	str	r3, [sp, #20]
 8002164:	9003      	str	r0, [sp, #12]
 8002166:	9202      	str	r2, [sp, #8]
 8002168:	7e0a      	ldrb	r2, [r1, #24]
 800216a:	000c      	movs	r4, r1
 800216c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800216e:	2a6e      	cmp	r2, #110	; 0x6e
 8002170:	d100      	bne.n	8002174 <_printf_i+0x1c>
 8002172:	e086      	b.n	8002282 <_printf_i+0x12a>
 8002174:	d81f      	bhi.n	80021b6 <_printf_i+0x5e>
 8002176:	2a63      	cmp	r2, #99	; 0x63
 8002178:	d033      	beq.n	80021e2 <_printf_i+0x8a>
 800217a:	d808      	bhi.n	800218e <_printf_i+0x36>
 800217c:	2a00      	cmp	r2, #0
 800217e:	d100      	bne.n	8002182 <_printf_i+0x2a>
 8002180:	e08c      	b.n	800229c <_printf_i+0x144>
 8002182:	2a58      	cmp	r2, #88	; 0x58
 8002184:	d04d      	beq.n	8002222 <_printf_i+0xca>
 8002186:	0025      	movs	r5, r4
 8002188:	3542      	adds	r5, #66	; 0x42
 800218a:	702a      	strb	r2, [r5, #0]
 800218c:	e030      	b.n	80021f0 <_printf_i+0x98>
 800218e:	2a64      	cmp	r2, #100	; 0x64
 8002190:	d001      	beq.n	8002196 <_printf_i+0x3e>
 8002192:	2a69      	cmp	r2, #105	; 0x69
 8002194:	d1f7      	bne.n	8002186 <_printf_i+0x2e>
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	6825      	ldr	r5, [r4, #0]
 800219a:	1d0a      	adds	r2, r1, #4
 800219c:	0628      	lsls	r0, r5, #24
 800219e:	d529      	bpl.n	80021f4 <_printf_i+0x9c>
 80021a0:	6808      	ldr	r0, [r1, #0]
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	2800      	cmp	r0, #0
 80021a6:	da03      	bge.n	80021b0 <_printf_i+0x58>
 80021a8:	232d      	movs	r3, #45	; 0x2d
 80021aa:	9a02      	ldr	r2, [sp, #8]
 80021ac:	4240      	negs	r0, r0
 80021ae:	7013      	strb	r3, [r2, #0]
 80021b0:	4e6b      	ldr	r6, [pc, #428]	; (8002360 <_printf_i+0x208>)
 80021b2:	270a      	movs	r7, #10
 80021b4:	e04f      	b.n	8002256 <_printf_i+0xfe>
 80021b6:	2a73      	cmp	r2, #115	; 0x73
 80021b8:	d074      	beq.n	80022a4 <_printf_i+0x14c>
 80021ba:	d808      	bhi.n	80021ce <_printf_i+0x76>
 80021bc:	2a6f      	cmp	r2, #111	; 0x6f
 80021be:	d01f      	beq.n	8002200 <_printf_i+0xa8>
 80021c0:	2a70      	cmp	r2, #112	; 0x70
 80021c2:	d1e0      	bne.n	8002186 <_printf_i+0x2e>
 80021c4:	2220      	movs	r2, #32
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	6022      	str	r2, [r4, #0]
 80021cc:	e003      	b.n	80021d6 <_printf_i+0x7e>
 80021ce:	2a75      	cmp	r2, #117	; 0x75
 80021d0:	d016      	beq.n	8002200 <_printf_i+0xa8>
 80021d2:	2a78      	cmp	r2, #120	; 0x78
 80021d4:	d1d7      	bne.n	8002186 <_printf_i+0x2e>
 80021d6:	0022      	movs	r2, r4
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	3245      	adds	r2, #69	; 0x45
 80021dc:	7011      	strb	r1, [r2, #0]
 80021de:	4e61      	ldr	r6, [pc, #388]	; (8002364 <_printf_i+0x20c>)
 80021e0:	e022      	b.n	8002228 <_printf_i+0xd0>
 80021e2:	0025      	movs	r5, r4
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	3542      	adds	r5, #66	; 0x42
 80021e8:	1d11      	adds	r1, r2, #4
 80021ea:	6019      	str	r1, [r3, #0]
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	702b      	strb	r3, [r5, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	e065      	b.n	80022c0 <_printf_i+0x168>
 80021f4:	6808      	ldr	r0, [r1, #0]
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	0669      	lsls	r1, r5, #25
 80021fa:	d5d3      	bpl.n	80021a4 <_printf_i+0x4c>
 80021fc:	b200      	sxth	r0, r0
 80021fe:	e7d1      	b.n	80021a4 <_printf_i+0x4c>
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	6825      	ldr	r5, [r4, #0]
 8002204:	1d08      	adds	r0, r1, #4
 8002206:	6018      	str	r0, [r3, #0]
 8002208:	6808      	ldr	r0, [r1, #0]
 800220a:	062e      	lsls	r6, r5, #24
 800220c:	d505      	bpl.n	800221a <_printf_i+0xc2>
 800220e:	4e54      	ldr	r6, [pc, #336]	; (8002360 <_printf_i+0x208>)
 8002210:	2708      	movs	r7, #8
 8002212:	2a6f      	cmp	r2, #111	; 0x6f
 8002214:	d01b      	beq.n	800224e <_printf_i+0xf6>
 8002216:	270a      	movs	r7, #10
 8002218:	e019      	b.n	800224e <_printf_i+0xf6>
 800221a:	066d      	lsls	r5, r5, #25
 800221c:	d5f7      	bpl.n	800220e <_printf_i+0xb6>
 800221e:	b280      	uxth	r0, r0
 8002220:	e7f5      	b.n	800220e <_printf_i+0xb6>
 8002222:	3145      	adds	r1, #69	; 0x45
 8002224:	4e4e      	ldr	r6, [pc, #312]	; (8002360 <_printf_i+0x208>)
 8002226:	700a      	strb	r2, [r1, #0]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	1d01      	adds	r1, r0, #4
 800222e:	6800      	ldr	r0, [r0, #0]
 8002230:	6019      	str	r1, [r3, #0]
 8002232:	0615      	lsls	r5, r2, #24
 8002234:	d521      	bpl.n	800227a <_printf_i+0x122>
 8002236:	07d3      	lsls	r3, r2, #31
 8002238:	d502      	bpl.n	8002240 <_printf_i+0xe8>
 800223a:	2320      	movs	r3, #32
 800223c:	431a      	orrs	r2, r3
 800223e:	6022      	str	r2, [r4, #0]
 8002240:	2710      	movs	r7, #16
 8002242:	2800      	cmp	r0, #0
 8002244:	d103      	bne.n	800224e <_printf_i+0xf6>
 8002246:	2320      	movs	r3, #32
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	439a      	bics	r2, r3
 800224c:	6022      	str	r2, [r4, #0]
 800224e:	0023      	movs	r3, r4
 8002250:	2200      	movs	r2, #0
 8002252:	3343      	adds	r3, #67	; 0x43
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	6863      	ldr	r3, [r4, #4]
 8002258:	60a3      	str	r3, [r4, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db58      	blt.n	8002310 <_printf_i+0x1b8>
 800225e:	2204      	movs	r2, #4
 8002260:	6821      	ldr	r1, [r4, #0]
 8002262:	4391      	bics	r1, r2
 8002264:	6021      	str	r1, [r4, #0]
 8002266:	2800      	cmp	r0, #0
 8002268:	d154      	bne.n	8002314 <_printf_i+0x1bc>
 800226a:	9d02      	ldr	r5, [sp, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05a      	beq.n	8002326 <_printf_i+0x1ce>
 8002270:	0025      	movs	r5, r4
 8002272:	7833      	ldrb	r3, [r6, #0]
 8002274:	3542      	adds	r5, #66	; 0x42
 8002276:	702b      	strb	r3, [r5, #0]
 8002278:	e055      	b.n	8002326 <_printf_i+0x1ce>
 800227a:	0655      	lsls	r5, r2, #25
 800227c:	d5db      	bpl.n	8002236 <_printf_i+0xde>
 800227e:	b280      	uxth	r0, r0
 8002280:	e7d9      	b.n	8002236 <_printf_i+0xde>
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	680d      	ldr	r5, [r1, #0]
 8002286:	1d10      	adds	r0, r2, #4
 8002288:	6949      	ldr	r1, [r1, #20]
 800228a:	6018      	str	r0, [r3, #0]
 800228c:	6813      	ldr	r3, [r2, #0]
 800228e:	062e      	lsls	r6, r5, #24
 8002290:	d501      	bpl.n	8002296 <_printf_i+0x13e>
 8002292:	6019      	str	r1, [r3, #0]
 8002294:	e002      	b.n	800229c <_printf_i+0x144>
 8002296:	066d      	lsls	r5, r5, #25
 8002298:	d5fb      	bpl.n	8002292 <_printf_i+0x13a>
 800229a:	8019      	strh	r1, [r3, #0]
 800229c:	2300      	movs	r3, #0
 800229e:	9d02      	ldr	r5, [sp, #8]
 80022a0:	6123      	str	r3, [r4, #16]
 80022a2:	e04f      	b.n	8002344 <_printf_i+0x1ec>
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	1d11      	adds	r1, r2, #4
 80022a8:	6019      	str	r1, [r3, #0]
 80022aa:	6815      	ldr	r5, [r2, #0]
 80022ac:	2100      	movs	r1, #0
 80022ae:	6862      	ldr	r2, [r4, #4]
 80022b0:	0028      	movs	r0, r5
 80022b2:	f000 f859 	bl	8002368 <memchr>
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d001      	beq.n	80022be <_printf_i+0x166>
 80022ba:	1b40      	subs	r0, r0, r5
 80022bc:	6060      	str	r0, [r4, #4]
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	6123      	str	r3, [r4, #16]
 80022c2:	2300      	movs	r3, #0
 80022c4:	9a02      	ldr	r2, [sp, #8]
 80022c6:	7013      	strb	r3, [r2, #0]
 80022c8:	e03c      	b.n	8002344 <_printf_i+0x1ec>
 80022ca:	6923      	ldr	r3, [r4, #16]
 80022cc:	002a      	movs	r2, r5
 80022ce:	9904      	ldr	r1, [sp, #16]
 80022d0:	9803      	ldr	r0, [sp, #12]
 80022d2:	9d05      	ldr	r5, [sp, #20]
 80022d4:	47a8      	blx	r5
 80022d6:	1c43      	adds	r3, r0, #1
 80022d8:	d03e      	beq.n	8002358 <_printf_i+0x200>
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	079b      	lsls	r3, r3, #30
 80022de:	d415      	bmi.n	800230c <_printf_i+0x1b4>
 80022e0:	9b07      	ldr	r3, [sp, #28]
 80022e2:	68e0      	ldr	r0, [r4, #12]
 80022e4:	4298      	cmp	r0, r3
 80022e6:	da39      	bge.n	800235c <_printf_i+0x204>
 80022e8:	0018      	movs	r0, r3
 80022ea:	e037      	b.n	800235c <_printf_i+0x204>
 80022ec:	0022      	movs	r2, r4
 80022ee:	2301      	movs	r3, #1
 80022f0:	3219      	adds	r2, #25
 80022f2:	9904      	ldr	r1, [sp, #16]
 80022f4:	9803      	ldr	r0, [sp, #12]
 80022f6:	9e05      	ldr	r6, [sp, #20]
 80022f8:	47b0      	blx	r6
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	d02c      	beq.n	8002358 <_printf_i+0x200>
 80022fe:	3501      	adds	r5, #1
 8002300:	68e3      	ldr	r3, [r4, #12]
 8002302:	9a07      	ldr	r2, [sp, #28]
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	42ab      	cmp	r3, r5
 8002308:	dcf0      	bgt.n	80022ec <_printf_i+0x194>
 800230a:	e7e9      	b.n	80022e0 <_printf_i+0x188>
 800230c:	2500      	movs	r5, #0
 800230e:	e7f7      	b.n	8002300 <_printf_i+0x1a8>
 8002310:	2800      	cmp	r0, #0
 8002312:	d0ad      	beq.n	8002270 <_printf_i+0x118>
 8002314:	9d02      	ldr	r5, [sp, #8]
 8002316:	0039      	movs	r1, r7
 8002318:	f7fd ff7c 	bl	8000214 <__aeabi_uidivmod>
 800231c:	5c73      	ldrb	r3, [r6, r1]
 800231e:	3d01      	subs	r5, #1
 8002320:	702b      	strb	r3, [r5, #0]
 8002322:	2800      	cmp	r0, #0
 8002324:	d1f7      	bne.n	8002316 <_printf_i+0x1be>
 8002326:	2f08      	cmp	r7, #8
 8002328:	d109      	bne.n	800233e <_printf_i+0x1e6>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	07db      	lsls	r3, r3, #31
 800232e:	d506      	bpl.n	800233e <_printf_i+0x1e6>
 8002330:	6863      	ldr	r3, [r4, #4]
 8002332:	6922      	ldr	r2, [r4, #16]
 8002334:	4293      	cmp	r3, r2
 8002336:	dc02      	bgt.n	800233e <_printf_i+0x1e6>
 8002338:	2330      	movs	r3, #48	; 0x30
 800233a:	3d01      	subs	r5, #1
 800233c:	702b      	strb	r3, [r5, #0]
 800233e:	9b02      	ldr	r3, [sp, #8]
 8002340:	1b5b      	subs	r3, r3, r5
 8002342:	6123      	str	r3, [r4, #16]
 8002344:	9b05      	ldr	r3, [sp, #20]
 8002346:	aa07      	add	r2, sp, #28
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	0021      	movs	r1, r4
 800234c:	9b04      	ldr	r3, [sp, #16]
 800234e:	9803      	ldr	r0, [sp, #12]
 8002350:	f7ff fe94 	bl	800207c <_printf_common>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d1b8      	bne.n	80022ca <_printf_i+0x172>
 8002358:	2001      	movs	r0, #1
 800235a:	4240      	negs	r0, r0
 800235c:	b009      	add	sp, #36	; 0x24
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002360:	08002662 	.word	0x08002662
 8002364:	08002673 	.word	0x08002673

08002368 <memchr>:
 8002368:	b2c9      	uxtb	r1, r1
 800236a:	1882      	adds	r2, r0, r2
 800236c:	4290      	cmp	r0, r2
 800236e:	d101      	bne.n	8002374 <memchr+0xc>
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr
 8002374:	7803      	ldrb	r3, [r0, #0]
 8002376:	428b      	cmp	r3, r1
 8002378:	d0fb      	beq.n	8002372 <memchr+0xa>
 800237a:	3001      	adds	r0, #1
 800237c:	e7f6      	b.n	800236c <memchr+0x4>

0800237e <memmove>:
 800237e:	b510      	push	{r4, lr}
 8002380:	4288      	cmp	r0, r1
 8002382:	d902      	bls.n	800238a <memmove+0xc>
 8002384:	188b      	adds	r3, r1, r2
 8002386:	4298      	cmp	r0, r3
 8002388:	d303      	bcc.n	8002392 <memmove+0x14>
 800238a:	2300      	movs	r3, #0
 800238c:	e007      	b.n	800239e <memmove+0x20>
 800238e:	5c8b      	ldrb	r3, [r1, r2]
 8002390:	5483      	strb	r3, [r0, r2]
 8002392:	3a01      	subs	r2, #1
 8002394:	d2fb      	bcs.n	800238e <memmove+0x10>
 8002396:	bd10      	pop	{r4, pc}
 8002398:	5ccc      	ldrb	r4, [r1, r3]
 800239a:	54c4      	strb	r4, [r0, r3]
 800239c:	3301      	adds	r3, #1
 800239e:	429a      	cmp	r2, r3
 80023a0:	d1fa      	bne.n	8002398 <memmove+0x1a>
 80023a2:	e7f8      	b.n	8002396 <memmove+0x18>

080023a4 <_free_r>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	0005      	movs	r5, r0
 80023a8:	2900      	cmp	r1, #0
 80023aa:	d010      	beq.n	80023ce <_free_r+0x2a>
 80023ac:	1f0c      	subs	r4, r1, #4
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da00      	bge.n	80023b6 <_free_r+0x12>
 80023b4:	18e4      	adds	r4, r4, r3
 80023b6:	0028      	movs	r0, r5
 80023b8:	f000 f8d4 	bl	8002564 <__malloc_lock>
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <_free_r+0x90>)
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <_free_r+0x2c>
 80023c4:	6063      	str	r3, [r4, #4]
 80023c6:	6014      	str	r4, [r2, #0]
 80023c8:	0028      	movs	r0, r5
 80023ca:	f000 f8cc 	bl	8002566 <__malloc_unlock>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	42a3      	cmp	r3, r4
 80023d2:	d909      	bls.n	80023e8 <_free_r+0x44>
 80023d4:	6821      	ldr	r1, [r4, #0]
 80023d6:	1860      	adds	r0, r4, r1
 80023d8:	4283      	cmp	r3, r0
 80023da:	d1f3      	bne.n	80023c4 <_free_r+0x20>
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	1841      	adds	r1, r0, r1
 80023e2:	6021      	str	r1, [r4, #0]
 80023e4:	e7ee      	b.n	80023c4 <_free_r+0x20>
 80023e6:	0013      	movs	r3, r2
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	d001      	beq.n	80023f2 <_free_r+0x4e>
 80023ee:	42a2      	cmp	r2, r4
 80023f0:	d9f9      	bls.n	80023e6 <_free_r+0x42>
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	1858      	adds	r0, r3, r1
 80023f6:	42a0      	cmp	r0, r4
 80023f8:	d10b      	bne.n	8002412 <_free_r+0x6e>
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	1809      	adds	r1, r1, r0
 80023fe:	1858      	adds	r0, r3, r1
 8002400:	6019      	str	r1, [r3, #0]
 8002402:	4282      	cmp	r2, r0
 8002404:	d1e0      	bne.n	80023c8 <_free_r+0x24>
 8002406:	6810      	ldr	r0, [r2, #0]
 8002408:	6852      	ldr	r2, [r2, #4]
 800240a:	1841      	adds	r1, r0, r1
 800240c:	6019      	str	r1, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	e7da      	b.n	80023c8 <_free_r+0x24>
 8002412:	42a0      	cmp	r0, r4
 8002414:	d902      	bls.n	800241c <_free_r+0x78>
 8002416:	230c      	movs	r3, #12
 8002418:	602b      	str	r3, [r5, #0]
 800241a:	e7d5      	b.n	80023c8 <_free_r+0x24>
 800241c:	6821      	ldr	r1, [r4, #0]
 800241e:	1860      	adds	r0, r4, r1
 8002420:	4282      	cmp	r2, r0
 8002422:	d103      	bne.n	800242c <_free_r+0x88>
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	6852      	ldr	r2, [r2, #4]
 8002428:	1841      	adds	r1, r0, r1
 800242a:	6021      	str	r1, [r4, #0]
 800242c:	6062      	str	r2, [r4, #4]
 800242e:	605c      	str	r4, [r3, #4]
 8002430:	e7ca      	b.n	80023c8 <_free_r+0x24>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	2000008c 	.word	0x2000008c

08002438 <_malloc_r>:
 8002438:	2303      	movs	r3, #3
 800243a:	b570      	push	{r4, r5, r6, lr}
 800243c:	1ccd      	adds	r5, r1, #3
 800243e:	439d      	bics	r5, r3
 8002440:	3508      	adds	r5, #8
 8002442:	0006      	movs	r6, r0
 8002444:	2d0c      	cmp	r5, #12
 8002446:	d21e      	bcs.n	8002486 <_malloc_r+0x4e>
 8002448:	250c      	movs	r5, #12
 800244a:	42a9      	cmp	r1, r5
 800244c:	d81d      	bhi.n	800248a <_malloc_r+0x52>
 800244e:	0030      	movs	r0, r6
 8002450:	f000 f888 	bl	8002564 <__malloc_lock>
 8002454:	4a25      	ldr	r2, [pc, #148]	; (80024ec <_malloc_r+0xb4>)
 8002456:	6814      	ldr	r4, [r2, #0]
 8002458:	0021      	movs	r1, r4
 800245a:	2900      	cmp	r1, #0
 800245c:	d119      	bne.n	8002492 <_malloc_r+0x5a>
 800245e:	4c24      	ldr	r4, [pc, #144]	; (80024f0 <_malloc_r+0xb8>)
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <_malloc_r+0x36>
 8002466:	0030      	movs	r0, r6
 8002468:	f000 f86a 	bl	8002540 <_sbrk_r>
 800246c:	6020      	str	r0, [r4, #0]
 800246e:	0029      	movs	r1, r5
 8002470:	0030      	movs	r0, r6
 8002472:	f000 f865 	bl	8002540 <_sbrk_r>
 8002476:	1c43      	adds	r3, r0, #1
 8002478:	d12b      	bne.n	80024d2 <_malloc_r+0x9a>
 800247a:	230c      	movs	r3, #12
 800247c:	0030      	movs	r0, r6
 800247e:	6033      	str	r3, [r6, #0]
 8002480:	f000 f871 	bl	8002566 <__malloc_unlock>
 8002484:	e003      	b.n	800248e <_malloc_r+0x56>
 8002486:	2d00      	cmp	r5, #0
 8002488:	dadf      	bge.n	800244a <_malloc_r+0x12>
 800248a:	230c      	movs	r3, #12
 800248c:	6033      	str	r3, [r6, #0]
 800248e:	2000      	movs	r0, #0
 8002490:	bd70      	pop	{r4, r5, r6, pc}
 8002492:	680b      	ldr	r3, [r1, #0]
 8002494:	1b5b      	subs	r3, r3, r5
 8002496:	d419      	bmi.n	80024cc <_malloc_r+0x94>
 8002498:	2b0b      	cmp	r3, #11
 800249a:	d903      	bls.n	80024a4 <_malloc_r+0x6c>
 800249c:	600b      	str	r3, [r1, #0]
 800249e:	18cc      	adds	r4, r1, r3
 80024a0:	6025      	str	r5, [r4, #0]
 80024a2:	e003      	b.n	80024ac <_malloc_r+0x74>
 80024a4:	684b      	ldr	r3, [r1, #4]
 80024a6:	428c      	cmp	r4, r1
 80024a8:	d10d      	bne.n	80024c6 <_malloc_r+0x8e>
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	0030      	movs	r0, r6
 80024ae:	f000 f85a 	bl	8002566 <__malloc_unlock>
 80024b2:	0020      	movs	r0, r4
 80024b4:	2207      	movs	r2, #7
 80024b6:	300b      	adds	r0, #11
 80024b8:	1d23      	adds	r3, r4, #4
 80024ba:	4390      	bics	r0, r2
 80024bc:	1ac3      	subs	r3, r0, r3
 80024be:	d0e7      	beq.n	8002490 <_malloc_r+0x58>
 80024c0:	425a      	negs	r2, r3
 80024c2:	50e2      	str	r2, [r4, r3]
 80024c4:	e7e4      	b.n	8002490 <_malloc_r+0x58>
 80024c6:	6063      	str	r3, [r4, #4]
 80024c8:	000c      	movs	r4, r1
 80024ca:	e7ef      	b.n	80024ac <_malloc_r+0x74>
 80024cc:	000c      	movs	r4, r1
 80024ce:	6849      	ldr	r1, [r1, #4]
 80024d0:	e7c3      	b.n	800245a <_malloc_r+0x22>
 80024d2:	2303      	movs	r3, #3
 80024d4:	1cc4      	adds	r4, r0, #3
 80024d6:	439c      	bics	r4, r3
 80024d8:	42a0      	cmp	r0, r4
 80024da:	d0e1      	beq.n	80024a0 <_malloc_r+0x68>
 80024dc:	1a21      	subs	r1, r4, r0
 80024de:	0030      	movs	r0, r6
 80024e0:	f000 f82e 	bl	8002540 <_sbrk_r>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d1db      	bne.n	80024a0 <_malloc_r+0x68>
 80024e8:	e7c7      	b.n	800247a <_malloc_r+0x42>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	2000008c 	.word	0x2000008c
 80024f0:	20000090 	.word	0x20000090

080024f4 <_realloc_r>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	0007      	movs	r7, r0
 80024f8:	000d      	movs	r5, r1
 80024fa:	0016      	movs	r6, r2
 80024fc:	2900      	cmp	r1, #0
 80024fe:	d105      	bne.n	800250c <_realloc_r+0x18>
 8002500:	0011      	movs	r1, r2
 8002502:	f7ff ff99 	bl	8002438 <_malloc_r>
 8002506:	0004      	movs	r4, r0
 8002508:	0020      	movs	r0, r4
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250c:	2a00      	cmp	r2, #0
 800250e:	d103      	bne.n	8002518 <_realloc_r+0x24>
 8002510:	f7ff ff48 	bl	80023a4 <_free_r>
 8002514:	0034      	movs	r4, r6
 8002516:	e7f7      	b.n	8002508 <_realloc_r+0x14>
 8002518:	f000 f826 	bl	8002568 <_malloc_usable_size_r>
 800251c:	002c      	movs	r4, r5
 800251e:	42b0      	cmp	r0, r6
 8002520:	d2f2      	bcs.n	8002508 <_realloc_r+0x14>
 8002522:	0031      	movs	r1, r6
 8002524:	0038      	movs	r0, r7
 8002526:	f7ff ff87 	bl	8002438 <_malloc_r>
 800252a:	1e04      	subs	r4, r0, #0
 800252c:	d0ec      	beq.n	8002508 <_realloc_r+0x14>
 800252e:	0029      	movs	r1, r5
 8002530:	0032      	movs	r2, r6
 8002532:	f7ff fbff 	bl	8001d34 <memcpy>
 8002536:	0029      	movs	r1, r5
 8002538:	0038      	movs	r0, r7
 800253a:	f7ff ff33 	bl	80023a4 <_free_r>
 800253e:	e7e3      	b.n	8002508 <_realloc_r+0x14>

08002540 <_sbrk_r>:
 8002540:	2300      	movs	r3, #0
 8002542:	b570      	push	{r4, r5, r6, lr}
 8002544:	4c06      	ldr	r4, [pc, #24]	; (8002560 <_sbrk_r+0x20>)
 8002546:	0005      	movs	r5, r0
 8002548:	0008      	movs	r0, r1
 800254a:	6023      	str	r3, [r4, #0]
 800254c:	f7fe fb7e 	bl	8000c4c <_sbrk>
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d103      	bne.n	800255c <_sbrk_r+0x1c>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d000      	beq.n	800255c <_sbrk_r+0x1c>
 800255a:	602b      	str	r3, [r5, #0]
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	20000364 	.word	0x20000364

08002564 <__malloc_lock>:
 8002564:	4770      	bx	lr

08002566 <__malloc_unlock>:
 8002566:	4770      	bx	lr

08002568 <_malloc_usable_size_r>:
 8002568:	1f0b      	subs	r3, r1, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1f18      	subs	r0, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	da01      	bge.n	8002576 <_malloc_usable_size_r+0xe>
 8002572:	580b      	ldr	r3, [r1, r0]
 8002574:	18c0      	adds	r0, r0, r3
 8002576:	4770      	bx	lr

08002578 <_init>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr

08002584 <_fini>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

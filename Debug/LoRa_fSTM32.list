
LoRa_fSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e8  080037e8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080037f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000008  080037f8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080037f8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a3c  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b5a  00000000  00000000  00029a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013647  00000000  00000000  0002c800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000084f4  00000000  00000000  0003fe47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077d66  00000000  00000000  0004833b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c00a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000215c  00000000  00000000  000c011c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800379c 	.word	0x0800379c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	0800379c 	.word	0x0800379c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <LoRa_Init>:
uint8_t Sub[1] = {0};

/**
 * Функция инициализации LoRa
 */
void LoRa_Init(SPI_HandleTypeDef hspi1){
 800060c:	b084      	sub	sp, #16
 800060e:	b5b0      	push	{r4, r5, r7, lr}
 8000610:	af00      	add	r7, sp, #0
 8000612:	2510      	movs	r5, #16
 8000614:	197c      	adds	r4, r7, r5
 8000616:	6020      	str	r0, [r4, #0]
 8000618:	6061      	str	r1, [r4, #4]
 800061a:	60a2      	str	r2, [r4, #8]
 800061c:	60e3      	str	r3, [r4, #12]
	spi = hspi1;
 800061e:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <LoRa_Init+0x108>)
 8000620:	197a      	adds	r2, r7, r5
 8000622:	0018      	movs	r0, r3
 8000624:	0011      	movs	r1, r2
 8000626:	2358      	movs	r3, #88	; 0x58
 8000628:	001a      	movs	r2, r3
 800062a:	f003 f8a5 	bl	8003778 <memcpy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //Установить RESET LoRa в 0
 800062e:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <LoRa_Init+0x10c>)
 8000630:	2201      	movs	r2, #1
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fa19 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800063a:	20c8      	movs	r0, #200	; 0xc8
 800063c:	f000 ffc6 	bl	80015cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //Установить RESET LoRa в 0
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <LoRa_Init+0x10c>)
 8000642:	2200      	movs	r2, #0
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fa10 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f000 ffbd 	bl	80015cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //Установить RESET LoRa в 0
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <LoRa_Init+0x10c>)
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fa07 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800065e:	2032      	movs	r0, #50	; 0x32
 8000660:	f000 ffb4 	bl	80015cc <HAL_Delay>

	LoRa_Sleep();
 8000664:	f000 fc12 	bl	8000e8c <LoRa_Sleep>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f000 ffaf 	bl	80015cc <HAL_Delay>
	LoRa_Write(OpMode, 0x80);
 800066e:	2301      	movs	r3, #1
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fc46 	bl	8000f04 <LoRa_Write>
	HAL_Delay(100);
 8000678:	2064      	movs	r0, #100	; 0x64
 800067a:	f000 ffa7 	bl	80015cc <HAL_Delay>
	LoRa_Write(FifoTxBaseAddr, 0);
 800067e:	230e      	movs	r3, #14
 8000680:	2100      	movs	r1, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fc3e 	bl	8000f04 <LoRa_Write>
	LoRa_Write(FifoRxBaseAddr, 0);
 8000688:	230f      	movs	r3, #15
 800068a:	2100      	movs	r1, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fc39 	bl	8000f04 <LoRa_Write>
	LoRa_Write(ModemConfig3, 0x04);
 8000692:	2326      	movs	r3, #38	; 0x26
 8000694:	2104      	movs	r1, #4
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fc34 	bl	8000f04 <LoRa_Write>
	setTx(17);
 800069c:	2011      	movs	r0, #17
 800069e:	f000 f9fd 	bl	8000a9c <setTx>
	LoRa_DisableCRC();
 80006a2:	f000 fb05 	bl	8000cb0 <LoRa_DisableCRC>
	LoRa_setSpreadingfactor(11);
 80006a6:	200b      	movs	r0, #11
 80006a8:	f000 fb6e 	bl	8000d88 <LoRa_setSpreadingfactor>

	LoRa_Read(ModemConfig2, Sub);
 80006ac:	221e      	movs	r2, #30
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <LoRa_Init+0x110>)
 80006b0:	0019      	movs	r1, r3
 80006b2:	0010      	movs	r0, r2
 80006b4:	f000 fc66 	bl	8000f84 <LoRa_Read>
	Sub[0] = Sub[0] & 0xFE;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <LoRa_Init+0x110>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2201      	movs	r2, #1
 80006be:	4393      	bics	r3, r2
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <LoRa_Init+0x110>)
 80006c4:	701a      	strb	r2, [r3, #0]
	LoRa_Write(ModemConfig2, Sub[0]);
 80006c6:	221e      	movs	r2, #30
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <LoRa_Init+0x110>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f000 fc18 	bl	8000f04 <LoRa_Write>

	LoRa_Write(SymbTimeoutLsb, 100);
 80006d4:	231f      	movs	r3, #31
 80006d6:	2164      	movs	r1, #100	; 0x64
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fc13 	bl	8000f04 <LoRa_Write>
	LoRa_setFrequency(433000000);
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <LoRa_Init+0x114>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fb01 	bl	8000ce8 <LoRa_setFrequency>
	LoRa_changePreamble(128);
 80006e6:	2080      	movs	r0, #128	; 0x80
 80006e8:	f000 f864 	bl	80007b4 <LoRa_changePreamble>
	LoRa_Write(ModemConfig1, 114);
 80006ec:	231d      	movs	r3, #29
 80006ee:	2172      	movs	r1, #114	; 0x72
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fc07 	bl	8000f04 <LoRa_Write>
	SyncWordSet(0x12);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f000 f834 	bl	8000764 <SyncWordSet>
	LoRa_STD();
 80006fc:	f000 fbe6 	bl	8000ecc <LoRa_STD>
	HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f000 ff63 	bl	80015cc <HAL_Delay>
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bcb0      	pop	{r4, r5, r7}
 800070c:	bc08      	pop	{r3}
 800070e:	b004      	add	sp, #16
 8000710:	4718      	bx	r3
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000038 	.word	0x20000038
 8000718:	50000400 	.word	0x50000400
 800071c:	20000028 	.word	0x20000028
 8000720:	19cf0e40 	.word	0x19cf0e40

08000724 <LoRa_expMode>:

void LoRa_expMode(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	mode = 0;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <LoRa_expMode+0x38>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	LoRa_Read(ModemConfig1, Sub);
 800072e:	221d      	movs	r2, #29
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <LoRa_expMode+0x3c>)
 8000732:	0019      	movs	r1, r3
 8000734:	0010      	movs	r0, r2
 8000736:	f000 fc25 	bl	8000f84 <LoRa_Read>
	Sub[0] = Sub[0] & 0xFE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LoRa_expMode+0x3c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2201      	movs	r2, #1
 8000740:	4393      	bics	r3, r2
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LoRa_expMode+0x3c>)
 8000746:	701a      	strb	r2, [r3, #0]
	LoRa_Write(ModemConfig1, Sub[0]);
 8000748:	221d      	movs	r2, #29
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <LoRa_expMode+0x3c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0019      	movs	r1, r3
 8000750:	0010      	movs	r0, r2
 8000752:	f000 fbd7 	bl	8000f04 <LoRa_Write>
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000024 	.word	0x20000024
 8000760:	20000028 	.word	0x20000028

08000764 <SyncWordSet>:

void SyncWordSet(uint8_t word){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
	LoRa_Write(SyncWord, word);
 8000770:	2239      	movs	r2, #57	; 0x39
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	0019      	movs	r1, r3
 8000778:	0010      	movs	r0, r2
 800077a:	f000 fbc3 	bl	8000f04 <LoRa_Write>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <available>:

int packcount = 0;

int available(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	LoRa_Read(RxNbBytes, Sub);
 800078c:	2213      	movs	r2, #19
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <available+0x24>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f000 fbf6 	bl	8000f84 <LoRa_Read>
	return (Sub[0] - packcount);
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <available+0x24>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	001a      	movs	r2, r3
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <available+0x28>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	1ad3      	subs	r3, r2, r3
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000028 	.word	0x20000028
 80007b0:	2000002c 	.word	0x2000002c

080007b4 <LoRa_changePreamble>:

void LoRa_changePreamble(uint16_t length){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	801a      	strh	r2, [r3, #0]
	Sub[0] = length >> 8;
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <LoRa_changePreamble+0x48>)
 80007cc:	701a      	strb	r2, [r3, #0]
	LoRa_Write(PreambleMsb, Sub[0]);
 80007ce:	2220      	movs	r2, #32
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <LoRa_changePreamble+0x48>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	0010      	movs	r0, r2
 80007d8:	f000 fb94 	bl	8000f04 <LoRa_Write>
	Sub[0] = length >> 0;
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <LoRa_changePreamble+0x48>)
 80007e4:	701a      	strb	r2, [r3, #0]
	LoRa_Write(PreambleLsb, Sub[0]);
 80007e6:	2221      	movs	r2, #33	; 0x21
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <LoRa_changePreamble+0x48>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	f000 fb88 	bl	8000f04 <LoRa_Write>
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000028 	.word	0x20000028

08000800 <parsePacket>:

uint8_t  parsePacket (uint8_t size){
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	701a      	strb	r2, [r3, #0]
	uint8_t packL = 0;
 800080c:	230f      	movs	r3, #15
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
	uint8_t irqF = 0;
 8000814:	240e      	movs	r4, #14
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
	LoRa_Read(IrqFlags, Sub);
 800081c:	2212      	movs	r2, #18
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <parsePacket+0x100>)
 8000820:	0019      	movs	r1, r3
 8000822:	0010      	movs	r0, r2
 8000824:	f000 fbae 	bl	8000f84 <LoRa_Read>
	irqF = Sub[0];
 8000828:	193b      	adds	r3, r7, r4
 800082a:	4a35      	ldr	r2, [pc, #212]	; (8000900 <parsePacket+0x100>)
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	701a      	strb	r2, [r3, #0]
	if (size > 0){
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d009      	beq.n	800084c <parsePacket+0x4c>
		LoRa_impMode();
 8000838:	f000 fa1a 	bl	8000c70 <LoRa_impMode>
		LoRa_Write(PayloadLength, size & 0xFF);
 800083c:	2222      	movs	r2, #34	; 0x22
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 fb5d 	bl	8000f04 <LoRa_Write>
 800084a:	e001      	b.n	8000850 <parsePacket+0x50>
	}else {
		LoRa_expMode();
 800084c:	f7ff ff6a 	bl	8000724 <LoRa_expMode>
	}
	LoRa_Write(IrqFlags, irqF);
 8000850:	2212      	movs	r2, #18
 8000852:	240e      	movs	r4, #14
 8000854:	193b      	adds	r3, r7, r4
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0019      	movs	r1, r3
 800085a:	0010      	movs	r0, r2
 800085c:	f000 fb52 	bl	8000f04 <LoRa_Write>
	if (((irqF & 0x40) == 0x40) && ((irqF & 0x20) == 0)){
 8000860:	193b      	adds	r3, r7, r4
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	4013      	ands	r3, r2
 8000868:	d02e      	beq.n	80008c8 <parsePacket+0xc8>
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2220      	movs	r2, #32
 8000872:	4013      	ands	r3, r2
 8000874:	d128      	bne.n	80008c8 <parsePacket+0xc8>
		packcount = 0;
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <parsePacket+0x104>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
		if (mode == 0){
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <parsePacket+0x108>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d106      	bne.n	8000892 <parsePacket+0x92>
			LoRa_Read(RxNbBytes, Sub);
 8000884:	2213      	movs	r2, #19
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <parsePacket+0x100>)
 8000888:	0019      	movs	r1, r3
 800088a:	0010      	movs	r0, r2
 800088c:	f000 fb7a 	bl	8000f84 <LoRa_Read>
 8000890:	e005      	b.n	800089e <parsePacket+0x9e>
		} else {
			LoRa_Read(PayloadLength, Sub);
 8000892:	2222      	movs	r2, #34	; 0x22
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <parsePacket+0x100>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 fb73 	bl	8000f84 <LoRa_Read>
		}
		packL = Sub[0];
 800089e:	230f      	movs	r3, #15
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <parsePacket+0x100>)
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
		LoRa_Read(FifoRxCurrentAddr, Sub);
 80008a8:	2210      	movs	r2, #16
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <parsePacket+0x100>)
 80008ac:	0019      	movs	r1, r3
 80008ae:	0010      	movs	r0, r2
 80008b0:	f000 fb68 	bl	8000f84 <LoRa_Read>
		LoRa_Write(FifoAddrPtr, Sub[0]);
 80008b4:	220d      	movs	r2, #13
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <parsePacket+0x100>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0019      	movs	r1, r3
 80008bc:	0010      	movs	r0, r2
 80008be:	f000 fb21 	bl	8000f04 <LoRa_Write>
		LoRa_STD();
 80008c2:	f000 fb03 	bl	8000ecc <LoRa_STD>
 80008c6:	e013      	b.n	80008f0 <parsePacket+0xf0>
	}else {
		LoRa_Read(OpMode, Sub);
 80008c8:	2201      	movs	r2, #1
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <parsePacket+0x100>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 fb58 	bl	8000f84 <LoRa_Read>
		if (Sub[0] != (0x80 | 0x06)){
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <parsePacket+0x100>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b86      	cmp	r3, #134	; 0x86
 80008da:	d009      	beq.n	80008f0 <parsePacket+0xf0>
			LoRa_Write(FifoAddrPtr, 0x00);
 80008dc:	230d      	movs	r3, #13
 80008de:	2100      	movs	r1, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fb0f 	bl	8000f04 <LoRa_Write>
			LoRa_Write(OpMode, 0x80 | 0x06);
 80008e6:	2301      	movs	r3, #1
 80008e8:	2186      	movs	r1, #134	; 0x86
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fb0a 	bl	8000f04 <LoRa_Write>
		}
	}
	return packL;
 80008f0:	230f      	movs	r3, #15
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	781b      	ldrb	r3, [r3, #0]
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b005      	add	sp, #20
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000028 	.word	0x20000028
 8000904:	2000002c 	.word	0x2000002c
 8000908:	20000024 	.word	0x20000024

0800090c <recive>:

void recive(){
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	b08d      	sub	sp, #52	; 0x34
 8000910:	af00      	add	r7, sp, #0
	while (1){
		uint8_t pP = parsePacket(0);
 8000912:	230b      	movs	r3, #11
 8000914:	001c      	movs	r4, r3
 8000916:	2220      	movs	r2, #32
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	18d6      	adds	r6, r2, r3
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff6f 	bl	8000800 <parsePacket>
 8000922:	0003      	movs	r3, r0
 8000924:	7033      	strb	r3, [r6, #0]
		if (pP > 0){
 8000926:	0023      	movs	r3, r4
 8000928:	2220      	movs	r2, #32
 800092a:	4694      	mov	ip, r2
 800092c:	44bc      	add	ip, r7
 800092e:	4463      	add	r3, ip
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0ed      	beq.n	8000912 <recive+0x6>
 8000936:	466b      	mov	r3, sp
 8000938:	001e      	movs	r6, r3
			char buf[pP];
 800093a:	230b      	movs	r3, #11
 800093c:	2220      	movs	r2, #32
 800093e:	4694      	mov	ip, r2
 8000940:	44bc      	add	ip, r7
 8000942:	4463      	add	r3, ip
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001a      	movs	r2, r3
 8000948:	3a01      	subs	r2, #1
 800094a:	627a      	str	r2, [r7, #36]	; 0x24
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	2200      	movs	r2, #0
 8000950:	60fa      	str	r2, [r7, #12]
 8000952:	68b8      	ldr	r0, [r7, #8]
 8000954:	68f9      	ldr	r1, [r7, #12]
 8000956:	0002      	movs	r2, r0
 8000958:	0f52      	lsrs	r2, r2, #29
 800095a:	000c      	movs	r4, r1
 800095c:	00e4      	lsls	r4, r4, #3
 800095e:	61fc      	str	r4, [r7, #28]
 8000960:	69fc      	ldr	r4, [r7, #28]
 8000962:	4314      	orrs	r4, r2
 8000964:	61fc      	str	r4, [r7, #28]
 8000966:	0002      	movs	r2, r0
 8000968:	00d2      	lsls	r2, r2, #3
 800096a:	61ba      	str	r2, [r7, #24]
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	0002      	movs	r2, r0
 8000978:	0f52      	lsrs	r2, r2, #29
 800097a:	000c      	movs	r4, r1
 800097c:	00e4      	lsls	r4, r4, #3
 800097e:	617c      	str	r4, [r7, #20]
 8000980:	697c      	ldr	r4, [r7, #20]
 8000982:	4314      	orrs	r4, r2
 8000984:	617c      	str	r4, [r7, #20]
 8000986:	0002      	movs	r2, r0
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	613a      	str	r2, [r7, #16]
 800098c:	3307      	adds	r3, #7
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	466a      	mov	r2, sp
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	469d      	mov	sp, r3
 8000998:	466b      	mov	r3, sp
 800099a:	3300      	adds	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
			int i = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (available() > 0){
 80009a2:	e00b      	b.n	80009bc <recive+0xb0>
				buf[i] = ReadPackage();
 80009a4:	f000 f810 	bl	80009c8 <ReadPackage>
 80009a8:	0003      	movs	r3, r0
 80009aa:	0019      	movs	r1, r3
 80009ac:	6a3a      	ldr	r2, [r7, #32]
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	1c0a      	adds	r2, r1, #0
 80009b4:	701a      	strb	r2, [r3, #0]
				i++;
 80009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b8:	3301      	adds	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (available() > 0){
 80009bc:	f7ff fee4 	bl	8000788 <available>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	dcef      	bgt.n	80009a4 <recive+0x98>
 80009c4:	46b5      	mov	sp, r6
	while (1){
 80009c6:	e7a4      	b.n	8000912 <recive+0x6>

080009c8 <ReadPackage>:
			}
		}
	}
}
uint8_t ReadPackage(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if (available() <= 0) return 0;
 80009cc:	f7ff fedc 	bl	8000788 <available>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	dc01      	bgt.n	80009d8 <ReadPackage+0x10>
 80009d4:	2300      	movs	r3, #0
 80009d6:	e00c      	b.n	80009f2 <ReadPackage+0x2a>
	packcount += 1;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <ReadPackage+0x30>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <ReadPackage+0x30>)
 80009e0:	601a      	str	r2, [r3, #0]
	LoRa_Read(Fifo, Sub);
 80009e2:	2200      	movs	r2, #0
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <ReadPackage+0x34>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f000 facb 	bl	8000f84 <LoRa_Read>
	return Sub[0];
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <ReadPackage+0x34>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	20000028 	.word	0x20000028

08000a00 <headerPacket>:

uint8_t headerPacket(uint8_t header){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
	if (isTransmitting() == 1) return 0;
 8000a0c:	f000 fa0c 	bl	8000e28 <isTransmitting>
 8000a10:	0003      	movs	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d101      	bne.n	8000a1a <headerPacket+0x1a>
 8000a16:	2300      	movs	r3, #0
 8000a18:	e015      	b.n	8000a46 <headerPacket+0x46>
	LoRa_STD();
 8000a1a:	f000 fa57 	bl	8000ecc <LoRa_STD>
	if (header == 1) LoRa_impMode();
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <headerPacket+0x2c>
 8000a26:	f000 f923 	bl	8000c70 <LoRa_impMode>
 8000a2a:	e001      	b.n	8000a30 <headerPacket+0x30>
	else LoRa_expMode();
 8000a2c:	f7ff fe7a 	bl	8000724 <LoRa_expMode>
	LoRa_Write(FifoAddrPtr, 0);
 8000a30:	230d      	movs	r3, #13
 8000a32:	2100      	movs	r1, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fa65 	bl	8000f04 <LoRa_Write>
	LoRa_Write(PayloadLength, 0);
 8000a3a:	2322      	movs	r3, #34	; 0x22
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fa60 	bl	8000f04 <LoRa_Write>
	return 1;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <endPacket>:

uint8_t endPacket(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	LoRa_Write(OpMode, 0x80 | 0x03);
 8000a54:	2301      	movs	r3, #1
 8000a56:	2183      	movs	r1, #131	; 0x83
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fa53 	bl	8000f04 <LoRa_Write>
	LoRa_Read(IrqFlags, Sub);
 8000a5e:	2212      	movs	r2, #18
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <endPacket+0x48>)
 8000a62:	0019      	movs	r1, r3
 8000a64:	0010      	movs	r0, r2
 8000a66:	f000 fa8d 	bl	8000f84 <LoRa_Read>
	while ((Sub[0] & 0x08) == 0){
 8000a6a:	e005      	b.n	8000a78 <endPacket+0x28>
		LoRa_Read(IrqFlags, Sub);
 8000a6c:	2212      	movs	r2, #18
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <endPacket+0x48>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	0010      	movs	r0, r2
 8000a74:	f000 fa86 	bl	8000f84 <LoRa_Read>
	while ((Sub[0] & 0x08) == 0){
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <endPacket+0x48>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2308      	movs	r3, #8
 8000a80:	4013      	ands	r3, r2
 8000a82:	d0f3      	beq.n	8000a6c <endPacket+0x1c>
	}
	LoRa_Write(IrqFlags, 0x08);
 8000a84:	2312      	movs	r3, #18
 8000a86:	2108      	movs	r1, #8
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fa3b 	bl	8000f04 <LoRa_Write>
	return 1;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000028 	.word	0x20000028

08000a9c <setTx>:

void setTx(int power){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	int pa_pin = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
	if (pa_pin == 0){
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11a      	bne.n	8000ae4 <setTx+0x48>
		if (power < 0){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da02      	bge.n	8000aba <setTx+0x1e>
			power = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	e004      	b.n	8000ac4 <setTx+0x28>
		}else if (power > 14) power = 14;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0e      	cmp	r3, #14
 8000abe:	dd01      	ble.n	8000ac4 <setTx+0x28>
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	607b      	str	r3, [r7, #4]
		Sub[0] = (0x70 | power);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	2270      	movs	r2, #112	; 0x70
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <setTx+0xb4>)
 8000ad2:	701a      	strb	r2, [r3, #0]
		LoRa_Write(PaConfig, Sub[0]);
 8000ad4:	2209      	movs	r2, #9
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <setTx+0xb4>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f000 fa11 	bl	8000f04 <LoRa_Write>
			setOCP(100);
		}
		Sub[0] = (0x80 | (power - 2));
		LoRa_Write(PaConfig, Sub[0]);
	}
}
 8000ae2:	e031      	b.n	8000b48 <setTx+0xac>
		if (power > 17){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b11      	cmp	r3, #17
 8000ae8:	dd0f      	ble.n	8000b0a <setTx+0x6e>
			if (power > 20){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b14      	cmp	r3, #20
 8000aee:	dd01      	ble.n	8000af4 <setTx+0x58>
				power = 20;
 8000af0:	2314      	movs	r3, #20
 8000af2:	607b      	str	r3, [r7, #4]
			power = power - 3;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b03      	subs	r3, #3
 8000af8:	607b      	str	r3, [r7, #4]
			LoRa_Write(0x4d, 0x87);
 8000afa:	2187      	movs	r1, #135	; 0x87
 8000afc:	204d      	movs	r0, #77	; 0x4d
 8000afe:	f000 fa01 	bl	8000f04 <LoRa_Write>
			setOCP(140);
 8000b02:	208c      	movs	r0, #140	; 0x8c
 8000b04:	f000 f826 	bl	8000b54 <setOCP>
 8000b08:	e00b      	b.n	8000b22 <setTx+0x86>
			if (power < 2){
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	dc01      	bgt.n	8000b14 <setTx+0x78>
				power = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
			LoRa_Write(0x4d, 0x84);
 8000b14:	2184      	movs	r1, #132	; 0x84
 8000b16:	204d      	movs	r0, #77	; 0x4d
 8000b18:	f000 f9f4 	bl	8000f04 <LoRa_Write>
			setOCP(100);
 8000b1c:	2064      	movs	r0, #100	; 0x64
 8000b1e:	f000 f819 	bl	8000b54 <setOCP>
		Sub[0] = (0x80 | (power - 2));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3b02      	subs	r3, #2
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	4252      	negs	r2, r2
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <setTx+0xb4>)
 8000b38:	701a      	strb	r2, [r3, #0]
		LoRa_Write(PaConfig, Sub[0]);
 8000b3a:	2209      	movs	r2, #9
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <setTx+0xb4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f000 f9de 	bl	8000f04 <LoRa_Write>
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000028 	.word	0x20000028

08000b54 <setOCP>:

void setOCP(uint8_t power){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	701a      	strb	r2, [r3, #0]
	uint8_t tr = 27;
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	221b      	movs	r2, #27
 8000b66:	701a      	strb	r2, [r3, #0]
	if (power < 120){
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b77      	cmp	r3, #119	; 0x77
 8000b6e:	d80c      	bhi.n	8000b8a <setOCP+0x36>
		tr = ((power - 45) / 5);
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b2d      	subs	r3, #45	; 0x2d
 8000b76:	2105      	movs	r1, #5
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fb4f 	bl	800021c <__divsi3>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	001a      	movs	r2, r3
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e00f      	b.n	8000baa <setOCP+0x56>
	}else if (power <= 240) { tr = ((power + 30) / 10);}
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2bf0      	cmp	r3, #240	; 0xf0
 8000b90:	d80b      	bhi.n	8000baa <setOCP+0x56>
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	331e      	adds	r3, #30
 8000b98:	210a      	movs	r1, #10
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fb3e 	bl	800021c <__divsi3>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	701a      	strb	r2, [r3, #0]
	Sub[0] = (0x20 | (0x1F & tr));
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	221f      	movs	r2, #31
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <setOCP+0x84>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	LoRa_Write(Ocp, Sub[0]);
 8000bc0:	220b      	movs	r2, #11
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <setOCP+0x84>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f000 f99b 	bl	8000f04 <LoRa_Write>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000028 	.word	0x20000028

08000bdc <Write_Massage>:

void Write_Massage(char *buffer, uint8_t size){
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	000a      	movs	r2, r1
 8000be6:	1cfb      	adds	r3, r7, #3
 8000be8:	701a      	strb	r2, [r3, #0]
	LoRa_Read(PayloadLength, Sub);
 8000bea:	2222      	movs	r2, #34	; 0x22
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <Write_Massage+0x90>)
 8000bee:	0019      	movs	r1, r3
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	f000 f9c7 	bl	8000f84 <LoRa_Read>
	if ((Sub[0] + size) > 255){
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <Write_Massage+0x90>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	1cfb      	adds	r3, r7, #3
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	2bff      	cmp	r3, #255	; 0xff
 8000c04:	dd04      	ble.n	8000c10 <Write_Massage+0x34>
		size = 255 - Sub[0];
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <Write_Massage+0x90>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	1cfb      	adds	r3, r7, #3
 8000c0c:	43d2      	mvns	r2, r2
 8000c0e:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i = 0; i < size; i++){
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e00e      	b.n	8000c38 <Write_Massage+0x5c>
		LoRa_Write(Fifo, buffer[i]);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	240f      	movs	r4, #15
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	f000 f96b 	bl	8000f04 <LoRa_Write>
	for (uint8_t i = 0; i < size; i++){
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	3201      	adds	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fa      	adds	r2, r7, r3
 8000c3c:	1cfb      	adds	r3, r7, #3
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3e9      	bcc.n	8000c1a <Write_Massage+0x3e>
	}
	Sub[0] = Sub[0] + size;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <Write_Massage+0x90>)
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	1cfb      	adds	r3, r7, #3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	18d3      	adds	r3, r2, r3
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <Write_Massage+0x90>)
 8000c54:	701a      	strb	r2, [r3, #0]
	LoRa_Write(PayloadLength, Sub[0]);
 8000c56:	2222      	movs	r2, #34	; 0x22
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <Write_Massage+0x90>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0010      	movs	r0, r2
 8000c60:	f000 f950 	bl	8000f04 <LoRa_Write>
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b005      	add	sp, #20
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	20000028 	.word	0x20000028

08000c70 <LoRa_impMode>:

void LoRa_impMode(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	mode = 1;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoRa_impMode+0x38>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
	LoRa_Read(ModemConfig1, Sub);
 8000c7a:	221d      	movs	r2, #29
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <LoRa_impMode+0x3c>)
 8000c7e:	0019      	movs	r1, r3
 8000c80:	0010      	movs	r0, r2
 8000c82:	f000 f97f 	bl	8000f84 <LoRa_Read>
	Sub[0] = Sub[0] | 0x01;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <LoRa_impMode+0x3c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <LoRa_impMode+0x3c>)
 8000c92:	701a      	strb	r2, [r3, #0]
	LoRa_Write(ModemConfig1, Sub[0]);
 8000c94:	221d      	movs	r2, #29
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <LoRa_impMode+0x3c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f000 f931 	bl	8000f04 <LoRa_Write>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000024 	.word	0x20000024
 8000cac:	20000028 	.word	0x20000028

08000cb0 <LoRa_DisableCRC>:
	LoRa_Read(ModemConfig2, Sub);
	Sub[0] = Sub[0] | 0x04;
	LoRa_Write(ModemConfig2, Sub[0]);
}

void LoRa_DisableCRC(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	LoRa_Read(ModemConfig2, Sub);
 8000cb4:	221e      	movs	r2, #30
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <LoRa_DisableCRC+0x34>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f000 f962 	bl	8000f84 <LoRa_Read>
	Sub[0] = Sub[0] & 0xfb;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <LoRa_DisableCRC+0x34>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4393      	bics	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LoRa_DisableCRC+0x34>)
 8000ccc:	701a      	strb	r2, [r3, #0]
	LoRa_Write(ModemConfig2, Sub[0]);
 8000cce:	221e      	movs	r2, #30
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <LoRa_DisableCRC+0x34>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	0010      	movs	r0, r2
 8000cd8:	f000 f914 	bl	8000f04 <LoRa_Write>
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000028 	.word	0x20000028

08000ce8 <LoRa_setFrequency>:

void LoRa_setFrequency(long frq){
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6178      	str	r0, [r7, #20]
	uint64_t fr = ((uint64_t)frq << 19) / 32000000;
 8000cf0:	6979      	ldr	r1, [r7, #20]
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	17c9      	asrs	r1, r1, #31
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	1351      	asrs	r1, r2, #13
 8000cfa:	6079      	str	r1, [r7, #4]
 8000cfc:	04d3      	lsls	r3, r2, #19
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <LoRa_setFrequency+0x98>)
 8000d02:	2300      	movs	r3, #0
 8000d04:	6838      	ldr	r0, [r7, #0]
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f7ff fb74 	bl	80003f4 <__aeabi_uldivmod>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	000b      	movs	r3, r1
 8000d10:	61ba      	str	r2, [r7, #24]
 8000d12:	61fb      	str	r3, [r7, #28]
	Sub[0] = fr >> 16;
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	0c12      	lsrs	r2, r2, #16
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	60ba      	str	r2, [r7, #8]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	7a3a      	ldrb	r2, [r7, #8]
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <LoRa_setFrequency+0x9c>)
 8000d2e:	701a      	strb	r2, [r3, #0]
	LoRa_Write(FrMsb, Sub[0]);
 8000d30:	2206      	movs	r2, #6
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <LoRa_setFrequency+0x9c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0019      	movs	r1, r3
 8000d38:	0010      	movs	r0, r2
 8000d3a:	f000 f8e3 	bl	8000f04 <LoRa_Write>
	Sub[0] = fr >> 8;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	061b      	lsls	r3, r3, #24
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	0a14      	lsrs	r4, r2, #8
 8000d46:	431c      	orrs	r4, r3
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	0a1d      	lsrs	r5, r3, #8
 8000d4c:	b2e2      	uxtb	r2, r4
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <LoRa_setFrequency+0x9c>)
 8000d50:	701a      	strb	r2, [r3, #0]
	LoRa_Write(FrMid, Sub[0]);
 8000d52:	2207      	movs	r2, #7
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <LoRa_setFrequency+0x9c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	0010      	movs	r0, r2
 8000d5c:	f000 f8d2 	bl	8000f04 <LoRa_Write>
	Sub[0] = fr >> 0;
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	69fc      	ldr	r4, [r7, #28]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <LoRa_setFrequency+0x9c>)
 8000d68:	701a      	strb	r2, [r3, #0]
	LoRa_Write(FrLsb, Sub[0]);
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <LoRa_setFrequency+0x9c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	0019      	movs	r1, r3
 8000d72:	0010      	movs	r0, r2
 8000d74:	f000 f8c6 	bl	8000f04 <LoRa_Write>
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b008      	add	sp, #32
 8000d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d80:	01e84800 	.word	0x01e84800
 8000d84:	20000028 	.word	0x20000028

08000d88 <LoRa_setSpreadingfactor>:

void LoRa_setSpreadingfactor(uint8_t sf){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	0002      	movs	r2, r0
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	701a      	strb	r2, [r3, #0]
	if (sf < 6) sf = 6;
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	d803      	bhi.n	8000da4 <LoRa_setSpreadingfactor+0x1c>
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	2206      	movs	r2, #6
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e006      	b.n	8000db2 <LoRa_setSpreadingfactor+0x2a>
	else if (sf > 12) sf = 12;
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b0c      	cmp	r3, #12
 8000daa:	d902      	bls.n	8000db2 <LoRa_setSpreadingfactor+0x2a>
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	220c      	movs	r2, #12
 8000db0:	701a      	strb	r2, [r3, #0]
	if (sf == 6){
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d10a      	bne.n	8000dd0 <LoRa_setSpreadingfactor+0x48>
		LoRa_Write(DetectOptimize, 0xC5);
 8000dba:	2331      	movs	r3, #49	; 0x31
 8000dbc:	21c5      	movs	r1, #197	; 0xc5
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 f8a0 	bl	8000f04 <LoRa_Write>
		LoRa_Write(DetectionThreshold, 0x0C);
 8000dc4:	2337      	movs	r3, #55	; 0x37
 8000dc6:	210c      	movs	r1, #12
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 f89b 	bl	8000f04 <LoRa_Write>
 8000dce:	e009      	b.n	8000de4 <LoRa_setSpreadingfactor+0x5c>
	}else {
		LoRa_Write(DetectOptimize, 0xC3);
 8000dd0:	2331      	movs	r3, #49	; 0x31
 8000dd2:	21c3      	movs	r1, #195	; 0xc3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 f895 	bl	8000f04 <LoRa_Write>
		LoRa_Write(DetectionThreshold, 0x0A);
 8000dda:	2337      	movs	r3, #55	; 0x37
 8000ddc:	210a      	movs	r1, #10
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f890 	bl	8000f04 <LoRa_Write>
	}
	LoRa_Read(ModemConfig2, Sub);
 8000de4:	221e      	movs	r2, #30
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <LoRa_setSpreadingfactor+0x9c>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	0010      	movs	r0, r2
 8000dec:	f000 f8ca 	bl	8000f84 <LoRa_Read>
	Sub[0] = (Sub[0] & 0x0F) | ((sf << 4) & 0xF0);
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <LoRa_setSpreadingfactor+0x9c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	220f      	movs	r2, #15
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <LoRa_setSpreadingfactor+0x9c>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	LoRa_Write(ModemConfig2, Sub[0]);
 8000e0e:	221e      	movs	r2, #30
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <LoRa_setSpreadingfactor+0x9c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	0019      	movs	r1, r3
 8000e16:	0010      	movs	r0, r2
 8000e18:	f000 f874 	bl	8000f04 <LoRa_Write>
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000028 	.word	0x20000028

08000e28 <isTransmitting>:

uint8_t isTransmitting(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	LoRa_Read(OpMode, Sub);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <isTransmitting+0x60>)
 8000e30:	0019      	movs	r1, r3
 8000e32:	0010      	movs	r0, r2
 8000e34:	f000 f8a6 	bl	8000f84 <LoRa_Read>
	if ((Sub[0] & 0x03) == 0x03){
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <isTransmitting+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	2303      	movs	r3, #3
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d108      	bne.n	8000e58 <isTransmitting+0x30>
		if ((Sub[0] & 0x07) == 0x07){
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <isTransmitting+0x60>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d001      	beq.n	8000e58 <isTransmitting+0x30>
			//CaD Detection
		}else{
			return 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e013      	b.n	8000e80 <isTransmitting+0x58>
		}
	}
	LoRa_Read(IrqFlags, Sub);
 8000e58:	2212      	movs	r2, #18
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <isTransmitting+0x60>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f000 f890 	bl	8000f84 <LoRa_Read>
	if ((Sub[0] & 0x08) == 0x08){
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <isTransmitting+0x60>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d006      	beq.n	8000e7e <isTransmitting+0x56>
		LoRa_Write(IrqFlags, Sub[0]);
 8000e70:	2212      	movs	r2, #18
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <isTransmitting+0x60>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0019      	movs	r1, r3
 8000e78:	0010      	movs	r0, r2
 8000e7a:	f000 f843 	bl	8000f04 <LoRa_Write>
	}
	return 0;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	20000028 	.word	0x20000028

08000e8c <LoRa_Sleep>:


void LoRa_Sleep(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	LoRa_Read(OpMode, Sub);
 8000e90:	2201      	movs	r2, #1
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <LoRa_Sleep+0x3c>)
 8000e94:	0019      	movs	r1, r3
 8000e96:	0010      	movs	r0, r2
 8000e98:	f000 f874 	bl	8000f84 <LoRa_Read>
	Sub[0] = (Sub[0] | 0x80) & 0xfe;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <LoRa_Sleep+0x3c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	4252      	negs	r2, r2
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4393      	bics	r3, r2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <LoRa_Sleep+0x3c>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	LoRa_Write(OpMode, Sub[0]);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <LoRa_Sleep+0x3c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0010      	movs	r0, r2
 8000ebc:	f000 f822 	bl	8000f04 <LoRa_Write>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000028 	.word	0x20000028

08000ecc <LoRa_STD>:

void LoRa_STD(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	LoRa_Read(OpMode, Sub);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LoRa_STD+0x34>)
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	f000 f854 	bl	8000f84 <LoRa_Read>
	Sub[0] = (Sub[0] | 0x81);
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <LoRa_STD+0x34>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	227f      	movs	r2, #127	; 0x7f
 8000ee2:	4252      	negs	r2, r2
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <LoRa_STD+0x34>)
 8000eea:	701a      	strb	r2, [r3, #0]
	LoRa_Write(OpMode, Sub[0]);
 8000eec:	2201      	movs	r2, #1
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <LoRa_STD+0x34>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	f000 f805 	bl	8000f04 <LoRa_Write>
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000028 	.word	0x20000028

08000f04 <LoRa_Write>:
uint8_t reg[2] = {0x00, 0x00};
uint8_t answer[2] = {0x00, 0x00};
/**
 * Функция записи данных в LoRa
 */
void LoRa_Write(uint8_t Reg, uint8_t Change){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	1c0a      	adds	r2, r1, #0
 8000f14:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_RESET);
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <LoRa_Write+0x70>)
 8000f18:	8819      	ldrh	r1, [r3, #0]
 8000f1a:	23a0      	movs	r3, #160	; 0xa0
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	2200      	movs	r2, #0
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 fda3 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f26:	2005      	movs	r0, #5
 8000f28:	f000 fb50 	bl	80015cc <HAL_Delay>
	reg[0] = Reg | 0x80;
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	4252      	negs	r2, r2
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <LoRa_Write+0x74>)
 8000f3a:	701a      	strb	r2, [r3, #0]
	reg[1] = Change;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <LoRa_Write+0x74>)
 8000f3e:	1dba      	adds	r2, r7, #6
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	705a      	strb	r2, [r3, #1]
	rc = HAL_SPI_Transmit(&spi, reg, 2, HAL_MAX_DELAY);
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	490b      	ldr	r1, [pc, #44]	; (8000f78 <LoRa_Write+0x74>)
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoRa_Write+0x78>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	f001 fe45 	bl	8002bdc <HAL_SPI_Transmit>
 8000f52:	0003      	movs	r3, r0
 8000f54:	001a      	movs	r2, r3
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <LoRa_Write+0x7c>)
 8000f58:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_SET);
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <LoRa_Write+0x70>)
 8000f5c:	8819      	ldrh	r1, [r3, #0]
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	2201      	movs	r2, #1
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fd81 	bl	8001a6c <HAL_GPIO_WritePin>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	20000038 	.word	0x20000038
 8000f80:	20000034 	.word	0x20000034

08000f84 <LoRa_Read>:

/**
 * Функция чтения регистра из LoRa
 */
void LoRa_Read(uint8_t Reg, uint8_t* Ans){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_RESET);
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <LoRa_Read+0x7c>)
 8000f94:	8819      	ldrh	r1, [r3, #0]
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fd65 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fa2:	2005      	movs	r0, #5
 8000fa4:	f000 fb12 	bl	80015cc <HAL_Delay>
	reg[0] = Reg & 0x7f; // при отладке возникла проблема, что между опусканием SS и отправкой данных слишком мало времени
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	227f      	movs	r2, #127	; 0x7f
 8000fae:	4013      	ands	r3, r2
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <LoRa_Read+0x80>)
 8000fb4:	701a      	strb	r2, [r3, #0]
	reg[1] = 0x00;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <LoRa_Read+0x80>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	705a      	strb	r2, [r3, #1]
	rc = HAL_SPI_Transmit(&spi, reg, 1, HAL_MAX_DELAY);
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	4910      	ldr	r1, [pc, #64]	; (8001004 <LoRa_Read+0x80>)
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <LoRa_Read+0x84>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f001 fe09 	bl	8002bdc <HAL_SPI_Transmit>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <LoRa_Read+0x88>)
 8000fd0:	701a      	strb	r2, [r3, #0]
	rc = HAL_SPI_Receive(&spi, Ans, 1, HAL_MAX_DELAY);
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoRa_Read+0x84>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f001 ff4c 	bl	8002e78 <HAL_SPI_Receive>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoRa_Read+0x88>)
 8000fe6:	701a      	strb	r2, [r3, #0]
 	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_SET);
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <LoRa_Read+0x7c>)
 8000fea:	8819      	ldrh	r1, [r3, #0]
 8000fec:	23a0      	movs	r3, #160	; 0xa0
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fd3a 	bl	8001a6c <HAL_GPIO_WritePin>
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000030 	.word	0x20000030
 8001008:	20000038 	.word	0x20000038
 800100c:	20000034 	.word	0x20000034

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b095      	sub	sp, #84	; 0x54
 8001014:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f000 fa79 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f82b 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 f8ef 	bl	8001200 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001022:	f000 f88f 	bl	8001144 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001026:	f000 f8c5 	bl	80011b4 <MX_USB_PCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LoRa_Init(hspi1);
 800102a:	4c10      	ldr	r4, [pc, #64]	; (800106c <main+0x5c>)
 800102c:	466b      	mov	r3, sp
 800102e:	0018      	movs	r0, r3
 8001030:	0023      	movs	r3, r4
 8001032:	3310      	adds	r3, #16
 8001034:	2248      	movs	r2, #72	; 0x48
 8001036:	0019      	movs	r1, r3
 8001038:	f002 fb9e 	bl	8003778 <memcpy>
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	6861      	ldr	r1, [r4, #4]
 8001040:	68a2      	ldr	r2, [r4, #8]
 8001042:	68e3      	ldr	r3, [r4, #12]
 8001044:	f7ff fae2 	bl	800060c <LoRa_Init>
  char *mas = "Helora World";
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <main+0x60>)
 800104a:	607b      	str	r3, [r7, #4]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 recive();
 800104c:	f7ff fc5e 	bl	800090c <recive>
	 while(headerPacket(0) == 0){
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fcd4 	bl	8000a00 <headerPacket>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d0fa      	beq.n	8001052 <main+0x42>
	 }
	 Write_Massage(mas, 12);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	210c      	movs	r1, #12
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fdbb 	bl	8000bdc <Write_Massage>
	 endPacket();
 8001066:	f7ff fcf3 	bl	8000a50 <endPacket>
	 recive();
 800106a:	e7ef      	b.n	800104c <main+0x3c>
 800106c:	20000090 	.word	0x20000090
 8001070:	080037b4 	.word	0x080037b4

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b09f      	sub	sp, #124	; 0x7c
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	2440      	movs	r4, #64	; 0x40
 800107c:	193b      	adds	r3, r7, r4
 800107e:	0018      	movs	r0, r3
 8001080:	2338      	movs	r3, #56	; 0x38
 8001082:	001a      	movs	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	f002 fb80 	bl	800378a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108a:	232c      	movs	r3, #44	; 0x2c
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	0018      	movs	r0, r3
 8001090:	2314      	movs	r3, #20
 8001092:	001a      	movs	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	f002 fb78 	bl	800378a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	0018      	movs	r0, r3
 800109e:	2328      	movs	r3, #40	; 0x28
 80010a0:	001a      	movs	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f002 fb71 	bl	800378a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <SystemClock_Config+0xc8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <SystemClock_Config+0xcc>)
 80010ae:	401a      	ands	r2, r3
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xc8>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0109      	lsls	r1, r1, #4
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2221      	movs	r2, #33	; 0x21
 80010be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0252      	lsls	r2, r2, #9
 80010c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2201      	movs	r2, #1
 80010cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fe2a 	bl	8001d30 <HAL_RCC_OscConfig>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80010e0:	f000 f91c 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	212c      	movs	r1, #44	; 0x2c
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	220f      	movs	r2, #15
 80010ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2202      	movs	r2, #2
 80010f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2101      	movs	r1, #1
 8001108:	0018      	movs	r0, r3
 800110a:	f001 f9e1 	bl	80024d0 <HAL_RCC_ClockConfig>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001112:	f000 f903 	bl	800131c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2240      	movs	r2, #64	; 0x40
 800111a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	04d2      	lsls	r2, r2, #19
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	0018      	movs	r0, r3
 8001128:	f001 fb7a 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001130:	f000 f8f4 	bl	800131c <Error_Handler>
  }
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b01f      	add	sp, #124	; 0x7c
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40007000 	.word	0x40007000
 8001140:	ffffe7ff 	.word	0xffffe7ff

08001144 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_SPI1_Init+0x68>)
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <MX_SPI1_Init+0x6c>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_SPI1_Init+0x68>)
 8001150:	2282      	movs	r2, #130	; 0x82
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_SPI1_Init+0x68>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_SPI1_Init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_SPI1_Init+0x68>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_SPI1_Init+0x68>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_SPI1_Init+0x68>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_SPI1_Init+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_SPI1_Init+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_SPI1_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_SPI1_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_SPI1_Init+0x68>)
 8001190:	2207      	movs	r2, #7
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MX_SPI1_Init+0x68>)
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fcb6 	bl	8002b08 <HAL_SPI_Init>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a0:	f000 f8bc 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000090 	.word	0x20000090
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <MX_USB_PCD_Init+0x48>)
 80011bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <MX_USB_PCD_Init+0x44>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f000 fc5f 	bl	8001aa8 <HAL_PCD_Init>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80011ee:	f000 f895 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000e8 	.word	0x200000e8
 80011fc:	40005c00 	.word	0x40005c00

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	240c      	movs	r4, #12
 8001208:	193b      	adds	r3, r7, r4
 800120a:	0018      	movs	r0, r3
 800120c:	2314      	movs	r3, #20
 800120e:	001a      	movs	r2, r3
 8001210:	2100      	movs	r1, #0
 8001212:	f002 faba 	bl	800378a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <MX_GPIO_Init+0x110>)
 8001218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <MX_GPIO_Init+0x110>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	430a      	orrs	r2, r1
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <MX_GPIO_Init+0x110>)
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <MX_GPIO_Init+0x110>)
 8001230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <MX_GPIO_Init+0x110>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
 800123a:	4b35      	ldr	r3, [pc, #212]	; (8001310 <MX_GPIO_Init+0x110>)
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b32      	ldr	r3, [pc, #200]	; (8001310 <MX_GPIO_Init+0x110>)
 8001248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <MX_GPIO_Init+0x110>)
 800124c:	2102      	movs	r1, #2
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <MX_GPIO_Init+0x110>)
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800125e:	23a0      	movs	r3, #160	; 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	2200      	movs	r2, #0
 8001264:	2110      	movs	r1, #16
 8001266:	0018      	movs	r0, r3
 8001268:	f000 fc00 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_GPIO_Init+0x114>)
 800126e:	2200      	movs	r2, #0
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	0018      	movs	r0, r3
 8001274:	f000 fbfa 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001278:	193b      	adds	r3, r7, r4
 800127a:	220c      	movs	r2, #12
 800127c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	193a      	adds	r2, r7, r4
 800128c:	23a0      	movs	r3, #160	; 0xa0
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fa6c 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001298:	193b      	adds	r3, r7, r4
 800129a:	2210      	movs	r2, #16
 800129c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	2201      	movs	r2, #1
 80012a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	193a      	adds	r2, r7, r4
 80012b2:	23a0      	movs	r3, #160	; 0xa0
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	0011      	movs	r1, r2
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 fa59 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 80012be:	0021      	movs	r1, r4
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_GPIO_Init+0x118>)
 80012c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	000c      	movs	r4, r1
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <MX_GPIO_Init+0x114>)
 80012d8:	0019      	movs	r1, r3
 80012da:	0010      	movs	r0, r2
 80012dc:	f000 fa48 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012e0:	0021      	movs	r1, r4
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2201      	movs	r2, #1
 80012ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <MX_GPIO_Init+0x114>)
 80012fe:	0019      	movs	r1, r3
 8001300:	0010      	movs	r0, r2
 8001302:	f000 fa35 	bl	8001770 <HAL_GPIO_Init>

}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b009      	add	sp, #36	; 0x24
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	50000400 	.word	0x50000400
 8001318:	00000407 	.word	0x00000407

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_MspInit+0x24>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x24>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <HAL_MspInit+0x24>)
 800133a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_MspInit+0x24>)
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	0549      	lsls	r1, r1, #21
 8001342:	430a      	orrs	r2, r1
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	230c      	movs	r3, #12
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	0018      	movs	r0, r3
 800135e:	2314      	movs	r3, #20
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f002 fa11 	bl	800378a <memset>
  if(hspi->Instance==SPI1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_SPI_MspInit+0x80>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d129      	bne.n	80013c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_SPI_MspInit+0x84>)
 8001374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_SPI_MspInit+0x84>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0149      	lsls	r1, r1, #5
 800137c:	430a      	orrs	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_SPI_MspInit+0x84>)
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_SPI_MspInit+0x84>)
 8001386:	2101      	movs	r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_SPI_MspInit+0x84>)
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001398:	210c      	movs	r1, #12
 800139a:	187b      	adds	r3, r7, r1
 800139c:	22e0      	movs	r2, #224	; 0xe0
 800139e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2202      	movs	r2, #2
 80013a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2203      	movs	r2, #3
 80013b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	187a      	adds	r2, r7, r1
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f000 f9d5 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b008      	add	sp, #32
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	40013000 	.word	0x40013000
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_PCD_MspInit+0x28>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_PCD_MspInit+0x2c>)
 80013ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_PCD_MspInit+0x2c>)
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	0409      	lsls	r1, r1, #16
 80013f4:	430a      	orrs	r2, r1
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40005c00 	.word	0x40005c00
 8001404:	40021000 	.word	0x40021000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f8b6 	bl	80015a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <SystemInit+0x64>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <SystemInit+0x64>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0049      	lsls	r1, r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <SystemInit+0x64>)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <SystemInit+0x64>)
 8001454:	4913      	ldr	r1, [pc, #76]	; (80014a4 <SystemInit+0x68>)
 8001456:	400a      	ands	r2, r1
 8001458:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <SystemInit+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <SystemInit+0x64>)
 8001460:	4911      	ldr	r1, [pc, #68]	; (80014a8 <SystemInit+0x6c>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <SystemInit+0x64>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <SystemInit+0x64>)
 800146c:	2101      	movs	r1, #1
 800146e:	438a      	bics	r2, r1
 8001470:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <SystemInit+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <SystemInit+0x64>)
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <SystemInit+0x70>)
 800147a:	400a      	ands	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <SystemInit+0x64>)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <SystemInit+0x64>)
 8001484:	490a      	ldr	r1, [pc, #40]	; (80014b0 <SystemInit+0x74>)
 8001486:	400a      	ands	r2, r1
 8001488:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SystemInit+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <SystemInit+0x78>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	0512      	lsls	r2, r2, #20
 8001496:	609a      	str	r2, [r3, #8]
#endif
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40021000 	.word	0x40021000
 80014a4:	88ff400c 	.word	0x88ff400c
 80014a8:	fef6fff6 	.word	0xfef6fff6
 80014ac:	fffbffff 	.word	0xfffbffff
 80014b0:	ff02ffff 	.word	0xff02ffff
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80014ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80014bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopForever+0xe>)
  adds  r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
  ldr  r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopForever+0x12>)
  b  LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80014d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80014d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014da:	3204      	adds	r2, #4

080014dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <LoopForever+0x16>)
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014e2:	f7ff ffab 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f002 f923 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff fd91 	bl	8001010 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
   ldr   r0, =_estack
 80014f0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80014f4:	080037f0 	.word	0x080037f0
  ldr  r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014fc:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001500:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001504:	20000360 	.word	0x20000360

08001508 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_COMP_IRQHandler>
	...

0800150c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x3c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Init+0x3c>)
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001524:	2000      	movs	r0, #0
 8001526:	f000 f811 	bl	800154c <HAL_InitTick>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d003      	beq.n	8001536 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e001      	b.n	800153a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001536:	f7ff fef7 	bl	8001328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_InitTick+0x50>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	23fa      	movs	r3, #250	; 0xfa
 8001562:	0099      	lsls	r1, r3, #2
 8001564:	0010      	movs	r0, r2
 8001566:	f7fe fdcf 	bl	8000108 <__udivsi3>
 800156a:	0003      	movs	r3, r0
 800156c:	0018      	movs	r0, r3
 800156e:	f000 f8f2 	bl	8001756 <HAL_SYSTICK_Config>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d004      	beq.n	8001580 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001576:	230f      	movs	r3, #15
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e006      	b.n	800158e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	2301      	movs	r3, #1
 8001584:	425b      	negs	r3, r3
 8001586:	2200      	movs	r2, #0
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f8cf 	bl	800172c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  uwTick++;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_IncTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_IncTick+0x14>)
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000035c 	.word	0x2000035c

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <HAL_GetTick+0x10>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	2000035c 	.word	0x2000035c

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff fff0 	bl	80015b8 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	d002      	beq.n	80015ec <HAL_Delay+0x20>
  {
    wait++;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	f7ff ffe3 	bl	80015b8 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d8f7      	bhi.n	80015ee <HAL_Delay+0x22>
  {
  }
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	0002      	movs	r2, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b7f      	cmp	r3, #127	; 0x7f
 800161c:	d932      	bls.n	8001684 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161e:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <NVIC_SetPriority+0xd4>)
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	0019      	movs	r1, r3
 8001626:	230f      	movs	r3, #15
 8001628:	400b      	ands	r3, r1
 800162a:	3b08      	subs	r3, #8
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3306      	adds	r3, #6
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	18d3      	adds	r3, r2, r3
 8001634:	3304      	adds	r3, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	1dfa      	adds	r2, r7, #7
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	0011      	movs	r1, r2
 800163e:	2203      	movs	r2, #3
 8001640:	400a      	ands	r2, r1
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	21ff      	movs	r1, #255	; 0xff
 8001646:	4091      	lsls	r1, r2
 8001648:	000a      	movs	r2, r1
 800164a:	43d2      	mvns	r2, r2
 800164c:	401a      	ands	r2, r3
 800164e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	019b      	lsls	r3, r3, #6
 8001654:	22ff      	movs	r2, #255	; 0xff
 8001656:	401a      	ands	r2, r3
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	0018      	movs	r0, r3
 800165e:	2303      	movs	r3, #3
 8001660:	4003      	ands	r3, r0
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001666:	481d      	ldr	r0, [pc, #116]	; (80016dc <NVIC_SetPriority+0xd4>)
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	001c      	movs	r4, r3
 800166e:	230f      	movs	r3, #15
 8001670:	4023      	ands	r3, r4
 8001672:	3b08      	subs	r3, #8
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	430a      	orrs	r2, r1
 8001678:	3306      	adds	r3, #6
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	18c3      	adds	r3, r0, r3
 800167e:	3304      	adds	r3, #4
 8001680:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001682:	e027      	b.n	80016d4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <NVIC_SetPriority+0xd8>)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	33c0      	adds	r3, #192	; 0xc0
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	589b      	ldr	r3, [r3, r2]
 8001694:	1dfa      	adds	r2, r7, #7
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	0011      	movs	r1, r2
 800169a:	2203      	movs	r2, #3
 800169c:	400a      	ands	r2, r1
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	21ff      	movs	r1, #255	; 0xff
 80016a2:	4091      	lsls	r1, r2
 80016a4:	000a      	movs	r2, r1
 80016a6:	43d2      	mvns	r2, r2
 80016a8:	401a      	ands	r2, r3
 80016aa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	019b      	lsls	r3, r3, #6
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	401a      	ands	r2, r3
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	0018      	movs	r0, r3
 80016ba:	2303      	movs	r3, #3
 80016bc:	4003      	ands	r3, r0
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <NVIC_SetPriority+0xd8>)
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	430a      	orrs	r2, r1
 80016ce:	33c0      	adds	r3, #192	; 0xc0
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	501a      	str	r2, [r3, r0]
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b003      	add	sp, #12
 80016da:	bd90      	pop	{r4, r7, pc}
 80016dc:	e000ed00 	.word	0xe000ed00
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <SysTick_Config+0x40>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e010      	b.n	800171c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <SysTick_Config+0x44>)
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	3a01      	subs	r2, #1
 8001700:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	2301      	movs	r3, #1
 8001704:	425b      	negs	r3, r3
 8001706:	2103      	movs	r1, #3
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff ff7d 	bl	8001608 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SysTick_Config+0x44>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x44>)
 8001716:	2207      	movs	r2, #7
 8001718:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171a:	2300      	movs	r3, #0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}
 8001724:	00ffffff 	.word	0x00ffffff
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	210f      	movs	r1, #15
 8001738:	187b      	adds	r3, r7, r1
 800173a:	1c02      	adds	r2, r0, #0
 800173c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	187b      	adds	r3, r7, r1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b25b      	sxtb	r3, r3
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <NVIC_SetPriority>
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffbf 	bl	80016e4 <SysTick_Config>
 8001766:	0003      	movs	r3, r0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001786:	e155      	b.n	8001a34 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_GPIO_Init+0x30>
 800179e:	e146      	b.n	8001a2e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x40>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d123      	bne.n	80017f8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	58d3      	ldr	r3, [r2, r3]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2207      	movs	r2, #7
 80017c2:	4013      	ands	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	409a      	lsls	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	43da      	mvns	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2107      	movs	r1, #7
 80017dc:	400b      	ands	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d00b      	beq.n	8001818 <HAL_GPIO_Init+0xa8>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180c:	2b11      	cmp	r3, #17
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d130      	bne.n	800187a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	409a      	lsls	r2, r3
 8001826:	0013      	movs	r3, r2
 8001828:	43da      	mvns	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	0013      	movs	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184e:	2201      	movs	r2, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	2201      	movs	r2, #1
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	43da      	mvns	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	401a      	ands	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	055b      	lsls	r3, r3, #21
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x17c>
 80018ea:	e0a0      	b.n	8001a2e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80018f8:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	589b      	ldr	r3, [r3, r2]
 8001904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	23a0      	movs	r3, #160	; 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	429a      	cmp	r2, r3
 8001924:	d01f      	beq.n	8001966 <HAL_GPIO_Init+0x1f6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x1f2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1ee>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1ea>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1e6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1e2>
 800194e:	2305      	movs	r3, #5
 8001950:	e00a      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001952:	2306      	movs	r3, #6
 8001954:	e008      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001956:	2304      	movs	r3, #4
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 800195a:	2303      	movs	r3, #3
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 800195e:	2302      	movs	r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001966:	2300      	movs	r3, #0
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	2103      	movs	r1, #3
 800196c:	400a      	ands	r2, r1
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001978:	4935      	ldr	r1, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019aa:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	035b      	lsls	r3, r3, #13
 80019f2:	4013      	ands	r3, r2
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	039b      	lsls	r3, r3, #14
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	1e13      	subs	r3, r2, #0
 8001a3e:	d000      	beq.n	8001a42 <HAL_GPIO_Init+0x2d2>
 8001a40:	e6a2      	b.n	8001788 <HAL_GPIO_Init+0x18>
  }
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b006      	add	sp, #24
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	50000400 	.word	0x50000400
 8001a58:	50000800 	.word	0x50000800
 8001a5c:	50000c00 	.word	0x50000c00
 8001a60:	50001000 	.word	0x50001000
 8001a64:	50001c00 	.word	0x50001c00
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	0008      	movs	r0, r1
 8001a76:	0011      	movs	r1, r2
 8001a78:	1cbb      	adds	r3, r7, #2
 8001a7a:	1c02      	adds	r2, r0, #0
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	1c7b      	adds	r3, r7, #1
 8001a80:	1c0a      	adds	r2, r1, #0
 8001a82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001a84:	1c7b      	adds	r3, r7, #1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8c:	1cbb      	adds	r3, r7, #2
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a96:	1cbb      	adds	r3, r7, #2
 8001a98:	881a      	ldrh	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
 8001aac:	af06      	add	r7, sp, #24
 8001aae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0e4      	b.n	8001c84 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a73      	ldr	r2, [pc, #460]	; (8001c8c <HAL_PCD_Init+0x1e4>)
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	238a      	movs	r3, #138	; 0x8a
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	2100      	movs	r1, #0
 8001ace:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7ff fc80 	bl	80013d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a6c      	ldr	r2, [pc, #432]	; (8001c8c <HAL_PCD_Init+0x1e4>)
 8001adc:	2103      	movs	r1, #3
 8001ade:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f001 fdd3 	bl	8003690 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e043      	b.n	8001b7c <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001af4:	200f      	movs	r0, #15
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	2129      	movs	r1, #41	; 0x29
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	18d3      	adds	r3, r2, r3
 8001b02:	185b      	adds	r3, r3, r1
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	2128      	movs	r1, #40	; 0x28
 8001b10:	015b      	lsls	r3, r3, #5
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	185b      	adds	r3, r3, r1
 8001b16:	183a      	adds	r2, r7, r0
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	183a      	adds	r2, r7, r0
 8001b22:	7812      	ldrb	r2, [r2, #0]
 8001b24:	b291      	uxth	r1, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	015b      	lsls	r3, r3, #5
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	3336      	adds	r3, #54	; 0x36
 8001b2e:	1c0a      	adds	r2, r1, #0
 8001b30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212b      	movs	r1, #43	; 0x2b
 8001b3a:	015b      	lsls	r3, r3, #5
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	185b      	adds	r3, r3, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b44:	183b      	adds	r3, r7, r0
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	18d3      	adds	r3, r2, r3
 8001b4e:	3338      	adds	r3, #56	; 0x38
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b54:	183b      	adds	r3, r7, r0
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	015b      	lsls	r3, r3, #5
 8001b5c:	18d3      	adds	r3, r2, r3
 8001b5e:	333c      	adds	r3, #60	; 0x3c
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3202      	adds	r2, #2
 8001b6c:	0152      	lsls	r2, r2, #5
 8001b6e:	2100      	movs	r1, #0
 8001b70:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	183b      	adds	r3, r7, r0
 8001b78:	3201      	adds	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d3b4      	bcc.n	8001af4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e03f      	b.n	8001c14 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b94:	200f      	movs	r0, #15
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	232a      	movs	r3, #42	; 0x2a
 8001b9e:	33ff      	adds	r3, #255	; 0xff
 8001ba0:	0152      	lsls	r2, r2, #5
 8001ba2:	188a      	adds	r2, r1, r2
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001baa:	183b      	adds	r3, r7, r0
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	2394      	movs	r3, #148	; 0x94
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	0152      	lsls	r2, r2, #5
 8001bb6:	188a      	adds	r2, r1, r2
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	183a      	adds	r2, r7, r0
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bc0:	183b      	adds	r3, r7, r0
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	232c      	movs	r3, #44	; 0x2c
 8001bc8:	33ff      	adds	r3, #255	; 0xff
 8001bca:	0152      	lsls	r2, r2, #5
 8001bcc:	188a      	adds	r2, r1, r2
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	239c      	movs	r3, #156	; 0x9c
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	0152      	lsls	r2, r2, #5
 8001be0:	188a      	adds	r2, r1, r2
 8001be2:	18d3      	adds	r3, r2, r3
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be8:	183b      	adds	r3, r7, r0
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	239e      	movs	r3, #158	; 0x9e
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	0152      	lsls	r2, r2, #5
 8001bf4:	188a      	adds	r2, r1, r2
 8001bf6:	18d3      	adds	r3, r2, r3
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bfc:	183b      	adds	r3, r7, r0
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	320a      	adds	r2, #10
 8001c04:	0152      	lsls	r2, r2, #5
 8001c06:	2100      	movs	r1, #0
 8001c08:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	183b      	adds	r3, r7, r0
 8001c10:	3201      	adds	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	230f      	movs	r3, #15
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3b8      	bcc.n	8001b94 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	466a      	mov	r2, sp
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	3210      	adds	r2, #16
 8001c30:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001c32:	c170      	stmia	r1!, {r4, r5, r6}
 8001c34:	ca30      	ldmia	r2!, {r4, r5}
 8001c36:	c130      	stmia	r1!, {r4, r5}
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f001 fd47 	bl	80036d0 <USB_DevInit>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_PCD_Init+0x1e4>)
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e018      	b.n	8001c84 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2224      	movs	r2, #36	; 0x24
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_PCD_Init+0x1e4>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d103      	bne.n	8001c72 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f834 	bl	8001cda <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d103      	bne.n	8001c82 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f807 	bl	8001c90 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b005      	add	sp, #20
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	00000229 	.word	0x00000229

08001c90 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	239b      	movs	r3, #155	; 0x9b
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2258      	movs	r2, #88	; 0x58
 8001cac:	5a9b      	ldrh	r3, [r3, r2]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2258      	movs	r2, #88	; 0x58
 8001cba:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2258      	movs	r2, #88	; 0x58
 8001cc0:	5a9b      	ldrh	r3, [r3, r2]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2258      	movs	r2, #88	; 0x58
 8001cce:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	239a      	movs	r3, #154	; 0x9a
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	2101      	movs	r1, #1
 8001cf0:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	2398      	movs	r3, #152	; 0x98
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2254      	movs	r2, #84	; 0x54
 8001d00:	5a9b      	ldrh	r3, [r3, r2]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b299      	uxth	r1, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2254      	movs	r2, #84	; 0x54
 8001d0e:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2254      	movs	r2, #84	; 0x54
 8001d14:	5a9b      	ldrh	r3, [r3, r2]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b299      	uxth	r1, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2254      	movs	r2, #84	; 0x54
 8001d22:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f000 fbbc 	bl	80024bc <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d44:	4bc8      	ldr	r3, [pc, #800]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	220c      	movs	r2, #12
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4e:	4bc6      	ldr	r3, [pc, #792]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	025b      	lsls	r3, r3, #9
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_OscConfig+0x36>
 8001d64:	e07e      	b.n	8001e64 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d007      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d112      	bne.n	8001d98 <HAL_RCC_OscConfig+0x68>
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d10d      	bne.n	8001d98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4bba      	ldr	r3, [pc, #744]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5a>
 8001d88:	e06b      	b.n	8001e62 <HAL_RCC_OscConfig+0x132>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d167      	bne.n	8001e62 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f000 fb92 	bl	80024bc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	025b      	lsls	r3, r3, #9
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_OscConfig+0x84>
 8001da4:	4bb0      	ldr	r3, [pc, #704]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4baf      	ldr	r3, [pc, #700]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0249      	lsls	r1, r1, #9
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e027      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	23a0      	movs	r3, #160	; 0xa0
 8001dba:	02db      	lsls	r3, r3, #11
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10e      	bne.n	8001dde <HAL_RCC_OscConfig+0xae>
 8001dc0:	4ba9      	ldr	r3, [pc, #676]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4ba8      	ldr	r3, [pc, #672]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	02c9      	lsls	r1, r1, #11
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	4ba6      	ldr	r3, [pc, #664]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4ba5      	ldr	r3, [pc, #660]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0249      	lsls	r1, r1, #9
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e012      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001dde:	4ba2      	ldr	r3, [pc, #648]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4ba1      	ldr	r3, [pc, #644]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001de4:	49a1      	ldr	r1, [pc, #644]	; (800206c <HAL_RCC_OscConfig+0x33c>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	4b9f      	ldr	r3, [pc, #636]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	025b      	lsls	r3, r3, #9
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4b9b      	ldr	r3, [pc, #620]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b9a      	ldr	r3, [pc, #616]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001dfe:	499c      	ldr	r1, [pc, #624]	; (8002070 <HAL_RCC_OscConfig+0x340>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fbd4 	bl	80015b8 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e14:	e009      	b.n	8001e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e16:	f7ff fbcf 	bl	80015b8 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d902      	bls.n	8001e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f000 fb49 	bl	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e2a:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	d0ef      	beq.n	8001e16 <HAL_RCC_OscConfig+0xe6>
 8001e36:	e015      	b.n	8001e64 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fbbe 	bl	80015b8 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e42:	f7ff fbb9 	bl	80015b8 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e333      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x112>
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d100      	bne.n	8001e70 <HAL_RCC_OscConfig+0x140>
 8001e6e:	e098      	b.n	8001fa2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	2220      	movs	r2, #32
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e7e:	4b7a      	ldr	r3, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b79      	ldr	r3, [pc, #484]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001e84:	2120      	movs	r1, #32
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	4393      	bics	r3, r2
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d13d      	bne.n	8001f1a <HAL_RCC_OscConfig+0x1ea>
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d13a      	bne.n	8001f1a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ea4:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x188>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e301      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x344>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	021a      	lsls	r2, r3, #8
 8001ec8:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ece:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2209      	movs	r2, #9
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee0:	f000 fc20 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8001ee4:	0001      	movs	r1, r0
 8001ee6:	4b60      	ldr	r3, [pc, #384]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	220f      	movs	r2, #15
 8001eee:	4013      	ands	r3, r2
 8001ef0:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x348>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	000a      	movs	r2, r1
 8001ef6:	40da      	lsrs	r2, r3
 8001ef8:	4b60      	ldr	r3, [pc, #384]	; (800207c <HAL_RCC_OscConfig+0x34c>)
 8001efa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001efc:	2513      	movs	r5, #19
 8001efe:	197c      	adds	r4, r7, r5
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fb23 	bl	800154c <HAL_InitTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f0a:	197b      	adds	r3, r7, r5
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d047      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001f12:	2313      	movs	r3, #19
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	e2d0      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d027      	beq.n	8001f70 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f20:	4b51      	ldr	r3, [pc, #324]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2209      	movs	r2, #9
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fb41 	bl	80015b8 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fb3c 	bl	80015b8 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e2b6      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2204      	movs	r2, #4
 8001f54:	4013      	ands	r3, r2
 8001f56:	d0f1      	beq.n	8001f3c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_RCC_OscConfig+0x344>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	021a      	lsls	r2, r3, #8
 8001f68:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f70:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	438a      	bics	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fb1c 	bl	80015b8 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff fb17 	bl	80015b8 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e291      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d1f1      	bne.n	8001f86 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d100      	bne.n	8001fae <HAL_RCC_OscConfig+0x27e>
 8001fac:	e09f      	b.n	80020ee <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d13f      	bne.n	8002034 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x29c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e277      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <HAL_RCC_OscConfig+0x350>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	0a19      	lsrs	r1, r3, #8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	061a      	lsls	r2, r3, #24
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	0b5b      	lsrs	r3, r3, #13
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	0212      	lsls	r2, r2, #8
 8002000:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	210f      	movs	r1, #15
 800200a:	400b      	ands	r3, r1
 800200c:	491a      	ldr	r1, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x348>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_OscConfig+0x34c>)
 8002014:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002016:	2513      	movs	r5, #19
 8002018:	197c      	adds	r4, r7, r5
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff fa96 	bl	800154c <HAL_InitTick>
 8002020:	0003      	movs	r3, r0
 8002022:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002024:	197b      	adds	r3, r7, r5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d060      	beq.n	80020ee <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800202c:	2313      	movs	r3, #19
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	e243      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03e      	beq.n	80020ba <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x338>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0049      	lsls	r1, r1, #1
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fab5 	bl	80015b8 <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002052:	e017      	b.n	8002084 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002054:	f7ff fab0 	bl	80015b8 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d910      	bls.n	8002084 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e22a      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	40021000 	.word	0x40021000
 800206c:	fffeffff 	.word	0xfffeffff
 8002070:	fffbffff 	.word	0xfffbffff
 8002074:	ffffe0ff 	.word	0xffffe0ff
 8002078:	080037c4 	.word	0x080037c4
 800207c:	20000004 	.word	0x20000004
 8002080:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002084:	4bc6      	ldr	r3, [pc, #792]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d0e1      	beq.n	8002054 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4bc3      	ldr	r3, [pc, #780]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4ac3      	ldr	r2, [pc, #780]	; (80023a4 <HAL_RCC_OscConfig+0x674>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209e:	4bc0      	ldr	r3, [pc, #768]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a4:	4bbe      	ldr	r3, [pc, #760]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	0a19      	lsrs	r1, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	061a      	lsls	r2, r3, #24
 80020b2:	4bbb      	ldr	r3, [pc, #748]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	e019      	b.n	80020ee <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ba:	4bb9      	ldr	r3, [pc, #740]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4bb8      	ldr	r3, [pc, #736]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80020c0:	49b9      	ldr	r1, [pc, #740]	; (80023a8 <HAL_RCC_OscConfig+0x678>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fa77 	bl	80015b8 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d0:	f7ff fa72 	bl	80015b8 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1ec      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020e2:	4baf      	ldr	r3, [pc, #700]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d019      	beq.n	8002134 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002100:	4ba7      	ldr	r3, [pc, #668]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002104:	4ba6      	ldr	r3, [pc, #664]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002106:	2101      	movs	r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7ff fa54 	bl	80015b8 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002116:	f7ff fa4f 	bl	80015b8 <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1c9      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002128:	4b9d      	ldr	r3, [pc, #628]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d0f1      	beq.n	8002116 <HAL_RCC_OscConfig+0x3e6>
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002134:	4b9a      	ldr	r3, [pc, #616]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002138:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7ff fa3a 	bl	80015b8 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fa35 	bl	80015b8 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1af      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800215c:	4b90      	ldr	r3, [pc, #576]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d1f1      	bne.n	800214a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2204      	movs	r2, #4
 800216c:	4013      	ands	r3, r2
 800216e:	d100      	bne.n	8002172 <HAL_RCC_OscConfig+0x442>
 8002170:	e0af      	b.n	80022d2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2323      	movs	r3, #35	; 0x23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800217c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	055b      	lsls	r3, r3, #21
 8002182:	4013      	ands	r3, r2
 8002184:	d10a      	bne.n	800219c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b86      	ldr	r3, [pc, #536]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218a:	4b85      	ldr	r3, [pc, #532]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0549      	lsls	r1, r1, #21
 8002190:	430a      	orrs	r2, r1
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002194:	2323      	movs	r3, #35	; 0x23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <HAL_RCC_OscConfig+0x67c>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	d11a      	bne.n	80021de <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a8:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x67c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x67c>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0049      	lsls	r1, r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f9ff 	bl	80015b8 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7ff f9fa 	bl	80015b8 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e174      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x67c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_OscConfig+0x4ca>
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	4b6c      	ldr	r3, [pc, #432]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0049      	lsls	r1, r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	651a      	str	r2, [r3, #80]	; 0x50
 80021f8:	e031      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x4ec>
 8002202:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002206:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002208:	4967      	ldr	r1, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x678>)
 800220a:	400a      	ands	r2, r1
 800220c:	651a      	str	r2, [r3, #80]	; 0x50
 800220e:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002214:	4966      	ldr	r1, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x680>)
 8002216:	400a      	ands	r2, r1
 8002218:	651a      	str	r2, [r3, #80]	; 0x50
 800221a:	e020      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	23a0      	movs	r3, #160	; 0xa0
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	429a      	cmp	r2, r3
 8002226:	d10e      	bne.n	8002246 <HAL_RCC_OscConfig+0x516>
 8002228:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800222a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800222c:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	00c9      	lsls	r1, r1, #3
 8002232:	430a      	orrs	r2, r1
 8002234:	651a      	str	r2, [r3, #80]	; 0x50
 8002236:	4b5a      	ldr	r3, [pc, #360]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0049      	lsls	r1, r1, #1
 8002240:	430a      	orrs	r2, r1
 8002242:	651a      	str	r2, [r3, #80]	; 0x50
 8002244:	e00b      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224a:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800224c:	4956      	ldr	r1, [pc, #344]	; (80023a8 <HAL_RCC_OscConfig+0x678>)
 800224e:	400a      	ands	r2, r1
 8002250:	651a      	str	r2, [r3, #80]	; 0x50
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002256:	4b52      	ldr	r3, [pc, #328]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002258:	4955      	ldr	r1, [pc, #340]	; (80023b0 <HAL_RCC_OscConfig+0x680>)
 800225a:	400a      	ands	r2, r1
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d015      	beq.n	8002292 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7ff f9a7 	bl	80015b8 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800226e:	e009      	b.n	8002284 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff f9a2 	bl	80015b8 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <HAL_RCC_OscConfig+0x684>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e11b      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d0ef      	beq.n	8002270 <HAL_RCC_OscConfig+0x540>
 8002290:	e014      	b.n	80022bc <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff f991 	bl	80015b8 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800229a:	e009      	b.n	80022b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7ff f98c 	bl	80015b8 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	4a43      	ldr	r2, [pc, #268]	; (80023b4 <HAL_RCC_OscConfig+0x684>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e105      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d1ef      	bne.n	800229c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022bc:	2323      	movs	r3, #35	; 0x23
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ca:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022cc:	493a      	ldr	r1, [pc, #232]	; (80023b8 <HAL_RCC_OscConfig+0x688>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d049      	beq.n	8002370 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d026      	beq.n	8002332 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	430a      	orrs	r2, r1
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_RCC_OscConfig+0x68c>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <HAL_RCC_OscConfig+0x68c>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0189      	lsls	r1, r1, #6
 8002306:	430a      	orrs	r2, r1
 8002308:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff f955 	bl	80015b8 <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002314:	f7ff f950 	bl	80015b8 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0ca      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_OscConfig+0x5e4>
 8002330:	e01e      	b.n	8002370 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002338:	2101      	movs	r1, #1
 800233a:	438a      	bics	r2, r1
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x68c>)
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_RCC_OscConfig+0x68c>)
 8002344:	491e      	ldr	r1, [pc, #120]	; (80023c0 <HAL_RCC_OscConfig+0x690>)
 8002346:	400a      	ands	r2, r1
 8002348:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff f935 	bl	80015b8 <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002354:	f7ff f930 	bl	80015b8 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0aa      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d1f1      	bne.n	8002354 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d100      	bne.n	800237a <HAL_RCC_OscConfig+0x64a>
 8002378:	e09f      	b.n	80024ba <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	2b0c      	cmp	r3, #12
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x652>
 8002380:	e078      	b.n	8002474 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	2b02      	cmp	r3, #2
 8002388:	d159      	bne.n	800243e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_RCC_OscConfig+0x670>)
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <HAL_RCC_OscConfig+0x694>)
 8002392:	400a      	ands	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7ff f90f 	bl	80015b8 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800239e:	e01c      	b.n	80023da <HAL_RCC_OscConfig+0x6aa>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	ffff1fff 	.word	0xffff1fff
 80023a8:	fffffeff 	.word	0xfffffeff
 80023ac:	40007000 	.word	0x40007000
 80023b0:	fffffbff 	.word	0xfffffbff
 80023b4:	00001388 	.word	0x00001388
 80023b8:	efffffff 	.word	0xefffffff
 80023bc:	40010000 	.word	0x40010000
 80023c0:	ffffdfff 	.word	0xffffdfff
 80023c4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff f8f6 	bl	80015b8 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e070      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	049b      	lsls	r3, r3, #18
 80023e2:	4013      	ands	r3, r2
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a37      	ldr	r2, [pc, #220]	; (80024c8 <HAL_RCC_OscConfig+0x798>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	431a      	orrs	r2, r3
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002402:	430a      	orrs	r2, r1
 8002404:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0449      	lsls	r1, r1, #17
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff f8d0 	bl	80015b8 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff f8cb 	bl	80015b8 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e045      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	049b      	lsls	r3, r3, #18
 8002438:	4013      	ands	r3, r2
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x6ee>
 800243c:	e03d      	b.n	80024ba <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002444:	4921      	ldr	r1, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x79c>)
 8002446:	400a      	ands	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff f8b5 	bl	80015b8 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7ff f8b0 	bl	80015b8 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e02a      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x724>
 8002472:	e022      	b.n	80024ba <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_OscConfig+0x794>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	025b      	lsls	r3, r3, #9
 800248c:	401a      	ands	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	429a      	cmp	r2, r3
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	23f0      	movs	r3, #240	; 0xf0
 800249a:	039b      	lsls	r3, r3, #14
 800249c:	401a      	ands	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	23c0      	movs	r3, #192	; 0xc0
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b00a      	add	sp, #40	; 0x28
 80024c2:	bdb0      	pop	{r4, r5, r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	ff02ffff 	.word	0xff02ffff
 80024cc:	feffffff 	.word	0xfeffffff

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e10d      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d911      	bls.n	8002516 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002504:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0f4      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b7a      	ldr	r3, [pc, #488]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	22f0      	movs	r2, #240	; 0xf0
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b77      	ldr	r3, [pc, #476]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	d100      	bne.n	8002540 <HAL_RCC_ClockConfig+0x70>
 800253e:	e089      	b.n	8002654 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d107      	bne.n	8002558 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002548:	4b70      	ldr	r3, [pc, #448]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	029b      	lsls	r3, r3, #10
 8002550:	4013      	ands	r3, r2
 8002552:	d120      	bne.n	8002596 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d3      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d107      	bne.n	8002570 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002560:	4b6a      	ldr	r3, [pc, #424]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	049b      	lsls	r3, r3, #18
 8002568:	4013      	ands	r3, r2
 800256a:	d114      	bne.n	8002596 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0c7      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002578:	4b64      	ldr	r3, [pc, #400]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0bc      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0b4      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b5d      	ldr	r3, [pc, #372]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2203      	movs	r2, #3
 800259c:	4393      	bics	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025aa:	f7ff f805 	bl	80015b8 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d111      	bne.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ba:	e009      	b.n	80025d0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fffc 	bl	80015b8 <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_RCC_ClockConfig+0x240>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e097      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d0:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	220c      	movs	r2, #12
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d1ef      	bne.n	80025bc <HAL_RCC_ClockConfig+0xec>
 80025dc:	e03a      	b.n	8002654 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d111      	bne.n	800260a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e6:	e009      	b.n	80025fc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe ffe6 	bl	80015b8 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_RCC_ClockConfig+0x240>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e081      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	220c      	movs	r2, #12
 8002602:	4013      	ands	r3, r2
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d1ef      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x118>
 8002608:	e024      	b.n	8002654 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d11b      	bne.n	800264a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002612:	e009      	b.n	8002628 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe ffd0 	bl	80015b8 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <HAL_RCC_ClockConfig+0x240>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e06b      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002628:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	220c      	movs	r2, #12
 800262e:	4013      	ands	r3, r2
 8002630:	2b04      	cmp	r3, #4
 8002632:	d1ef      	bne.n	8002614 <HAL_RCC_ClockConfig+0x144>
 8002634:	e00e      	b.n	8002654 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002636:	f7fe ffbf 	bl	80015b8 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4a33      	ldr	r2, [pc, #204]	; (8002710 <HAL_RCC_ClockConfig+0x240>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e05a      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	220c      	movs	r2, #12
 8002650:	4013      	ands	r3, r2
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d211      	bcs.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4393      	bics	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002674:	4b24      	ldr	r3, [pc, #144]	; (8002708 <HAL_RCC_ClockConfig+0x238>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e03c      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_RCC_ClockConfig+0x244>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	4013      	ands	r3, r2
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x248>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	00da      	lsls	r2, r3, #3
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c4:	f000 f82e 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026c8:	0001      	movs	r1, r0
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_ClockConfig+0x23c>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	220f      	movs	r2, #15
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_RCC_ClockConfig+0x24c>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	000a      	movs	r2, r1
 80026da:	40da      	lsrs	r2, r3
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_ClockConfig+0x250>)
 80026de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80026e0:	250b      	movs	r5, #11
 80026e2:	197c      	adds	r4, r7, r5
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe ff31 	bl	800154c <HAL_InitTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80026ee:	197b      	adds	r3, r7, r5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80026f6:	230b      	movs	r3, #11
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	e000      	b.n	8002700 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bdb0      	pop	{r4, r5, r7, pc}
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
 8002710:	00001388 	.word	0x00001388
 8002714:	fffff8ff 	.word	0xfffff8ff
 8002718:	ffffc7ff 	.word	0xffffc7ff
 800271c:	080037c4 	.word	0x080037c4
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_RCC_GetSysClockFreq+0xe8>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	220c      	movs	r2, #12
 8002734:	4013      	ands	r3, r2
 8002736:	2b08      	cmp	r3, #8
 8002738:	d00e      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d00f      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	2b04      	cmp	r3, #4
 8002740:	d151      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2210      	movs	r2, #16
 8002748:	4013      	ands	r3, r2
 800274a:	d002      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_GetSysClockFreq+0xec>)
 800274e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002750:	e057      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 8002752:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002754:	613b      	str	r3, [r7, #16]
      break;
 8002756:	e054      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <HAL_RCC_GetSysClockFreq+0xf4>)
 800275a:	613b      	str	r3, [r7, #16]
      break;
 800275c:	e051      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	220f      	movs	r2, #15
 8002764:	4013      	ands	r3, r2
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0d9b      	lsrs	r3, r3, #22
 8002770:	2203      	movs	r2, #3
 8002772:	4013      	ands	r3, r2
 8002774:	3301      	adds	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_GetSysClockFreq+0xe8>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	4013      	ands	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002788:	4353      	muls	r3, r2
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f7fd fcbb 	bl	8000108 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e023      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_GetSysClockFreq+0xe8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	4013      	ands	r3, r2
 80027a0:	d00f      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x9e>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	000a      	movs	r2, r1
 80027a6:	0152      	lsls	r2, r2, #5
 80027a8:	1a52      	subs	r2, r2, r1
 80027aa:	0193      	lsls	r3, r2, #6
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	185b      	adds	r3, r3, r1
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7fd fca6 	bl	8000108 <__udivsi3>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e00e      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	000a      	movs	r2, r1
 80027c6:	0152      	lsls	r2, r2, #5
 80027c8:	1a52      	subs	r2, r2, r1
 80027ca:	0193      	lsls	r3, r2, #6
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	185b      	adds	r3, r3, r1
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fd fc96 	bl	8000108 <__udivsi3>
 80027dc:	0003      	movs	r3, r0
 80027de:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
      break;
 80027e4:	e00d      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_GetSysClockFreq+0xe8>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	2207      	movs	r2, #7
 80027ee:	4013      	ands	r3, r2
 80027f0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	0212      	lsls	r2, r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002802:	693b      	ldr	r3, [r7, #16]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	003d0900 	.word	0x003d0900
 8002814:	00f42400 	.word	0x00f42400
 8002818:	017d7840 	.word	0x017d7840
 800281c:	080037d4 	.word	0x080037d4

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2220      	movs	r2, #32
 800282e:	4013      	ands	r3, r2
 8002830:	d106      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4013      	ands	r3, r2
 800283c:	d100      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800283e:	e0dd      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002840:	2317      	movs	r3, #23
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002848:	4ba4      	ldr	r3, [pc, #656]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800284a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	055b      	lsls	r3, r3, #21
 8002850:	4013      	ands	r3, r2
 8002852:	d10a      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4ba1      	ldr	r3, [pc, #644]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002858:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0549      	lsls	r1, r1, #21
 800285e:	430a      	orrs	r2, r1
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002862:	2317      	movs	r3, #23
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b9d      	ldr	r3, [pc, #628]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d11a      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b9a      	ldr	r3, [pc, #616]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b99      	ldr	r3, [pc, #612]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0049      	lsls	r1, r1, #1
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002884:	f7fe fe98 	bl	80015b8 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fe93 	bl	80015b8 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e118      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b8f      	ldr	r3, [pc, #572]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0f0      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80028ac:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	039b      	lsls	r3, r3, #14
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	039b      	lsls	r3, r3, #14
 80028c0:	4013      	ands	r3, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	4013      	ands	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d013      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	401a      	ands	r2, r3
 80028e2:	23c0      	movs	r3, #192	; 0xc0
 80028e4:	029b      	lsls	r3, r3, #10
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10a      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80028ea:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	029b      	lsls	r3, r3, #10
 80028f2:	401a      	ands	r2, r3
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d101      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0e8      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002900:	4b76      	ldr	r3, [pc, #472]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002904:	23c0      	movs	r3, #192	; 0xc0
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d049      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	23c0      	movs	r3, #192	; 0xc0
 8002918:	029b      	lsls	r3, r3, #10
 800291a:	4013      	ands	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	429a      	cmp	r2, r3
 8002920:	d004      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d10d      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	23c0      	movs	r3, #192	; 0xc0
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	4013      	ands	r3, r2
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d034      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d02e      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002948:	4b64      	ldr	r3, [pc, #400]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002956:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0309      	lsls	r1, r1, #12
 800295c:	430a      	orrs	r2, r1
 800295e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002964:	4b5d      	ldr	r3, [pc, #372]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002966:	4960      	ldr	r1, [pc, #384]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002968:	400a      	ands	r2, r1
 800296a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800296c:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d014      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fe1c 	bl	80015b8 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002984:	e009      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe fe17 	bl	80015b8 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e09b      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800299a:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800299c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4013      	ands	r3, r2
 80029a4:	d0ef      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	23c0      	movs	r3, #192	; 0xc0
 80029ac:	029b      	lsls	r3, r3, #10
 80029ae:	401a      	ands	r2, r3
 80029b0:	23c0      	movs	r3, #192	; 0xc0
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	23c0      	movs	r3, #192	; 0xc0
 80029c8:	039b      	lsls	r3, r3, #14
 80029ca:	401a      	ands	r2, r3
 80029cc:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	4b42      	ldr	r3, [pc, #264]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	23c0      	movs	r3, #192	; 0xc0
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	401a      	ands	r2, r3
 80029e0:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029e6:	2317      	movs	r3, #23
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029f6:	493f      	ldr	r1, [pc, #252]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	220c      	movs	r2, #12
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2240      	movs	r2, #64	; 0x40
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002acc:	430a      	orrs	r2, r1
 8002ace:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b006      	add	sp, #24
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	fffcffff 	.word	0xfffcffff
 8002ae8:	fff7ffff 	.word	0xfff7ffff
 8002aec:	00001388 	.word	0x00001388
 8002af0:	ffcfffff 	.word	0xffcfffff
 8002af4:	efffffff 	.word	0xefffffff
 8002af8:	fffff3ff 	.word	0xfffff3ff
 8002afc:	ffffcfff 	.word	0xffffcfff
 8002b00:	fbffffff 	.word	0xfbffffff
 8002b04:	fff3ffff 	.word	0xfff3ffff

08002b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e059      	b.n	8002bce <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2251      	movs	r2, #81	; 0x51
 8002b24:	5c9b      	ldrb	r3, [r3, r2]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2250      	movs	r2, #80	; 0x50
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7fe fc0a 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2251      	movs	r2, #81	; 0x51
 8002b40:	2102      	movs	r1, #2
 8002b42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	438a      	bics	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6999      	ldr	r1, [r3, #24]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	400b      	ands	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	0011      	movs	r1, r2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <HAL_SPI_Init+0xd0>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2251      	movs	r2, #81	; 0x51
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	fffff7ff 	.word	0xfffff7ff

08002bdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	1dbb      	adds	r3, r7, #6
 8002bea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bec:	231f      	movs	r3, #31
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2250      	movs	r2, #80	; 0x50
 8002bf8:	5c9b      	ldrb	r3, [r3, r2]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_SPI_Transmit+0x26>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e136      	b.n	8002e70 <HAL_SPI_Transmit+0x294>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2250      	movs	r2, #80	; 0x50
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c0a:	f7fe fcd5 	bl	80015b8 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c12:	2316      	movs	r3, #22
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	1dba      	adds	r2, r7, #6
 8002c18:	8812      	ldrh	r2, [r2, #0]
 8002c1a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2251      	movs	r2, #81	; 0x51
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d004      	beq.n	8002c32 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002c28:	231f      	movs	r3, #31
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c30:	e113      	b.n	8002e5a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_SPI_Transmit+0x64>
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002c40:	231f      	movs	r3, #31
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c48:	e107      	b.n	8002e5a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2251      	movs	r2, #81	; 0x51
 8002c4e:	2103      	movs	r1, #3
 8002c50:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1dba      	adds	r2, r7, #6
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1dba      	adds	r2, r7, #6
 8002c6a:	8812      	ldrh	r2, [r2, #0]
 8002c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d108      	bne.n	8002caa <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	01c9      	lsls	r1, r1, #7
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d007      	beq.n	8002cc8 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d14e      	bne.n	8002d72 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_SPI_Transmit+0x10a>
 8002cdc:	2316      	movs	r3, #22
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d13f      	bne.n	8002d66 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	881a      	ldrh	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	1c9a      	adds	r2, r3, #2
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d0a:	e02c      	b.n	8002d66 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d112      	bne.n	8002d40 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	881a      	ldrh	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	1c9a      	adds	r2, r3, #2
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d3e:	e012      	b.n	8002d66 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d40:	f7fe fc3a 	bl	80015b8 <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d802      	bhi.n	8002d56 <HAL_SPI_Transmit+0x17a>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_Transmit+0x180>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8002d5c:	231f      	movs	r3, #31
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2203      	movs	r2, #3
 8002d62:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d64:	e079      	b.n	8002e5a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1cd      	bne.n	8002d0c <HAL_SPI_Transmit+0x130>
 8002d70:	e04f      	b.n	8002e12 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_SPI_Transmit+0x1a8>
 8002d7a:	2316      	movs	r3, #22
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d141      	bne.n	8002e08 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002daa:	e02d      	b.n	8002e08 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2202      	movs	r2, #2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d113      	bne.n	8002de2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de0:	e012      	b.n	8002e08 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de2:	f7fe fbe9 	bl	80015b8 <HAL_GetTick>
 8002de6:	0002      	movs	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d802      	bhi.n	8002df8 <HAL_SPI_Transmit+0x21c>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_SPI_Transmit+0x222>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2203      	movs	r2, #3
 8002e04:	701a      	strb	r2, [r3, #0]
          goto error;
 8002e06:	e028      	b.n	8002e5a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1cc      	bne.n	8002dac <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fbe1 	bl	80035e0 <SPI_EndRxTxTransaction>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8002e4e:	231f      	movs	r3, #31
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e000      	b.n	8002e5a <HAL_SPI_Transmit+0x27e>
  }

error:
 8002e58:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2251      	movs	r2, #81	; 0x51
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2250      	movs	r2, #80	; 0x50
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e6a:	231f      	movs	r3, #31
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b008      	add	sp, #32
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	1dbb      	adds	r3, r7, #6
 8002e86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e88:	2317      	movs	r3, #23
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	2382      	movs	r3, #130	; 0x82
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d113      	bne.n	8002ec4 <HAL_SPI_Receive+0x4c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2251      	movs	r2, #81	; 0x51
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eac:	1dbb      	adds	r3, r7, #6
 8002eae:	881c      	ldrh	r4, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	0023      	movs	r3, r4
 8002ebc:	f000 f8fa 	bl	80030b4 <HAL_SPI_TransmitReceive>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	e0f1      	b.n	80030a8 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2250      	movs	r2, #80	; 0x50
 8002ec8:	5c9b      	ldrb	r3, [r3, r2]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_SPI_Receive+0x5a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0ea      	b.n	80030a8 <HAL_SPI_Receive+0x230>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2250      	movs	r2, #80	; 0x50
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eda:	f7fe fb6d 	bl	80015b8 <HAL_GetTick>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2251      	movs	r2, #81	; 0x51
 8002ee6:	5c9b      	ldrb	r3, [r3, r2]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d004      	beq.n	8002ef8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002eee:	2317      	movs	r3, #23
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ef6:	e0cc      	b.n	8003092 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_SPI_Receive+0x8e>
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002f06:	2317      	movs	r3, #23
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f0e:	e0c0      	b.n	8003092 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2251      	movs	r2, #81	; 0x51
 8002f14:	2104      	movs	r1, #4
 8002f16:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1dba      	adds	r2, r7, #6
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1dba      	adds	r2, r7, #6
 8002f30:	8812      	ldrh	r2, [r2, #0]
 8002f32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d107      	bne.n	8002f6e <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4951      	ldr	r1, [pc, #324]	; (80030b0 <HAL_SPI_Receive+0x238>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2240      	movs	r2, #64	; 0x40
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d007      	beq.n	8002f8c <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2140      	movs	r1, #64	; 0x40
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d164      	bne.n	800305e <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f94:	e02f      	b.n	8002ff6 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d115      	bne.n	8002fd0 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	001a      	movs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	7812      	ldrb	r2, [r2, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e012      	b.n	8002ff6 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fe faf2 	bl	80015b8 <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d802      	bhi.n	8002fe6 <HAL_SPI_Receive+0x16e>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_SPI_Receive+0x174>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ff4:	e04d      	b.n	8003092 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ca      	bne.n	8002f96 <HAL_SPI_Receive+0x11e>
 8003000:	e032      	b.n	8003068 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	2b01      	cmp	r3, #1
 800300e:	d113      	bne.n	8003038 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	b292      	uxth	r2, r2
 800301c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003036:	e012      	b.n	800305e <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003038:	f7fe fabe 	bl	80015b8 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d802      	bhi.n	800304e <HAL_SPI_Receive+0x1d6>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_SPI_Receive+0x1dc>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8003054:	2317      	movs	r3, #23
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2203      	movs	r2, #3
 800305a:	701a      	strb	r2, [r3, #0]
          goto error;
 800305c:	e019      	b.n	8003092 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1cc      	bne.n	8003002 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 fa4c 	bl	800350c <SPI_EndRxTransaction>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d002      	beq.n	800307e <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8003086:	2317      	movs	r3, #23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e000      	b.n	8003092 <HAL_SPI_Receive+0x21a>
  }

error :
 8003090:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2251      	movs	r2, #81	; 0x51
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2250      	movs	r2, #80	; 0x50
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80030a2:	2317      	movs	r3, #23
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	781b      	ldrb	r3, [r3, #0]
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b007      	add	sp, #28
 80030ae:	bd90      	pop	{r4, r7, pc}
 80030b0:	ffffbfff 	.word	0xffffbfff

080030b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	001a      	movs	r2, r3
 80030c2:	1cbb      	adds	r3, r7, #2
 80030c4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030ca:	232b      	movs	r3, #43	; 0x2b
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2250      	movs	r2, #80	; 0x50
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x2c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e1a1      	b.n	8003424 <HAL_SPI_TransmitReceive+0x370>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2250      	movs	r2, #80	; 0x50
 80030e4:	2101      	movs	r1, #1
 80030e6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e8:	f7fe fa66 	bl	80015b8 <HAL_GetTick>
 80030ec:	0003      	movs	r3, r0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030f0:	2023      	movs	r0, #35	; 0x23
 80030f2:	183b      	adds	r3, r7, r0
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	2151      	movs	r1, #81	; 0x51
 80030f8:	5c52      	ldrb	r2, [r2, r1]
 80030fa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003102:	231a      	movs	r3, #26
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	1cba      	adds	r2, r7, #2
 8003108:	8812      	ldrh	r2, [r2, #0]
 800310a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800310c:	183b      	adds	r3, r7, r0
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d012      	beq.n	800313a <HAL_SPI_TransmitReceive+0x86>
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	2382      	movs	r3, #130	; 0x82
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	429a      	cmp	r2, r3
 800311c:	d108      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x7c>
 8003126:	2323      	movs	r3, #35	; 0x23
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d004      	beq.n	800313a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8003130:	232b      	movs	r3, #43	; 0x2b
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
    goto error;
 8003138:	e169      	b.n	800340e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_SPI_TransmitReceive+0x9a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_SPI_TransmitReceive+0x9a>
 8003146:	1cbb      	adds	r3, r7, #2
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800314e:	232b      	movs	r3, #43	; 0x2b
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
    goto error;
 8003156:	e15a      	b.n	800340e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2251      	movs	r2, #81	; 0x51
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b04      	cmp	r3, #4
 8003162:	d003      	beq.n	800316c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2251      	movs	r2, #81	; 0x51
 8003168:	2105      	movs	r1, #5
 800316a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1cba      	adds	r2, r7, #2
 800317c:	8812      	ldrh	r2, [r2, #0]
 800317e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1cba      	adds	r2, r7, #2
 8003184:	8812      	ldrh	r2, [r2, #0]
 8003186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1cba      	adds	r2, r7, #2
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1cba      	adds	r2, r7, #2
 800319a:	8812      	ldrh	r2, [r2, #0]
 800319c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2240      	movs	r2, #64	; 0x40
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d007      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d000      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x122>
 80031d4:	e07a      	b.n	80032cc <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x134>
 80031de:	231a      	movs	r3, #26
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d166      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	1c9a      	adds	r2, r3, #2
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320c:	e053      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d11b      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x1a0>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d016      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x1a0>
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d113      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	2b01      	cmp	r3, #1
 8003260:	d119      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x1e2>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d014      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	b292      	uxth	r2, r2
 8003278:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003292:	2301      	movs	r3, #1
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003296:	f7fe f98f 	bl	80015b8 <HAL_GetTick>
 800329a:	0002      	movs	r2, r0
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d807      	bhi.n	80032b6 <HAL_SPI_TransmitReceive+0x202>
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	3301      	adds	r3, #1
 80032aa:	d004      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80032ac:	232b      	movs	r3, #43	; 0x2b
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2203      	movs	r2, #3
 80032b2:	701a      	strb	r2, [r3, #0]
        goto error;
 80032b4:	e0ab      	b.n	800340e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1a6      	bne.n	800320e <HAL_SPI_TransmitReceive+0x15a>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1a1      	bne.n	800320e <HAL_SPI_TransmitReceive+0x15a>
 80032ca:	e07f      	b.n	80033cc <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x22c>
 80032d4:	231a      	movs	r3, #26
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d000      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x22c>
 80032de:	e06b      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003306:	e057      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d11c      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x29c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d017      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x29c>
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d114      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2201      	movs	r2, #1
 8003358:	4013      	ands	r3, r2
 800335a:	2b01      	cmp	r3, #1
 800335c:	d119      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x2de>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d014      	beq.n	8003392 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800338e:	2301      	movs	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003392:	f7fe f911 	bl	80015b8 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800339e:	429a      	cmp	r2, r3
 80033a0:	d802      	bhi.n	80033a8 <HAL_SPI_TransmitReceive+0x2f4>
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	3301      	adds	r3, #1
 80033a6:	d102      	bne.n	80033ae <HAL_SPI_TransmitReceive+0x2fa>
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80033ae:	232b      	movs	r3, #43	; 0x2b
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2203      	movs	r2, #3
 80033b4:	701a      	strb	r2, [r3, #0]
        goto error;
 80033b6:	e02a      	b.n	800340e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1a2      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x254>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d19d      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f904 	bl	80035e0 <SPI_EndRxTxTransaction>
 80033d8:	1e03      	subs	r3, r0, #0
 80033da:	d007      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80033dc:	232b      	movs	r3, #43	; 0x2b
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033ea:	e010      	b.n	800340e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	e000      	b.n	800340e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800340c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2251      	movs	r2, #81	; 0x51
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2250      	movs	r2, #80	; 0x50
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800341e:	232b      	movs	r3, #43	; 0x2b
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	781b      	ldrb	r3, [r3, #0]
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b00c      	add	sp, #48	; 0x30
 800342a:	bd80      	pop	{r7, pc}

0800342c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343c:	e050      	b.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	d04d      	beq.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003444:	f7fe f8b8 	bl	80015b8 <HAL_GetTick>
 8003448:	0002      	movs	r2, r0
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d902      	bls.n	800345a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d142      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	21e0      	movs	r1, #224	; 0xe0
 8003466:	438a      	bics	r2, r1
 8003468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	2382      	movs	r3, #130	; 0x82
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	429a      	cmp	r2, r3
 8003474:	d113      	bne.n	800349e <SPI_WaitFlagStateUntilTimeout+0x72>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	429a      	cmp	r2, r3
 8003480:	d005      	beq.n	800348e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	429a      	cmp	r2, r3
 800348c:	d107      	bne.n	800349e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	438a      	bics	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d110      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4914      	ldr	r1, [pc, #80]	; (8003508 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0189      	lsls	r1, r1, #6
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2251      	movs	r2, #81	; 0x51
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2250      	movs	r2, #80	; 0x50
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e00f      	b.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	425a      	negs	r2, r3
 80034f0:	4153      	adcs	r3, r2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	001a      	movs	r2, r3
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d19f      	bne.n	800343e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}
 8003508:	ffffdfff 	.word	0xffffdfff

0800350c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	2382      	movs	r3, #130	; 0x82
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	429a      	cmp	r2, r3
 8003522:	d113      	bne.n	800354c <SPI_EndRxTransaction+0x40>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	429a      	cmp	r2, r3
 800352e:	d005      	beq.n	800353c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	429a      	cmp	r2, r3
 800353a:	d107      	bne.n	800354c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2140      	movs	r1, #64	; 0x40
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	2382      	movs	r3, #130	; 0x82
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	429a      	cmp	r2, r3
 8003556:	d12b      	bne.n	80035b0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	429a      	cmp	r2, r3
 8003562:	d012      	beq.n	800358a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	0013      	movs	r3, r2
 800356e:	2200      	movs	r2, #0
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	f7ff ff5b 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d02d      	beq.n	80035d6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	2220      	movs	r2, #32
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e026      	b.n	80035d8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0013      	movs	r3, r2
 8003594:	2200      	movs	r2, #0
 8003596:	2101      	movs	r1, #1
 8003598:	f7ff ff48 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d01a      	beq.n	80035d6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	2220      	movs	r2, #32
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e013      	b.n	80035d8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	0013      	movs	r3, r2
 80035ba:	2200      	movs	r2, #0
 80035bc:	2101      	movs	r1, #1
 80035be:	f7ff ff35 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d007      	beq.n	80035d6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	2220      	movs	r2, #32
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e000      	b.n	80035d8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b004      	add	sp, #16
 80035de:	bd80      	pop	{r7, pc}

080035e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	2382      	movs	r3, #130	; 0x82
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d112      	bne.n	800361e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	0013      	movs	r3, r2
 8003602:	2200      	movs	r2, #0
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	f7ff ff11 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d020      	beq.n	8003650 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	2220      	movs	r2, #32
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e019      	b.n	8003652 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2251      	movs	r2, #81	; 0x51
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b05      	cmp	r3, #5
 8003628:	d112      	bne.n	8003650 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	0013      	movs	r3, r2
 8003634:	2200      	movs	r2, #0
 8003636:	2101      	movs	r1, #1
 8003638:	f7ff fef8 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d007      	beq.n	8003650 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	2220      	movs	r2, #32
 8003646:	431a      	orrs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e000      	b.n	8003652 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b004      	add	sp, #16
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003664:	210e      	movs	r1, #14
 8003666:	187b      	adds	r3, r7, r1
 8003668:	4a08      	ldr	r2, [pc, #32]	; (800368c <USB_EnableGlobalInt+0x30>)
 800366a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	5a9b      	ldrh	r3, [r3, r2]
 8003672:	b29a      	uxth	r2, r3
 8003674:	187b      	adds	r3, r7, r1
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	ffffbf80 	.word	0xffffbf80

08003690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003698:	210e      	movs	r1, #14
 800369a:	187b      	adds	r3, r7, r1
 800369c:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <USB_DisableGlobalInt+0x3c>)
 800369e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	5a9b      	ldrh	r3, [r3, r2]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	187a      	adds	r2, r7, r1
 80036ac:	2100      	movs	r1, #0
 80036ae:	5e52      	ldrsh	r2, [r2, r1]
 80036b0:	43d2      	mvns	r2, r2
 80036b2:	b212      	sxth	r2, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	b21b      	sxth	r3, r3
 80036b8:	b299      	uxth	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	ffffbf80 	.word	0xffffbf80

080036d0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036d0:	b084      	sub	sp, #16
 80036d2:	b590      	push	{r4, r7, lr}
 80036d4:	46c6      	mov	lr, r8
 80036d6:	b500      	push	{lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	2004      	movs	r0, #4
 80036e0:	2410      	movs	r4, #16
 80036e2:	46a4      	mov	ip, r4
 80036e4:	2408      	movs	r4, #8
 80036e6:	46a0      	mov	r8, r4
 80036e8:	44b8      	add	r8, r7
 80036ea:	44c4      	add	ip, r8
 80036ec:	4460      	add	r0, ip
 80036ee:	6001      	str	r1, [r0, #0]
 80036f0:	6042      	str	r2, [r0, #4]
 80036f2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	2101      	movs	r1, #1
 80036fa:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	2100      	movs	r1, #0
 8003702:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2244      	movs	r2, #68	; 0x44
 8003708:	2100      	movs	r1, #0
 800370a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2250      	movs	r2, #80	; 0x50
 8003710:	2100      	movs	r1, #0
 8003712:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff ffa0 	bl	800365c <USB_EnableGlobalInt>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bc04      	pop	{r2}
 8003726:	4690      	mov	r8, r2
 8003728:	bc90      	pop	{r4, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	b004      	add	sp, #16
 800372e:	4718      	bx	r3

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	2600      	movs	r6, #0
 8003734:	4d0c      	ldr	r5, [pc, #48]	; (8003768 <__libc_init_array+0x38>)
 8003736:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	2600      	movs	r6, #0
 8003742:	f000 f82b 	bl	800379c <_init>
 8003746:	4d0a      	ldr	r5, [pc, #40]	; (8003770 <__libc_init_array+0x40>)
 8003748:	4c0a      	ldr	r4, [pc, #40]	; (8003774 <__libc_init_array+0x44>)
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	00b3      	lsls	r3, r6, #2
 8003756:	58eb      	ldr	r3, [r5, r3]
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	00b3      	lsls	r3, r6, #2
 8003760:	58eb      	ldr	r3, [r5, r3]
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	080037e8 	.word	0x080037e8
 800376c:	080037e8 	.word	0x080037e8
 8003770:	080037e8 	.word	0x080037e8
 8003774:	080037ec 	.word	0x080037ec

08003778 <memcpy>:
 8003778:	2300      	movs	r3, #0
 800377a:	b510      	push	{r4, lr}
 800377c:	429a      	cmp	r2, r3
 800377e:	d100      	bne.n	8003782 <memcpy+0xa>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	5ccc      	ldrb	r4, [r1, r3]
 8003784:	54c4      	strb	r4, [r0, r3]
 8003786:	3301      	adds	r3, #1
 8003788:	e7f8      	b.n	800377c <memcpy+0x4>

0800378a <memset>:
 800378a:	0003      	movs	r3, r0
 800378c:	1812      	adds	r2, r2, r0
 800378e:	4293      	cmp	r3, r2
 8003790:	d100      	bne.n	8003794 <memset+0xa>
 8003792:	4770      	bx	lr
 8003794:	7019      	strb	r1, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	e7f9      	b.n	800378e <memset+0x4>
	...

0800379c <_init>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr

080037a8 <_fini>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr

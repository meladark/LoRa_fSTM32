
LoRa_fSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca0  08002ca0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca0  08002ca0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca0  08002ca0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000008  08002cb0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08002cb0  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009544  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a93  00000000  00000000  00029574  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  0002b910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001363d  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000082dc  00000000  00000000  0003f76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077a7e  00000000  00000000  00047a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf4c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  000bf544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c6c 	.word	0x08002c6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002c6c 	.word	0x08002c6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LoRa_Init>:

uint8_t Sub[1] = {0};
/**
 * Функция инициализации LoRa
 */
void LoRa_Init(SPI_HandleTypeDef hspi1){
 8000220:	b084      	sub	sp, #16
 8000222:	b5b0      	push	{r4, r5, r7, lr}
 8000224:	af00      	add	r7, sp, #0
 8000226:	2510      	movs	r5, #16
 8000228:	197c      	adds	r4, r7, r5
 800022a:	6020      	str	r0, [r4, #0]
 800022c:	6061      	str	r1, [r4, #4]
 800022e:	60a2      	str	r2, [r4, #8]
 8000230:	60e3      	str	r3, [r4, #12]
	spi = hspi1;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <LoRa_Init+0x54>)
 8000234:	197a      	adds	r2, r7, r5
 8000236:	0018      	movs	r0, r3
 8000238:	0011      	movs	r1, r2
 800023a:	2358      	movs	r3, #88	; 0x58
 800023c:	001a      	movs	r2, r3
 800023e:	f002 fd03 	bl	8002c48 <memcpy>
	LoRa_Sleep();
 8000242:	f000 f853 	bl	80002ec <LoRa_Sleep>
	HAL_Delay(100);
 8000246:	2064      	movs	r0, #100	; 0x64
 8000248:	f000 fc28 	bl	8000a9c <HAL_Delay>
	LoRa_Write(OpMode, 0x80);
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <LoRa_Init+0x58>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f88e 	bl	8000374 <LoRa_Write>
	HAL_Delay(100);
 8000258:	2064      	movs	r0, #100	; 0x64
 800025a:	f000 fc1f 	bl	8000a9c <HAL_Delay>
	LoRa_STD();
 800025e:	f000 f869 	bl	8000334 <LoRa_STD>
	HAL_Delay(100);
 8000262:	2064      	movs	r0, #100	; 0x64
 8000264:	f000 fc1a 	bl	8000a9c <HAL_Delay>
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	bcb0      	pop	{r4, r5, r7}
 800026e:	bc08      	pop	{r3}
 8000270:	b004      	add	sp, #16
 8000272:	4718      	bx	r3
 8000274:	20000030 	.word	0x20000030
 8000278:	20000002 	.word	0x20000002

0800027c <isTransmitting>:

uint8_t isTransmitting(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	LoRa_Read(OpMode, Sub);
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <isTransmitting+0x64>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <isTransmitting+0x68>)
 8000286:	0011      	movs	r1, r2
 8000288:	0018      	movs	r0, r3
 800028a:	f000 f8af 	bl	80003ec <LoRa_Read>
	if ((Sub[0] & 0x03) == 0x03){
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <isTransmitting+0x68>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	001a      	movs	r2, r3
 8000294:	2303      	movs	r3, #3
 8000296:	4013      	ands	r3, r2
 8000298:	2b03      	cmp	r3, #3
 800029a:	d108      	bne.n	80002ae <isTransmitting+0x32>
		if ((Sub[0] & 0x07) == 0x07){
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <isTransmitting+0x68>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	001a      	movs	r2, r3
 80002a2:	2307      	movs	r3, #7
 80002a4:	4013      	ands	r3, r2
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d001      	beq.n	80002ae <isTransmitting+0x32>
			//CaD Detection
		}else{
			return 1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	e015      	b.n	80002da <isTransmitting+0x5e>
		}
	}
	LoRa_Read(IrqFlags, Sub);
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <isTransmitting+0x6c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4a0c      	ldr	r2, [pc, #48]	; (80002e4 <isTransmitting+0x68>)
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 f898 	bl	80003ec <LoRa_Read>
	if ((Sub[0] & 0x08) == 0x08){
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <isTransmitting+0x68>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	001a      	movs	r2, r3
 80002c2:	2308      	movs	r3, #8
 80002c4:	4013      	ands	r3, r2
 80002c6:	d007      	beq.n	80002d8 <isTransmitting+0x5c>
		LoRa_Write(IrqFlags, Sub[0]);
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <isTransmitting+0x6c>)
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <isTransmitting+0x68>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f000 f84e 	bl	8000374 <LoRa_Write>
	}
	return 0;
 80002d8:	2300      	movs	r3, #0
}
 80002da:	0018      	movs	r0, r3
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000002 	.word	0x20000002
 80002e4:	20000024 	.word	0x20000024
 80002e8:	20000003 	.word	0x20000003

080002ec <LoRa_Sleep>:


void LoRa_Sleep(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	LoRa_Read(OpMode, Sub);
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <LoRa_Sleep+0x40>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <LoRa_Sleep+0x44>)
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 f877 	bl	80003ec <LoRa_Read>
	Sub[0] = (Sub[0] | 0x80) & 0xfe;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <LoRa_Sleep+0x44>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2280      	movs	r2, #128	; 0x80
 8000304:	4252      	negs	r2, r2
 8000306:	4313      	orrs	r3, r2
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2201      	movs	r2, #1
 800030c:	4393      	bics	r3, r2
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <LoRa_Sleep+0x44>)
 8000312:	701a      	strb	r2, [r3, #0]
	LoRa_Write(OpMode, Sub[0]);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <LoRa_Sleep+0x40>)
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <LoRa_Sleep+0x44>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	0019      	movs	r1, r3
 800031e:	0010      	movs	r0, r2
 8000320:	f000 f828 	bl	8000374 <LoRa_Write>
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	20000002 	.word	0x20000002
 8000330:	20000024 	.word	0x20000024

08000334 <LoRa_STD>:

void LoRa_STD(){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	LoRa_Read(OpMode, Sub);
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <LoRa_STD+0x38>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <LoRa_STD+0x3c>)
 800033e:	0011      	movs	r1, r2
 8000340:	0018      	movs	r0, r3
 8000342:	f000 f853 	bl	80003ec <LoRa_Read>
	Sub[0] = (Sub[0] | 0x81);
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <LoRa_STD+0x3c>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	227f      	movs	r2, #127	; 0x7f
 800034c:	4252      	negs	r2, r2
 800034e:	4313      	orrs	r3, r2
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <LoRa_STD+0x3c>)
 8000354:	701a      	strb	r2, [r3, #0]
	LoRa_Write(OpMode, Sub[0]);
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <LoRa_STD+0x38>)
 8000358:	781a      	ldrb	r2, [r3, #0]
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <LoRa_STD+0x3c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	0019      	movs	r1, r3
 8000360:	0010      	movs	r0, r2
 8000362:	f000 f807 	bl	8000374 <LoRa_Write>
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000002 	.word	0x20000002
 8000370:	20000024 	.word	0x20000024

08000374 <LoRa_Write>:
uint8_t reg[2] = {0x00, 0x00};
uint8_t answer[2] = {0x00, 0x00};
/**
 * Функция записи данных в LoRa
 */
void LoRa_Write(uint8_t Reg, uint8_t Change){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	0002      	movs	r2, r0
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	1dbb      	adds	r3, r7, #6
 8000382:	1c0a      	adds	r2, r1, #0
 8000384:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_RESET);
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <LoRa_Write+0x68>)
 8000388:	8819      	ldrh	r1, [r3, #0]
 800038a:	23a0      	movs	r3, #160	; 0xa0
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	2200      	movs	r2, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fdd3 	bl	8000f3c <HAL_GPIO_WritePin>
	reg[0] = Reg | 0x80;
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2280      	movs	r2, #128	; 0x80
 800039c:	4252      	negs	r2, r2
 800039e:	4313      	orrs	r3, r2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <LoRa_Write+0x6c>)
 80003a4:	701a      	strb	r2, [r3, #0]
	reg[1] = Change;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <LoRa_Write+0x6c>)
 80003a8:	1dba      	adds	r2, r7, #6
 80003aa:	7812      	ldrb	r2, [r2, #0]
 80003ac:	705a      	strb	r2, [r3, #1]
	rc = HAL_SPI_Transmit(&spi, reg, 2, HAL_MAX_DELAY);
 80003ae:	2301      	movs	r3, #1
 80003b0:	425b      	negs	r3, r3
 80003b2:	490b      	ldr	r1, [pc, #44]	; (80003e0 <LoRa_Write+0x6c>)
 80003b4:	480b      	ldr	r0, [pc, #44]	; (80003e4 <LoRa_Write+0x70>)
 80003b6:	2202      	movs	r2, #2
 80003b8:	f001 fe78 	bl	80020ac <HAL_SPI_Transmit>
 80003bc:	0003      	movs	r3, r0
 80003be:	001a      	movs	r2, r3
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <LoRa_Write+0x74>)
 80003c2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_SET);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <LoRa_Write+0x68>)
 80003c6:	8819      	ldrh	r1, [r3, #0]
 80003c8:	23a0      	movs	r3, #160	; 0xa0
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	2201      	movs	r2, #1
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fdb4 	bl	8000f3c <HAL_GPIO_WritePin>
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b002      	add	sp, #8
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000028 	.word	0x20000028
 80003e4:	20000030 	.word	0x20000030
 80003e8:	2000002c 	.word	0x2000002c

080003ec <LoRa_Read>:


/**
 * Функция чтения регистра из LoRa
 */
void LoRa_Read(uint8_t Reg, uint8_t* Ans){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_RESET);
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <LoRa_Read+0x78>)
 80003fc:	8819      	ldrh	r1, [r3, #0]
 80003fe:	23a0      	movs	r3, #160	; 0xa0
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	2200      	movs	r2, #0
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fd99 	bl	8000f3c <HAL_GPIO_WritePin>
	reg[0] = Reg & 0x7f; // при отладке возникла проблема, что между опусканием SS и отправкой данных слишком мало времени
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	227f      	movs	r2, #127	; 0x7f
 8000410:	4013      	ands	r3, r2
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <LoRa_Read+0x7c>)
 8000416:	701a      	strb	r2, [r3, #0]
	reg[1] = 0x00;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <LoRa_Read+0x7c>)
 800041a:	2200      	movs	r2, #0
 800041c:	705a      	strb	r2, [r3, #1]
	rc = HAL_SPI_Transmit(&spi, reg, 1, HAL_MAX_DELAY);
 800041e:	2301      	movs	r3, #1
 8000420:	425b      	negs	r3, r3
 8000422:	4911      	ldr	r1, [pc, #68]	; (8000468 <LoRa_Read+0x7c>)
 8000424:	4811      	ldr	r0, [pc, #68]	; (800046c <LoRa_Read+0x80>)
 8000426:	2201      	movs	r2, #1
 8000428:	f001 fe40 	bl	80020ac <HAL_SPI_Transmit>
 800042c:	0003      	movs	r3, r0
 800042e:	001a      	movs	r2, r3
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <LoRa_Read+0x84>)
 8000432:	701a      	strb	r2, [r3, #0]
	rc = HAL_SPI_Receive(&spi, Ans, 1, HAL_MAX_DELAY);
 8000434:	2301      	movs	r3, #1
 8000436:	425b      	negs	r3, r3
 8000438:	6839      	ldr	r1, [r7, #0]
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <LoRa_Read+0x80>)
 800043c:	2201      	movs	r2, #1
 800043e:	f001 ff83 	bl	8002348 <HAL_SPI_Receive>
 8000442:	0003      	movs	r3, r0
 8000444:	001a      	movs	r2, r3
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <LoRa_Read+0x84>)
 8000448:	701a      	strb	r2, [r3, #0]
 	HAL_GPIO_WritePin(GPIOA, Select_chip, GPIO_PIN_SET);
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <LoRa_Read+0x78>)
 800044c:	8819      	ldrh	r1, [r3, #0]
 800044e:	23a0      	movs	r3, #160	; 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2201      	movs	r2, #1
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fd71 	bl	8000f3c <HAL_GPIO_WritePin>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000000 	.word	0x20000000
 8000468:	20000028 	.word	0x20000028
 800046c:	20000030 	.word	0x20000030
 8000470:	2000002c 	.word	0x2000002c

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b09b      	sub	sp, #108	; 0x6c
 8000478:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 faaf 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f861 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f000 f925 	bl	80006d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000486:	f000 f8c5 	bl	8000614 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800048a:	f000 f8fb 	bl	8000684 <MX_USB_PCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t RESET_LORA = 7;
 800048e:	231e      	movs	r3, #30
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	2207      	movs	r2, #7
 8000494:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //Установить RESET LoRa в 0
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <main+0xc8>)
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fd4d 	bl	8000f3c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80004a2:	20c8      	movs	r0, #200	; 0xc8
 80004a4:	f000 fafa 	bl	8000a9c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //Установить RESET LoRa в 0
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <main+0xc8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fd44 	bl	8000f3c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80004b4:	20c8      	movs	r0, #200	; 0xc8
 80004b6:	f000 faf1 	bl	8000a9c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //Установить RESET LoRa в 0
 80004ba:	4b20      	ldr	r3, [pc, #128]	; (800053c <main+0xc8>)
 80004bc:	2201      	movs	r2, #1
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fd3b 	bl	8000f3c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80004c6:	2032      	movs	r0, #50	; 0x32
 80004c8:	f000 fae8 	bl	8000a9c <HAL_Delay>

  uint8_t OpMode[1] = {0x00};
 80004cc:	230c      	movs	r3, #12
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
  uint8_t tes[1] = {0x01};
 80004d4:	2308      	movs	r3, #8
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
  uint8_t mode[2] = {0x00, 0x00};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	705a      	strb	r2, [r3, #1]
  uint8_t fall[2] = {0x01, 0x00};
 80004e8:	003b      	movs	r3, r7
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	003b      	movs	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	705a      	strb	r2, [r3, #1]
  HAL_StatusTypeDef rc;
  LoRa_Init(hspi1);
 80004f4:	4c12      	ldr	r4, [pc, #72]	; (8000540 <main+0xcc>)
 80004f6:	466b      	mov	r3, sp
 80004f8:	0018      	movs	r0, r3
 80004fa:	0023      	movs	r3, r4
 80004fc:	3310      	adds	r3, #16
 80004fe:	2248      	movs	r2, #72	; 0x48
 8000500:	0019      	movs	r1, r3
 8000502:	f002 fba1 	bl	8002c48 <memcpy>
 8000506:	6820      	ldr	r0, [r4, #0]
 8000508:	6861      	ldr	r1, [r4, #4]
 800050a:	68a2      	ldr	r2, [r4, #8]
 800050c:	68e3      	ldr	r3, [r4, #12]
 800050e:	f7ff fe87 	bl	8000220 <LoRa_Init>
  while (1)
  {

	  //OpMode[0]++;
	  LoRa_Read(0x01, mode);
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	0019      	movs	r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff ff68 	bl	80003ec <LoRa_Read>
	  int k = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
	  LoRa_Read(29, fall);
 8000520:	003b      	movs	r3, r7
 8000522:	0019      	movs	r1, r3
 8000524:	201d      	movs	r0, #29
 8000526:	f7ff ff61 	bl	80003ec <LoRa_Read>
	  int y = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
	  if (!isTransmitting()){
 800052e:	f7ff fea5 	bl	800027c <isTransmitting>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d1ed      	bne.n	8000512 <main+0x9e>
		  int l = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  {
 800053a:	e7ea      	b.n	8000512 <main+0x9e>
 800053c:	50000400 	.word	0x50000400
 8000540:	20000088 	.word	0x20000088

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b09f      	sub	sp, #124	; 0x7c
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	2440      	movs	r4, #64	; 0x40
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	2338      	movs	r3, #56	; 0x38
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f002 fb80 	bl	8002c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	232c      	movs	r3, #44	; 0x2c
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fb78 	bl	8002c5a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	0018      	movs	r0, r3
 800056e:	2328      	movs	r3, #40	; 0x28
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f002 fb71 	bl	8002c5a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <SystemClock_Config+0xc8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a24      	ldr	r2, [pc, #144]	; (8000610 <SystemClock_Config+0xcc>)
 800057e:	401a      	ands	r2, r3
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xc8>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	0109      	lsls	r1, r1, #4
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2221      	movs	r2, #33	; 0x21
 800058e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0252      	lsls	r2, r2, #9
 8000596:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2201      	movs	r2, #1
 800059c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2200      	movs	r2, #0
 80005a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fe2a 	bl	8001200 <HAL_RCC_OscConfig>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80005b0:	f000 f91c 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	212c      	movs	r1, #44	; 0x2c
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	220f      	movs	r2, #15
 80005ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2202      	movs	r2, #2
 80005c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2101      	movs	r1, #1
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 f9e1 	bl	80019a0 <HAL_RCC_ClockConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005e2:	f000 f903 	bl	80007ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	04d2      	lsls	r2, r2, #19
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fb7a 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000600:	f000 f8f4 	bl	80007ec <Error_Handler>
  }
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b01f      	add	sp, #124	; 0x7c
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	40007000 	.word	0x40007000
 8000610:	ffffe7ff 	.word	0xffffe7ff

08000614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_SPI1_Init+0x68>)
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <MX_SPI1_Init+0x6c>)
 800061c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_SPI1_Init+0x68>)
 8000620:	2282      	movs	r2, #130	; 0x82
 8000622:	0052      	lsls	r2, r2, #1
 8000624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_SPI1_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_SPI1_Init+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_SPI1_Init+0x68>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_SPI1_Init+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_SPI1_Init+0x68>)
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MX_SPI1_Init+0x68>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_SPI1_Init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_SPI1_Init+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_SPI1_Init+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_SPI1_Init+0x68>)
 8000660:	2207      	movs	r2, #7
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <MX_SPI1_Init+0x68>)
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fcb6 	bl	8001fd8 <HAL_SPI_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000670:	f000 f8bc 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000088 	.word	0x20000088
 8000680:	40013000 	.word	0x40013000

08000684 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <MX_USB_PCD_Init+0x48>)
 800068c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 8000690:	2208      	movs	r2, #8
 8000692:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 8000696:	2202      	movs	r2, #2
 8000698:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 800069c:	2202      	movs	r2, #2
 800069e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_USB_PCD_Init+0x44>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fc5f 	bl	8000f78 <HAL_PCD_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80006be:	f000 f895 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000e0 	.word	0x200000e0
 80006cc:	40005c00 	.word	0x40005c00

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f002 faba 	bl	8002c5a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <MX_GPIO_Init+0x110>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <MX_GPIO_Init+0x110>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b3b      	ldr	r3, [pc, #236]	; (80007e0 <MX_GPIO_Init+0x110>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <MX_GPIO_Init+0x110>)
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <MX_GPIO_Init+0x110>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
 800070a:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <MX_GPIO_Init+0x110>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <MX_GPIO_Init+0x110>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <MX_GPIO_Init+0x110>)
 800071c:	2102      	movs	r1, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_GPIO_Init+0x110>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fc00 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_GPIO_Init+0x114>)
 800073e:	2200      	movs	r2, #0
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fbfa 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	220c      	movs	r2, #12
 800074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	193a      	adds	r2, r7, r4
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	0011      	movs	r1, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fa6c 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2210      	movs	r2, #16
 800076c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2201      	movs	r2, #1
 8000772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	193a      	adds	r2, r7, r4
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fa59 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_GPIO_Init+0x118>)
 8000794:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	000c      	movs	r4, r1
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <MX_GPIO_Init+0x114>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f000 fa48 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2201      	movs	r2, #1
 80007bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <MX_GPIO_Init+0x114>)
 80007ce:	0019      	movs	r1, r3
 80007d0:	0010      	movs	r0, r2
 80007d2:	f000 fa35 	bl	8000c40 <HAL_GPIO_Init>

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b009      	add	sp, #36	; 0x24
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40021000 	.word	0x40021000
 80007e4:	50000400 	.word	0x50000400
 80007e8:	00000407 	.word	0x00000407

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_MspInit+0x24>)
 80007fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x24>)
 8000802:	2101      	movs	r1, #1
 8000804:	430a      	orrs	r2, r1
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_MspInit+0x24>)
 800080a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_MspInit+0x24>)
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0549      	lsls	r1, r1, #21
 8000812:	430a      	orrs	r2, r1
 8000814:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	230c      	movs	r3, #12
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f002 fa11 	bl	8002c5a <memset>
  if(hspi->Instance==SPI1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <HAL_SPI_MspInit+0x80>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d129      	bne.n	8000896 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_SPI_MspInit+0x84>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_SPI_MspInit+0x84>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0149      	lsls	r1, r1, #5
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_SPI_MspInit+0x84>)
 8000852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <HAL_SPI_MspInit+0x84>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_SPI_MspInit+0x84>)
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000868:	210c      	movs	r1, #12
 800086a:	187b      	adds	r3, r7, r1
 800086c:	22e0      	movs	r2, #224	; 0xe0
 800086e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2203      	movs	r2, #3
 8000880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	187a      	adds	r2, r7, r1
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 f9d5 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b008      	add	sp, #32
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_PCD_MspInit+0x28>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_PCD_MspInit+0x2c>)
 80008bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_PCD_MspInit+0x2c>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0409      	lsls	r1, r1, #16
 80008c4:	430a      	orrs	r2, r1
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40005c00 	.word	0x40005c00
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f8b6 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <SystemInit+0x64>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <SystemInit+0x64>)
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	0049      	lsls	r1, r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <SystemInit+0x64>)
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <SystemInit+0x64>)
 8000924:	4913      	ldr	r1, [pc, #76]	; (8000974 <SystemInit+0x68>)
 8000926:	400a      	ands	r2, r1
 8000928:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SystemInit+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <SystemInit+0x64>)
 8000930:	4911      	ldr	r1, [pc, #68]	; (8000978 <SystemInit+0x6c>)
 8000932:	400a      	ands	r2, r1
 8000934:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <SystemInit+0x64>)
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <SystemInit+0x64>)
 800093c:	2101      	movs	r1, #1
 800093e:	438a      	bics	r2, r1
 8000940:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <SystemInit+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <SystemInit+0x64>)
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <SystemInit+0x70>)
 800094a:	400a      	ands	r2, r1
 800094c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <SystemInit+0x64>)
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <SystemInit+0x64>)
 8000954:	490a      	ldr	r1, [pc, #40]	; (8000980 <SystemInit+0x74>)
 8000956:	400a      	ands	r2, r1
 8000958:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SystemInit+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <SystemInit+0x78>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0512      	lsls	r2, r2, #20
 8000966:	609a      	str	r2, [r3, #8]
#endif
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40021000 	.word	0x40021000
 8000974:	88ff400c 	.word	0x88ff400c
 8000978:	fef6fff6 	.word	0xfef6fff6
 800097c:	fffbffff 	.word	0xfffbffff
 8000980:	ff02ffff 	.word	0xff02ffff
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800098c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800098e:	e003      	b.n	8000998 <LoopCopyDataInit>

08000990 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000992:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000994:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000996:	3104      	adds	r1, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800099c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800099e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009a0:	d3f6      	bcc.n	8000990 <CopyDataInit>
  ldr  r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80009a4:	e002      	b.n	80009ac <LoopFillZerobss>

080009a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80009a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80009a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009aa:	3204      	adds	r2, #4

080009ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <LoopForever+0x16>)
  cmp  r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009b0:	d3f9      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b2:	f7ff ffab 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f002 f923 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fd5b 	bl	8000474 <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
   ldr   r0, =_estack
 80009c0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80009c4:	08002ca8 	.word	0x08002ca8
  ldr  r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009cc:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80009d0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80009d4:	20000358 	.word	0x20000358

080009d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_COMP_IRQHandler>
	...

080009dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x3c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Init+0x3c>)
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f811 	bl	8000a1c <HAL_InitTick>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff fef7 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_InitTick+0x50>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	23fa      	movs	r3, #250	; 0xfa
 8000a32:	0099      	lsls	r1, r3, #2
 8000a34:	0010      	movs	r0, r2
 8000a36:	f7ff fb67 	bl	8000108 <__udivsi3>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 f8f2 	bl	8000c26 <HAL_SYSTICK_Config>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d004      	beq.n	8000a50 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000a46:	230f      	movs	r3, #15
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e006      	b.n	8000a5e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 f8cf 	bl	8000bfc <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000a5e:	230f      	movs	r3, #15
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	781b      	ldrb	r3, [r3, #0]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  uwTick++;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_IncTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_IncTick+0x14>)
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000354 	.word	0x20000354

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000354 	.word	0x20000354

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff fff0 	bl	8000a88 <HAL_GetTick>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	d002      	beq.n	8000abc <HAL_Delay+0x20>
  {
    wait++;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	f7ff ffe3 	bl	8000a88 <HAL_GetTick>
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d8f7      	bhi.n	8000abe <HAL_Delay+0x22>
  {
  }
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b7f      	cmp	r3, #127	; 0x7f
 8000aec:	d932      	bls.n	8000b54 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <NVIC_SetPriority+0xd4>)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	230f      	movs	r3, #15
 8000af8:	400b      	ands	r3, r1
 8000afa:	3b08      	subs	r3, #8
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3306      	adds	r3, #6
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	18d3      	adds	r3, r2, r3
 8000b04:	3304      	adds	r3, #4
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	1dfa      	adds	r2, r7, #7
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	2203      	movs	r2, #3
 8000b10:	400a      	ands	r2, r1
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	21ff      	movs	r1, #255	; 0xff
 8000b16:	4091      	lsls	r1, r2
 8000b18:	000a      	movs	r2, r1
 8000b1a:	43d2      	mvns	r2, r2
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	019b      	lsls	r3, r3, #6
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	401a      	ands	r2, r3
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2303      	movs	r3, #3
 8000b30:	4003      	ands	r3, r0
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b36:	481d      	ldr	r0, [pc, #116]	; (8000bac <NVIC_SetPriority+0xd4>)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001c      	movs	r4, r3
 8000b3e:	230f      	movs	r3, #15
 8000b40:	4023      	ands	r3, r4
 8000b42:	3b08      	subs	r3, #8
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	430a      	orrs	r2, r1
 8000b48:	3306      	adds	r3, #6
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	18c3      	adds	r3, r0, r3
 8000b4e:	3304      	adds	r3, #4
 8000b50:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b52:	e027      	b.n	8000ba4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <NVIC_SetPriority+0xd8>)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	33c0      	adds	r3, #192	; 0xc0
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	589b      	ldr	r3, [r3, r2]
 8000b64:	1dfa      	adds	r2, r7, #7
 8000b66:	7812      	ldrb	r2, [r2, #0]
 8000b68:	0011      	movs	r1, r2
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	00d2      	lsls	r2, r2, #3
 8000b70:	21ff      	movs	r1, #255	; 0xff
 8000b72:	4091      	lsls	r1, r2
 8000b74:	000a      	movs	r2, r1
 8000b76:	43d2      	mvns	r2, r2
 8000b78:	401a      	ands	r2, r3
 8000b7a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	019b      	lsls	r3, r3, #6
 8000b80:	22ff      	movs	r2, #255	; 0xff
 8000b82:	401a      	ands	r2, r3
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	4003      	ands	r3, r0
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <NVIC_SetPriority+0xd8>)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	33c0      	adds	r3, #192	; 0xc0
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	501a      	str	r2, [r3, r0]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b003      	add	sp, #12
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <SysTick_Config+0x40>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d901      	bls.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e010      	b.n	8000bec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <SysTick_Config+0x44>)
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	3a01      	subs	r2, #1
 8000bd0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff7d 	bl	8000ad8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SysTick_Config+0x44>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x44>)
 8000be6:	2207      	movs	r2, #7
 8000be8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	00ffffff 	.word	0x00ffffff
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	210f      	movs	r1, #15
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	1c02      	adds	r2, r0, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <NVIC_SetPriority>
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ffbf 	bl	8000bb4 <SysTick_Config>
 8000c36:	0003      	movs	r3, r0
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c56:	e155      	b.n	8000f04 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <HAL_GPIO_Init+0x30>
 8000c6e:	e146      	b.n	8000efe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x40>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	58d3      	ldr	r3, [r2, r3]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2207      	movs	r2, #7
 8000c92:	4013      	ands	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	2107      	movs	r1, #7
 8000cac:	400b      	ands	r3, r1
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d00b      	beq.n	8000ce8 <HAL_GPIO_Init+0xa8>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cdc:	2b11      	cmp	r3, #17
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	43da      	mvns	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	2201      	movs	r2, #1
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2203      	movs	r2, #3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	055b      	lsls	r3, r3, #21
 8000db6:	4013      	ands	r3, r2
 8000db8:	d100      	bne.n	8000dbc <HAL_GPIO_Init+0x17c>
 8000dba:	e0a0      	b.n	8000efe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc0:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc8:	4a55      	ldr	r2, [pc, #340]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	589b      	ldr	r3, [r3, r2]
 8000dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d01f      	beq.n	8000e36 <HAL_GPIO_Init+0x1f6>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4a      	ldr	r2, [pc, #296]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x1f2>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a49      	ldr	r2, [pc, #292]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_GPIO_Init+0x2ec>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x1ea>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a47      	ldr	r2, [pc, #284]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x1e6>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <HAL_GPIO_Init+0x2f4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x1e2>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e00a      	b.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x1f8>
 8000e36:	2300      	movs	r3, #0
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	025b      	lsls	r3, r3, #9
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	035b      	lsls	r3, r3, #13
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	039b      	lsls	r3, r3, #14
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_GPIO_Init+0x2f8>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	40da      	lsrs	r2, r3
 8000f0c:	1e13      	subs	r3, r2, #0
 8000f0e:	d000      	beq.n	8000f12 <HAL_GPIO_Init+0x2d2>
 8000f10:	e6a2      	b.n	8000c58 <HAL_GPIO_Init+0x18>
  }
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b006      	add	sp, #24
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	50000400 	.word	0x50000400
 8000f28:	50000800 	.word	0x50000800
 8000f2c:	50000c00 	.word	0x50000c00
 8000f30:	50001000 	.word	0x50001000
 8000f34:	50001c00 	.word	0x50001c00
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	0008      	movs	r0, r1
 8000f46:	0011      	movs	r1, r2
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	1c02      	adds	r2, r0, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	1c7b      	adds	r3, r7, #1
 8000f50:	1c0a      	adds	r2, r1, #0
 8000f52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000f54:	1c7b      	adds	r3, r7, #1
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5c:	1cbb      	adds	r3, r7, #2
 8000f5e:	881a      	ldrh	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f66:	1cbb      	adds	r3, r7, #2
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	; 0x2c
 8000f7c:	af06      	add	r7, sp, #24
 8000f7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0e4      	b.n	8001154 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a73      	ldr	r2, [pc, #460]	; (800115c <HAL_PCD_Init+0x1e4>)
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d108      	bne.n	8000fa8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	238a      	movs	r3, #138	; 0x8a
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff fc80 	bl	80008a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a6c      	ldr	r2, [pc, #432]	; (800115c <HAL_PCD_Init+0x1e4>)
 8000fac:	2103      	movs	r1, #3
 8000fae:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 fdd3 	bl	8002b60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e043      	b.n	800104c <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	183b      	adds	r3, r7, r0
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	2129      	movs	r1, #41	; 0x29
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	185b      	adds	r3, r3, r1
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fd8:	183b      	adds	r3, r7, r0
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	2128      	movs	r1, #40	; 0x28
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	18d3      	adds	r3, r2, r3
 8000fe4:	185b      	adds	r3, r3, r1
 8000fe6:	183a      	adds	r2, r7, r0
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fec:	183b      	adds	r3, r7, r0
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	183a      	adds	r2, r7, r0
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	b291      	uxth	r1, r2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	015b      	lsls	r3, r3, #5
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	3336      	adds	r3, #54	; 0x36
 8000ffe:	1c0a      	adds	r2, r1, #0
 8001000:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001002:	183b      	adds	r3, r7, r0
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	212b      	movs	r1, #43	; 0x2b
 800100a:	015b      	lsls	r3, r3, #5
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	185b      	adds	r3, r3, r1
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001014:	183b      	adds	r3, r7, r0
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	015b      	lsls	r3, r3, #5
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	3338      	adds	r3, #56	; 0x38
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001024:	183b      	adds	r3, r7, r0
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	18d3      	adds	r3, r2, r3
 800102e:	333c      	adds	r3, #60	; 0x3c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001034:	183b      	adds	r3, r7, r0
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3202      	adds	r2, #2
 800103c:	0152      	lsls	r2, r2, #5
 800103e:	2100      	movs	r1, #0
 8001040:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001042:	183b      	adds	r3, r7, r0
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	183b      	adds	r3, r7, r0
 8001048:	3201      	adds	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3b4      	bcc.n	8000fc4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e03f      	b.n	80010e4 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001064:	200f      	movs	r0, #15
 8001066:	183b      	adds	r3, r7, r0
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	232a      	movs	r3, #42	; 0x2a
 800106e:	33ff      	adds	r3, #255	; 0xff
 8001070:	0152      	lsls	r2, r2, #5
 8001072:	188a      	adds	r2, r1, r2
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800107a:	183b      	adds	r3, r7, r0
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	2394      	movs	r3, #148	; 0x94
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	0152      	lsls	r2, r2, #5
 8001086:	188a      	adds	r2, r1, r2
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	183a      	adds	r2, r7, r0
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001090:	183b      	adds	r3, r7, r0
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	232c      	movs	r3, #44	; 0x2c
 8001098:	33ff      	adds	r3, #255	; 0xff
 800109a:	0152      	lsls	r2, r2, #5
 800109c:	188a      	adds	r2, r1, r2
 800109e:	18d3      	adds	r3, r2, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a4:	183b      	adds	r3, r7, r0
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	239c      	movs	r3, #156	; 0x9c
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	0152      	lsls	r2, r2, #5
 80010b0:	188a      	adds	r2, r1, r2
 80010b2:	18d3      	adds	r3, r2, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010b8:	183b      	adds	r3, r7, r0
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	239e      	movs	r3, #158	; 0x9e
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	0152      	lsls	r2, r2, #5
 80010c4:	188a      	adds	r2, r1, r2
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010cc:	183b      	adds	r3, r7, r0
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	320a      	adds	r2, #10
 80010d4:	0152      	lsls	r2, r2, #5
 80010d6:	2100      	movs	r1, #0
 80010d8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010da:	183b      	adds	r3, r7, r0
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	183b      	adds	r3, r7, r0
 80010e0:	3201      	adds	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3b8      	bcc.n	8001064 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	466a      	mov	r2, sp
 80010fa:	0011      	movs	r1, r2
 80010fc:	001a      	movs	r2, r3
 80010fe:	3210      	adds	r2, #16
 8001100:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001102:	c170      	stmia	r1!, {r4, r5, r6}
 8001104:	ca30      	ldmia	r2!, {r4, r5}
 8001106:	c130      	stmia	r1!, {r4, r5}
 8001108:	6859      	ldr	r1, [r3, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f001 fd47 	bl	8002ba0 <USB_DevInit>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d005      	beq.n	8001122 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_PCD_Init+0x1e4>)
 800111a:	2102      	movs	r1, #2
 800111c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e018      	b.n	8001154 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2224      	movs	r2, #36	; 0x24
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_PCD_Init+0x1e4>)
 800112e:	2101      	movs	r1, #1
 8001130:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d103      	bne.n	8001142 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	0018      	movs	r0, r3
 800113e:	f000 f834 	bl	80011aa <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d103      	bne.n	8001152 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	0018      	movs	r0, r3
 800114e:	f000 f807 	bl	8001160 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b005      	add	sp, #20
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	00000229 	.word	0x00000229

08001160 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	239b      	movs	r3, #155	; 0x9b
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	2101      	movs	r1, #1
 8001176:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2258      	movs	r2, #88	; 0x58
 800117c:	5a9b      	ldrh	r3, [r3, r2]
 800117e:	b29b      	uxth	r3, r3
 8001180:	2201      	movs	r2, #1
 8001182:	4313      	orrs	r3, r2
 8001184:	b299      	uxth	r1, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2258      	movs	r2, #88	; 0x58
 800118a:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2258      	movs	r2, #88	; 0x58
 8001190:	5a9b      	ldrh	r3, [r3, r2]
 8001192:	b29b      	uxth	r3, r3
 8001194:	2202      	movs	r2, #2
 8001196:	4313      	orrs	r3, r2
 8001198:	b299      	uxth	r1, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2258      	movs	r2, #88	; 0x58
 800119e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	239a      	movs	r3, #154	; 0x9a
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	2101      	movs	r1, #1
 80011c0:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	2398      	movs	r3, #152	; 0x98
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	2100      	movs	r1, #0
 80011ca:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2254      	movs	r2, #84	; 0x54
 80011d0:	5a9b      	ldrh	r3, [r3, r2]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2201      	movs	r2, #1
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b299      	uxth	r1, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2254      	movs	r2, #84	; 0x54
 80011de:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2254      	movs	r2, #84	; 0x54
 80011e4:	5a9b      	ldrh	r3, [r3, r2]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2202      	movs	r2, #2
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b299      	uxth	r1, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2254      	movs	r2, #84	; 0x54
 80011f2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 fbbc 	bl	800198c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001214:	4bc8      	ldr	r3, [pc, #800]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	220c      	movs	r2, #12
 800121a:	4013      	ands	r3, r2
 800121c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121e:	4bc6      	ldr	r3, [pc, #792]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x36>
 8001234:	e07e      	b.n	8001334 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	429a      	cmp	r2, r3
 800124a:	d10d      	bne.n	8001268 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4bba      	ldr	r3, [pc, #744]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x5a>
 8001258:	e06b      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d167      	bne.n	8001332 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	f000 fb92 	bl	800198c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	429a      	cmp	r2, r3
 8001272:	d107      	bne.n	8001284 <HAL_RCC_OscConfig+0x84>
 8001274:	4bb0      	ldr	r3, [pc, #704]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4baf      	ldr	r3, [pc, #700]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0249      	lsls	r1, r1, #9
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e027      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	02db      	lsls	r3, r3, #11
 800128c:	429a      	cmp	r2, r3
 800128e:	d10e      	bne.n	80012ae <HAL_RCC_OscConfig+0xae>
 8001290:	4ba9      	ldr	r3, [pc, #676]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4ba8      	ldr	r3, [pc, #672]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	02c9      	lsls	r1, r1, #11
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4ba5      	ldr	r3, [pc, #660]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0249      	lsls	r1, r1, #9
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e012      	b.n	80012d4 <HAL_RCC_OscConfig+0xd4>
 80012ae:	4ba2      	ldr	r3, [pc, #648]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4ba1      	ldr	r3, [pc, #644]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012b4:	49a1      	ldr	r1, [pc, #644]	; (800153c <HAL_RCC_OscConfig+0x33c>)
 80012b6:	400a      	ands	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	4b9f      	ldr	r3, [pc, #636]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	025b      	lsls	r3, r3, #9
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4b9b      	ldr	r3, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b9a      	ldr	r3, [pc, #616]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012ce:	499c      	ldr	r1, [pc, #624]	; (8001540 <HAL_RCC_OscConfig+0x340>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d015      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbd4 	bl	8000a88 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e4:	e009      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff fbcf 	bl	8000a88 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d902      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f000 fb49 	bl	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fa:	4b8f      	ldr	r3, [pc, #572]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d0ef      	beq.n	80012e6 <HAL_RCC_OscConfig+0xe6>
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fbbe 	bl	8000a88 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fbb9 	bl	8000a88 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e333      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001324:	4b84      	ldr	r3, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x112>
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d100      	bne.n	8001340 <HAL_RCC_OscConfig+0x140>
 800133e:	e098      	b.n	8001472 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	2220      	movs	r2, #32
 800134a:	4013      	ands	r3, r2
 800134c:	d009      	beq.n	8001362 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800134e:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b79      	ldr	r3, [pc, #484]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001354:	2120      	movs	r1, #32
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	2220      	movs	r2, #32
 800135e:	4393      	bics	r3, r2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d13d      	bne.n	80013ea <HAL_RCC_OscConfig+0x1ea>
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d13a      	bne.n	80013ea <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001374:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2204      	movs	r2, #4
 800137a:	4013      	ands	r3, r2
 800137c:	d004      	beq.n	8001388 <HAL_RCC_OscConfig+0x188>
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e301      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a6d      	ldr	r2, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 800138e:	4013      	ands	r3, r2
 8001390:	0019      	movs	r1, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	021a      	lsls	r2, r3, #8
 8001398:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800139a:	430a      	orrs	r2, r1
 800139c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800139e:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2209      	movs	r2, #9
 80013a4:	4393      	bics	r3, r2
 80013a6:	0019      	movs	r1, r3
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013b0:	f000 fc20 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 80013b4:	0001      	movs	r1, r0
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	220f      	movs	r2, #15
 80013be:	4013      	ands	r3, r2
 80013c0:	4a61      	ldr	r2, [pc, #388]	; (8001548 <HAL_RCC_OscConfig+0x348>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	000a      	movs	r2, r1
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <HAL_RCC_OscConfig+0x34c>)
 80013ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80013cc:	2513      	movs	r5, #19
 80013ce:	197c      	adds	r4, r7, r5
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fb23 	bl	8000a1c <HAL_InitTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013da:	197b      	adds	r3, r7, r5
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d047      	beq.n	8001472 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013e2:	2313      	movs	r3, #19
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	e2d0      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d027      	beq.n	8001440 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013f0:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2209      	movs	r2, #9
 80013f6:	4393      	bics	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fb41 	bl	8000a88 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fb3c 	bl	8000a88 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e2b6      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	d0f1      	beq.n	800140c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_RCC_OscConfig+0x344>)
 800142e:	4013      	ands	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e018      	b.n	8001472 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001446:	2101      	movs	r1, #1
 8001448:	438a      	bics	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb1c 	bl	8000a88 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fb17 	bl	8000a88 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e291      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2204      	movs	r2, #4
 800146e:	4013      	ands	r3, r2
 8001470:	d1f1      	bne.n	8001456 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2210      	movs	r2, #16
 8001478:	4013      	ands	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x27e>
 800147c:	e09f      	b.n	80015be <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d13f      	bne.n	8001504 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x29c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e277      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x350>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	0a19      	lsrs	r1, r3, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	061a      	lsls	r2, r3, #24
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	0b5b      	lsrs	r3, r3, #13
 80014ca:	3301      	adds	r3, #1
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	0212      	lsls	r2, r2, #8
 80014d0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	210f      	movs	r1, #15
 80014da:	400b      	ands	r3, r1
 80014dc:	491a      	ldr	r1, [pc, #104]	; (8001548 <HAL_RCC_OscConfig+0x348>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x34c>)
 80014e4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80014e6:	2513      	movs	r5, #19
 80014e8:	197c      	adds	r4, r7, r5
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff fa96 	bl	8000a1c <HAL_InitTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014f4:	197b      	adds	r3, r7, r5
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d060      	beq.n	80015be <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80014fc:	2313      	movs	r3, #19
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	e243      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03e      	beq.n	800158a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_OscConfig+0x338>)
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	0049      	lsls	r1, r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fab5 	bl	8000a88 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001522:	e017      	b.n	8001554 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001524:	f7ff fab0 	bl	8000a88 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d910      	bls.n	8001554 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e22a      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40021000 	.word	0x40021000
 800153c:	fffeffff 	.word	0xfffeffff
 8001540:	fffbffff 	.word	0xfffbffff
 8001544:	ffffe0ff 	.word	0xffffe0ff
 8001548:	08002c84 	.word	0x08002c84
 800154c:	20000004 	.word	0x20000004
 8001550:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001554:	4bc6      	ldr	r3, [pc, #792]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d0e1      	beq.n	8001524 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4bc3      	ldr	r3, [pc, #780]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4ac3      	ldr	r2, [pc, #780]	; (8001874 <HAL_RCC_OscConfig+0x674>)
 8001566:	4013      	ands	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156e:	4bc0      	ldr	r3, [pc, #768]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001574:	4bbe      	ldr	r3, [pc, #760]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	0a19      	lsrs	r1, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	061a      	lsls	r2, r3, #24
 8001582:	4bbb      	ldr	r3, [pc, #748]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	e019      	b.n	80015be <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158a:	4bb9      	ldr	r3, [pc, #740]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4bb8      	ldr	r3, [pc, #736]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001590:	49b9      	ldr	r1, [pc, #740]	; (8001878 <HAL_RCC_OscConfig+0x678>)
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fa77 	bl	8000a88 <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a0:	f7ff fa72 	bl	8000a88 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1ec      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015b2:	4baf      	ldr	r3, [pc, #700]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2208      	movs	r2, #8
 80015c4:	4013      	ands	r3, r2
 80015c6:	d036      	beq.n	8001636 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d019      	beq.n	8001604 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d0:	4ba7      	ldr	r3, [pc, #668]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80015d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d4:	4ba6      	ldr	r3, [pc, #664]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa54 	bl	8000a88 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff fa4f 	bl	8000a88 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1c9      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f8:	4b9d      	ldr	r3, [pc, #628]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80015fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d0f1      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3e6>
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001604:	4b9a      	ldr	r3, [pc, #616]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001608:	4b99      	ldr	r3, [pc, #612]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fa3a 	bl	8000a88 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fa35 	bl	8000a88 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1af      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162c:	4b90      	ldr	r3, [pc, #576]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800162e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d1f1      	bne.n	800161a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2204      	movs	r2, #4
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x442>
 8001640:	e0af      	b.n	80017a2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2323      	movs	r3, #35	; 0x23
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b89      	ldr	r3, [pc, #548]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800164c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	055b      	lsls	r3, r3, #21
 8001652:	4013      	ands	r3, r2
 8001654:	d10a      	bne.n	800166c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b86      	ldr	r3, [pc, #536]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800165a:	4b85      	ldr	r3, [pc, #532]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0549      	lsls	r1, r1, #21
 8001660:	430a      	orrs	r2, r1
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001664:	2323      	movs	r3, #35	; 0x23
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d11a      	bne.n	80016ae <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001678:	4b80      	ldr	r3, [pc, #512]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b7f      	ldr	r3, [pc, #508]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0049      	lsls	r1, r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff f9ff 	bl	8000a88 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7ff f9fa 	bl	8000a88 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e174      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x67c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_OscConfig+0x4ca>
 80016ba:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0049      	lsls	r1, r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	651a      	str	r2, [r3, #80]	; 0x50
 80016c8:	e031      	b.n	800172e <HAL_RCC_OscConfig+0x52e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x4ec>
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d6:	4b66      	ldr	r3, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016d8:	4967      	ldr	r1, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x678>)
 80016da:	400a      	ands	r2, r1
 80016dc:	651a      	str	r2, [r3, #80]	; 0x50
 80016de:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016e4:	4966      	ldr	r1, [pc, #408]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
 80016ea:	e020      	b.n	800172e <HAL_RCC_OscConfig+0x52e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	23a0      	movs	r3, #160	; 0xa0
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10e      	bne.n	8001716 <HAL_RCC_OscConfig+0x516>
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fc:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	651a      	str	r2, [r3, #80]	; 0x50
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170a:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0049      	lsls	r1, r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	651a      	str	r2, [r3, #80]	; 0x50
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x52e>
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171a:	4b55      	ldr	r3, [pc, #340]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800171c:	4956      	ldr	r1, [pc, #344]	; (8001878 <HAL_RCC_OscConfig+0x678>)
 800171e:	400a      	ands	r2, r1
 8001720:	651a      	str	r2, [r3, #80]	; 0x50
 8001722:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001728:	4955      	ldr	r1, [pc, #340]	; (8001880 <HAL_RCC_OscConfig+0x680>)
 800172a:	400a      	ands	r2, r1
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff f9a7 	bl	8000a88 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800173e:	e009      	b.n	8001754 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff f9a2 	bl	8000a88 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e11b      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d0ef      	beq.n	8001740 <HAL_RCC_OscConfig+0x540>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff f991 	bl	8000a88 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176a:	e009      	b.n	8001780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff f98c 	bl	8000a88 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	4a43      	ldr	r2, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x684>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e105      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d1ef      	bne.n	800176c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178c:	2323      	movs	r3, #35	; 0x23
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800179c:	493a      	ldr	r1, [pc, #232]	; (8001888 <HAL_RCC_OscConfig+0x688>)
 800179e:	400a      	ands	r2, r1
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2220      	movs	r2, #32
 80017a8:	4013      	ands	r3, r2
 80017aa:	d049      	beq.n	8001840 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d026      	beq.n	8001802 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80017c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0189      	lsls	r1, r1, #6
 80017d6:	430a      	orrs	r2, r1
 80017d8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff f955 	bl	8000a88 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017e4:	f7ff f950 	bl	8000a88 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0ca      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f1      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5e4>
 8001800:	e01e      	b.n	8001840 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001808:	2101      	movs	r1, #1
 800180a:	438a      	bics	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_OscConfig+0x68c>)
 8001814:	491e      	ldr	r1, [pc, #120]	; (8001890 <HAL_RCC_OscConfig+0x690>)
 8001816:	400a      	ands	r2, r1
 8001818:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff f935 	bl	8000a88 <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001824:	f7ff f930 	bl	8000a88 <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0aa      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d1f1      	bne.n	8001824 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <HAL_RCC_OscConfig+0x64a>
 8001848:	e09f      	b.n	800198a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d100      	bne.n	8001852 <HAL_RCC_OscConfig+0x652>
 8001850:	e078      	b.n	8001944 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	2b02      	cmp	r3, #2
 8001858:	d159      	bne.n	800190e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_RCC_OscConfig+0x670>)
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <HAL_RCC_OscConfig+0x694>)
 8001862:	400a      	ands	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f90f 	bl	8000a88 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x6aa>
 8001870:	40021000 	.word	0x40021000
 8001874:	ffff1fff 	.word	0xffff1fff
 8001878:	fffffeff 	.word	0xfffffeff
 800187c:	40007000 	.word	0x40007000
 8001880:	fffffbff 	.word	0xfffffbff
 8001884:	00001388 	.word	0x00001388
 8001888:	efffffff 	.word	0xefffffff
 800188c:	40010000 	.word	0x40010000
 8001890:	ffffdfff 	.word	0xffffdfff
 8001894:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f8f6 	bl	8000a88 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e070      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	049b      	lsls	r3, r3, #18
 80018b2:	4013      	ands	r3, r2
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a37      	ldr	r2, [pc, #220]	; (8001998 <HAL_RCC_OscConfig+0x798>)
 80018bc:	4013      	ands	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	431a      	orrs	r2, r3
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0449      	lsls	r1, r1, #17
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8d0 	bl	8000a88 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff f8cb 	bl	8000a88 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e045      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	049b      	lsls	r3, r3, #18
 8001908:	4013      	ands	r3, r2
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x6ee>
 800190c:	e03d      	b.n	800198a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 8001914:	4921      	ldr	r1, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x79c>)
 8001916:	400a      	ands	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff f8b5 	bl	8000a88 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff f8b0 	bl	8000a88 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e02a      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	049b      	lsls	r3, r3, #18
 800193e:	4013      	ands	r3, r2
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x724>
 8001942:	e022      	b.n	800198a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x794>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	429a      	cmp	r2, r3
 8001964:	d10f      	bne.n	8001986 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	23f0      	movs	r3, #240	; 0xf0
 800196a:	039b      	lsls	r3, r3, #14
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b00a      	add	sp, #40	; 0x28
 8001992:	bdb0      	pop	{r4, r5, r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	ff02ffff 	.word	0xff02ffff
 800199c:	feffffff 	.word	0xfeffffff

080019a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e10d      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d911      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b85      	ldr	r3, [pc, #532]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4393      	bics	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d4:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0f4      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d009      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	22f0      	movs	r2, #240	; 0xf0
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d100      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x70>
 8001a0e:	e089      	b.n	8001b24 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a18:	4b70      	ldr	r3, [pc, #448]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
 8001a22:	d120      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0d3      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	049b      	lsls	r3, r3, #18
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d114      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0c7      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a48:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0bc      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0b4      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7a:	f7ff f805 	bl	8000a88 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d111      	bne.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8a:	e009      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7fe fffc 	bl	8000a88 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	4a52      	ldr	r2, [pc, #328]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e097      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d1ef      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xec>
 8001aac:	e03a      	b.n	8001b24 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d111      	bne.n	8001ada <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab6:	e009      	b.n	8001acc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7fe ffe6 	bl	8000a88 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e081      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d1ef      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x118>
 8001ad8:	e024      	b.n	8001b24 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d11b      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7fe ffd0 	bl	8000a88 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e06b      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d1ef      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x144>
 8001b04:	e00e      	b.n	8001b24 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7fe ffbf 	bl	8000a88 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_RCC_ClockConfig+0x240>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e05a      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d211      	bcs.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	4393      	bics	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_ClockConfig+0x238>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e03c      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d00a      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x248>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	00da      	lsls	r2, r3, #3
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b94:	f000 f82e 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001b98:	0001      	movs	r1, r0
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_RCC_ClockConfig+0x23c>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_RCC_ClockConfig+0x24c>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	000a      	movs	r2, r1
 8001baa:	40da      	lsrs	r2, r3
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_ClockConfig+0x250>)
 8001bae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	250b      	movs	r5, #11
 8001bb2:	197c      	adds	r4, r7, r5
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7fe ff31 	bl	8000a1c <HAL_InitTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bbe:	197b      	adds	r3, r7, r5
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001bc6:	230b      	movs	r3, #11
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	00001388 	.word	0x00001388
 8001be4:	fffff8ff 	.word	0xfffff8ff
 8001be8:	ffffc7ff 	.word	0xffffc7ff
 8001bec:	08002c84 	.word	0x08002c84
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	220c      	movs	r2, #12
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d00e      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d00f      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d151      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d002      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001c1e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c20:	e057      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c24:	613b      	str	r3, [r7, #16]
      break;
 8001c26:	e054      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c2a:	613b      	str	r3, [r7, #16]
      break;
 8001c2c:	e051      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	0c9b      	lsrs	r3, r3, #18
 8001c32:	220f      	movs	r2, #15
 8001c34:	4013      	ands	r3, r2
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	0d9b      	lsrs	r3, r3, #22
 8001c40:	2203      	movs	r2, #3
 8001c42:	4013      	ands	r3, r2
 8001c44:	3301      	adds	r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	025b      	lsls	r3, r3, #9
 8001c50:	4013      	ands	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c58:	4353      	muls	r3, r2
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe fa53 	bl	8000108 <__udivsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e023      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d00f      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x9e>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	000a      	movs	r2, r1
 8001c76:	0152      	lsls	r2, r2, #5
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0193      	lsls	r3, r2, #6
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	185b      	adds	r3, r3, r1
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7fe fa3e 	bl	8000108 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00e      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	000a      	movs	r2, r1
 8001c96:	0152      	lsls	r2, r2, #5
 8001c98:	1a52      	subs	r2, r2, r1
 8001c9a:	0193      	lsls	r3, r2, #6
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	185b      	adds	r3, r3, r1
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fa2e 	bl	8000108 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
      break;
 8001cb4:	e00d      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0212      	lsls	r2, r2, #8
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
      break;
 8001cd0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cd2:	693b      	ldr	r3, [r7, #16]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b006      	add	sp, #24
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	003d0900 	.word	0x003d0900
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	017d7840 	.word	0x017d7840
 8001cec:	08002c94 	.word	0x08002c94

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d106      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001d0e:	e0dd      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001d10:	2317      	movs	r3, #23
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d18:	4ba4      	ldr	r3, [pc, #656]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	d10a      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0549      	lsls	r1, r1, #21
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d32:	2317      	movs	r3, #23
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b9d      	ldr	r3, [pc, #628]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b9a      	ldr	r3, [pc, #616]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d54:	f7fe fe98 	bl	8000a88 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7fe fe93 	bl	8000a88 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e118      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d7c:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	039b      	lsls	r3, r3, #14
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	039b      	lsls	r3, r3, #14
 8001d90:	4013      	ands	r3, r2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	039b      	lsls	r3, r3, #14
 8001da0:	4013      	ands	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	23c0      	movs	r3, #192	; 0xc0
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	401a      	ands	r2, r3
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d10a      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0e8      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dd0:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d049      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	4013      	ands	r3, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d004      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2220      	movs	r2, #32
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	23c0      	movs	r3, #192	; 0xc0
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d034      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d02e      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	4a65      	ldr	r2, [pc, #404]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e22:	4b62      	ldr	r3, [pc, #392]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	0309      	lsls	r1, r1, #12
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e30:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e36:	4960      	ldr	r1, [pc, #384]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e3c:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d014      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fe1c 	bl	8000a88 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e54:	e009      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fe17 	bl	8000a88 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e09b      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0ef      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	401a      	ands	r2, r3
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001e88:	4b48      	ldr	r3, [pc, #288]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	039b      	lsls	r3, r3, #14
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ea4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	401a      	ands	r2, r3
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eb6:	2317      	movs	r3, #23
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec6:	493f      	ldr	r1, [pc, #252]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	2203      	movs	r2, #3
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	220c      	movs	r2, #12
 8001efa:	4393      	bics	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	fffcffff 	.word	0xfffcffff
 8001fb8:	fff7ffff 	.word	0xfff7ffff
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	ffcfffff 	.word	0xffcfffff
 8001fc4:	efffffff 	.word	0xefffffff
 8001fc8:	fffff3ff 	.word	0xfffff3ff
 8001fcc:	ffffcfff 	.word	0xffffcfff
 8001fd0:	fbffffff 	.word	0xfbffffff
 8001fd4:	fff3ffff 	.word	0xfff3ffff

08001fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e059      	b.n	800209e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2251      	movs	r2, #81	; 0x51
 8001ff4:	5c9b      	ldrb	r3, [r3, r2]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2250      	movs	r2, #80	; 0x50
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f7fe fc0a 	bl	8000820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2251      	movs	r2, #81	; 0x51
 8002010:	2102      	movs	r1, #2
 8002012:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	438a      	bics	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6999      	ldr	r1, [r3, #24]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	400b      	ands	r3, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	0011      	movs	r1, r2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	2204      	movs	r2, #4
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <HAL_SPI_Init+0xd0>)
 800208a:	400a      	ands	r2, r1
 800208c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2251      	movs	r2, #81	; 0x51
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	fffff7ff 	.word	0xfffff7ff

080020ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020bc:	231f      	movs	r3, #31
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2250      	movs	r2, #80	; 0x50
 80020c8:	5c9b      	ldrb	r3, [r3, r2]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_SPI_Transmit+0x26>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e136      	b.n	8002340 <HAL_SPI_Transmit+0x294>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2250      	movs	r2, #80	; 0x50
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020da:	f7fe fcd5 	bl	8000a88 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80020e2:	2316      	movs	r3, #22
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	8812      	ldrh	r2, [r2, #0]
 80020ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2251      	movs	r2, #81	; 0x51
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d004      	beq.n	8002102 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80020f8:	231f      	movs	r3, #31
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002100:	e113      	b.n	800232a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_SPI_Transmit+0x64>
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002110:	231f      	movs	r3, #31
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
    goto error;
 8002118:	e107      	b.n	800232a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2251      	movs	r2, #81	; 0x51
 800211e:	2103      	movs	r1, #3
 8002120:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1dba      	adds	r2, r7, #6
 8002132:	8812      	ldrh	r2, [r2, #0]
 8002134:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1dba      	adds	r2, r7, #6
 800213a:	8812      	ldrh	r2, [r2, #0]
 800213c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	429a      	cmp	r2, r3
 8002166:	d108      	bne.n	800217a <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	01c9      	lsls	r1, r1, #7
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2240      	movs	r2, #64	; 0x40
 8002182:	4013      	ands	r3, r2
 8002184:	2b40      	cmp	r3, #64	; 0x40
 8002186:	d007      	beq.n	8002198 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2140      	movs	r1, #64	; 0x40
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d14e      	bne.n	8002242 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_SPI_Transmit+0x10a>
 80021ac:	2316      	movs	r3, #22
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d13f      	bne.n	8002236 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	881a      	ldrh	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	1c9a      	adds	r2, r3, #2
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021da:	e02c      	b.n	8002236 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d112      	bne.n	8002210 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	86da      	strh	r2, [r3, #54]	; 0x36
 800220e:	e012      	b.n	8002236 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002210:	f7fe fc3a 	bl	8000a88 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d802      	bhi.n	8002226 <HAL_SPI_Transmit+0x17a>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_SPI_Transmit+0x180>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800222c:	231f      	movs	r3, #31
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2203      	movs	r2, #3
 8002232:	701a      	strb	r2, [r3, #0]
          goto error;
 8002234:	e079      	b.n	800232a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1cd      	bne.n	80021dc <HAL_SPI_Transmit+0x130>
 8002240:	e04f      	b.n	80022e2 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_SPI_Transmit+0x1a8>
 800224a:	2316      	movs	r3, #22
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d141      	bne.n	80022d8 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800227a:	e02d      	b.n	80022d8 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d113      	bne.n	80022b2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b0:	e012      	b.n	80022d8 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b2:	f7fe fbe9 	bl	8000a88 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d802      	bhi.n	80022c8 <HAL_SPI_Transmit+0x21c>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_SPI_Transmit+0x222>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80022ce:	231f      	movs	r3, #31
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2203      	movs	r2, #3
 80022d4:	701a      	strb	r2, [r3, #0]
          goto error;
 80022d6:	e028      	b.n	800232a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1cc      	bne.n	800227c <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 fbe1 	bl	8002ab0 <SPI_EndRxTxTransaction>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10a      	bne.n	8002316 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800231e:	231f      	movs	r3, #31
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e000      	b.n	800232a <HAL_SPI_Transmit+0x27e>
  }

error:
 8002328:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2251      	movs	r2, #81	; 0x51
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2250      	movs	r2, #80	; 0x50
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800233a:	231f      	movs	r3, #31
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	781b      	ldrb	r3, [r3, #0]
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b008      	add	sp, #32
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002358:	2317      	movs	r3, #23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	2382      	movs	r3, #130	; 0x82
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	429a      	cmp	r2, r3
 800236a:	d113      	bne.n	8002394 <HAL_SPI_Receive+0x4c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10f      	bne.n	8002394 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2251      	movs	r2, #81	; 0x51
 8002378:	2104      	movs	r1, #4
 800237a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	881c      	ldrh	r4, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	0023      	movs	r3, r4
 800238c:	f000 f8fa 	bl	8002584 <HAL_SPI_TransmitReceive>
 8002390:	0003      	movs	r3, r0
 8002392:	e0f1      	b.n	8002578 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2250      	movs	r2, #80	; 0x50
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_SPI_Receive+0x5a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0ea      	b.n	8002578 <HAL_SPI_Receive+0x230>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2250      	movs	r2, #80	; 0x50
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023aa:	f7fe fb6d 	bl	8000a88 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2251      	movs	r2, #81	; 0x51
 80023b6:	5c9b      	ldrb	r3, [r3, r2]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d004      	beq.n	80023c8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80023be:	2317      	movs	r3, #23
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80023c6:	e0cc      	b.n	8002562 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_SPI_Receive+0x8e>
 80023ce:	1dbb      	adds	r3, r7, #6
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80023d6:	2317      	movs	r3, #23
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80023de:	e0c0      	b.n	8002562 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2251      	movs	r2, #81	; 0x51
 80023e4:	2104      	movs	r1, #4
 80023e6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1dba      	adds	r2, r7, #6
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1dba      	adds	r2, r7, #6
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	429a      	cmp	r2, r3
 800242c:	d107      	bne.n	800243e <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4951      	ldr	r1, [pc, #324]	; (8002580 <HAL_SPI_Receive+0x238>)
 800243a:	400a      	ands	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d007      	beq.n	800245c <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d164      	bne.n	800252e <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002464:	e02f      	b.n	80024c6 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	2b01      	cmp	r3, #1
 8002472:	d115      	bne.n	80024a0 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	001a      	movs	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800249e:	e012      	b.n	80024c6 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a0:	f7fe faf2 	bl	8000a88 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d802      	bhi.n	80024b6 <HAL_SPI_Receive+0x16e>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	d102      	bne.n	80024bc <HAL_SPI_Receive+0x174>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d104      	bne.n	80024c6 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 80024bc:	2317      	movs	r3, #23
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2203      	movs	r2, #3
 80024c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80024c4:	e04d      	b.n	8002562 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ca      	bne.n	8002466 <HAL_SPI_Receive+0x11e>
 80024d0:	e032      	b.n	8002538 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d113      	bne.n	8002508 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	b292      	uxth	r2, r2
 80024ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	1c9a      	adds	r2, r3, #2
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002506:	e012      	b.n	800252e <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002508:	f7fe fabe 	bl	8000a88 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d802      	bhi.n	800251e <HAL_SPI_Receive+0x1d6>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_SPI_Receive+0x1dc>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8002524:	2317      	movs	r3, #23
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2203      	movs	r2, #3
 800252a:	701a      	strb	r2, [r3, #0]
          goto error;
 800252c:	e019      	b.n	8002562 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1cc      	bne.n	80024d2 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fa4c 	bl	80029dc <SPI_EndRxTransaction>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d002      	beq.n	800254e <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8002556:	2317      	movs	r3, #23
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e000      	b.n	8002562 <HAL_SPI_Receive+0x21a>
  }

error :
 8002560:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2251      	movs	r2, #81	; 0x51
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2250      	movs	r2, #80	; 0x50
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002572:	2317      	movs	r3, #23
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b007      	add	sp, #28
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	ffffbfff 	.word	0xffffbfff

08002584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	; 0x30
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	001a      	movs	r2, r3
 8002592:	1cbb      	adds	r3, r7, #2
 8002594:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002596:	2301      	movs	r3, #1
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800259a:	232b      	movs	r3, #43	; 0x2b
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2250      	movs	r2, #80	; 0x50
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x2c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e1a1      	b.n	80028f4 <HAL_SPI_TransmitReceive+0x370>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2250      	movs	r2, #80	; 0x50
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b8:	f7fe fa66 	bl	8000a88 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025c0:	2023      	movs	r0, #35	; 0x23
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	2151      	movs	r1, #81	; 0x51
 80025c8:	5c52      	ldrb	r2, [r2, r1]
 80025ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025d2:	231a      	movs	r3, #26
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	1cba      	adds	r2, r7, #2
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d012      	beq.n	800260a <HAL_SPI_TransmitReceive+0x86>
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	2382      	movs	r3, #130	; 0x82
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d108      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d104      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x7c>
 80025f6:	2323      	movs	r3, #35	; 0x23
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d004      	beq.n	800260a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8002600:	232b      	movs	r3, #43	; 0x2b
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
    goto error;
 8002608:	e169      	b.n	80028de <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_SPI_TransmitReceive+0x9a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_SPI_TransmitReceive+0x9a>
 8002616:	1cbb      	adds	r3, r7, #2
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800261e:	232b      	movs	r3, #43	; 0x2b
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    goto error;
 8002626:	e15a      	b.n	80028de <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2251      	movs	r2, #81	; 0x51
 800262c:	5c9b      	ldrb	r3, [r3, r2]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b04      	cmp	r3, #4
 8002632:	d003      	beq.n	800263c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2251      	movs	r2, #81	; 0x51
 8002638:	2105      	movs	r1, #5
 800263a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1cba      	adds	r2, r7, #2
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1cba      	adds	r2, r7, #2
 8002654:	8812      	ldrh	r2, [r2, #0]
 8002656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1cba      	adds	r2, r7, #2
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1cba      	adds	r2, r7, #2
 800266a:	8812      	ldrh	r2, [r2, #0]
 800266c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	4013      	ands	r3, r2
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d007      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d000      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x122>
 80026a4:	e07a      	b.n	800279c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x134>
 80026ae:	231a      	movs	r3, #26
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d166      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026dc:	e053      	b.n	8002786 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11b      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x1a0>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x1a0>
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d113      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	1c9a      	adds	r2, r3, #2
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2201      	movs	r2, #1
 800272c:	4013      	ands	r3, r2
 800272e:	2b01      	cmp	r3, #1
 8002730:	d119      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x1e2>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d014      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	b292      	uxth	r2, r2
 8002748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	1c9a      	adds	r2, r3, #2
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002762:	2301      	movs	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002766:	f7fe f98f 	bl	8000a88 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002772:	429a      	cmp	r2, r3
 8002774:	d807      	bhi.n	8002786 <HAL_SPI_TransmitReceive+0x202>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	3301      	adds	r3, #1
 800277a:	d004      	beq.n	8002786 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800277c:	232b      	movs	r3, #43	; 0x2b
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2203      	movs	r2, #3
 8002782:	701a      	strb	r2, [r3, #0]
        goto error;
 8002784:	e0ab      	b.n	80028de <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1a6      	bne.n	80026de <HAL_SPI_TransmitReceive+0x15a>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1a1      	bne.n	80026de <HAL_SPI_TransmitReceive+0x15a>
 800279a:	e07f      	b.n	800289c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x22c>
 80027a4:	231a      	movs	r3, #26
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d000      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x22c>
 80027ae:	e06b      	b.n	8002888 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d6:	e057      	b.n	8002888 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d11c      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x29c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d017      	beq.n	8002820 <HAL_SPI_TransmitReceive+0x29c>
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d114      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	2b01      	cmp	r3, #1
 800282c:	d119      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x2de>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d014      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800285e:	2301      	movs	r3, #1
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002862:	f7fe f911 	bl	8000a88 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800286e:	429a      	cmp	r2, r3
 8002870:	d802      	bhi.n	8002878 <HAL_SPI_TransmitReceive+0x2f4>
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	3301      	adds	r3, #1
 8002876:	d102      	bne.n	800287e <HAL_SPI_TransmitReceive+0x2fa>
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800287e:	232b      	movs	r3, #43	; 0x2b
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]
        goto error;
 8002886:	e02a      	b.n	80028de <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1a2      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x254>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d19d      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f904 	bl	8002ab0 <SPI_EndRxTxTransaction>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d007      	beq.n	80028bc <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80028ac:	232b      	movs	r3, #43	; 0x2b
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028ba:	e010      	b.n	80028de <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	e000      	b.n	80028de <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80028dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2251      	movs	r2, #81	; 0x51
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2250      	movs	r2, #80	; 0x50
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028ee:	232b      	movs	r3, #43	; 0x2b
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b00c      	add	sp, #48	; 0x30
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290c:	e050      	b.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	d04d      	beq.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002914:	f7fe f8b8 	bl	8000a88 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d902      	bls.n	800292a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d142      	bne.n	80029b0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	21e0      	movs	r1, #224	; 0xe0
 8002936:	438a      	bics	r2, r1
 8002938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	2382      	movs	r3, #130	; 0x82
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	429a      	cmp	r2, r3
 8002944:	d113      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0x72>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	429a      	cmp	r2, r3
 8002950:	d005      	beq.n	800295e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	429a      	cmp	r2, r3
 800295c:	d107      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	438a      	bics	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	429a      	cmp	r2, r3
 8002978:	d110      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4914      	ldr	r1, [pc, #80]	; (80029d8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002986:	400a      	ands	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0189      	lsls	r1, r1, #6
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2251      	movs	r2, #81	; 0x51
 80029a0:	2101      	movs	r1, #1
 80029a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2250      	movs	r2, #80	; 0x50
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e00f      	b.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	425a      	negs	r2, r3
 80029c0:	4153      	adcs	r3, r2
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	001a      	movs	r2, r3
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d19f      	bne.n	800290e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	ffffdfff 	.word	0xffffdfff

080029dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	2382      	movs	r3, #130	; 0x82
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d113      	bne.n	8002a1c <SPI_EndRxTransaction+0x40>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d005      	beq.n	8002a0c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d107      	bne.n	8002a1c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	438a      	bics	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	2382      	movs	r3, #130	; 0x82
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d12b      	bne.n	8002a80 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d012      	beq.n	8002a5a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	f7ff ff5b 	bl	80028fc <SPI_WaitFlagStateUntilTimeout>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d02d      	beq.n	8002aa6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	2220      	movs	r2, #32
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e026      	b.n	8002aa8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	0013      	movs	r3, r2
 8002a64:	2200      	movs	r2, #0
 8002a66:	2101      	movs	r1, #1
 8002a68:	f7ff ff48 	bl	80028fc <SPI_WaitFlagStateUntilTimeout>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d01a      	beq.n	8002aa6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	2220      	movs	r2, #32
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e013      	b.n	8002aa8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	0013      	movs	r3, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	f7ff ff35 	bl	80028fc <SPI_WaitFlagStateUntilTimeout>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d007      	beq.n	8002aa6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e000      	b.n	8002aa8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b004      	add	sp, #16
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	2382      	movs	r3, #130	; 0x82
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d112      	bne.n	8002aee <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	f7ff ff11 	bl	80028fc <SPI_WaitFlagStateUntilTimeout>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d020      	beq.n	8002b20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e019      	b.n	8002b22 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2251      	movs	r2, #81	; 0x51
 8002af2:	5c9b      	ldrb	r3, [r3, r2]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d112      	bne.n	8002b20 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	0013      	movs	r3, r2
 8002b04:	2200      	movs	r2, #0
 8002b06:	2101      	movs	r1, #1
 8002b08:	f7ff fef8 	bl	80028fc <SPI_WaitFlagStateUntilTimeout>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d007      	beq.n	8002b20 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2220      	movs	r2, #32
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e000      	b.n	8002b22 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b34:	210e      	movs	r1, #14
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <USB_EnableGlobalInt+0x30>)
 8002b3a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	5a9b      	ldrh	r3, [r3, r2]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	ffffbf80 	.word	0xffffbf80

08002b60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b68:	210e      	movs	r1, #14
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <USB_DisableGlobalInt+0x3c>)
 8002b6e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	5a9b      	ldrh	r3, [r3, r2]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	187a      	adds	r2, r7, r1
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5e52      	ldrsh	r2, [r2, r1]
 8002b80:	43d2      	mvns	r2, r2
 8002b82:	b212      	sxth	r2, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2240      	movs	r2, #64	; 0x40
 8002b8e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b004      	add	sp, #16
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	ffffbf80 	.word	0xffffbf80

08002ba0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	b590      	push	{r4, r7, lr}
 8002ba4:	46c6      	mov	lr, r8
 8002ba6:	b500      	push	{lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	2004      	movs	r0, #4
 8002bb0:	2410      	movs	r4, #16
 8002bb2:	46a4      	mov	ip, r4
 8002bb4:	2408      	movs	r4, #8
 8002bb6:	46a0      	mov	r8, r4
 8002bb8:	44b8      	add	r8, r7
 8002bba:	44c4      	add	ip, r8
 8002bbc:	4460      	add	r0, ip
 8002bbe:	6001      	str	r1, [r0, #0]
 8002bc0:	6042      	str	r2, [r0, #4]
 8002bc2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2244      	movs	r2, #68	; 0x44
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2250      	movs	r2, #80	; 0x50
 8002be0:	2100      	movs	r1, #0
 8002be2:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ffa0 	bl	8002b2c <USB_EnableGlobalInt>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bc04      	pop	{r2}
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	bc90      	pop	{r4, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	b004      	add	sp, #16
 8002bfe:	4718      	bx	r3

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	2600      	movs	r6, #0
 8002c04:	4d0c      	ldr	r5, [pc, #48]	; (8002c38 <__libc_init_array+0x38>)
 8002c06:	4c0d      	ldr	r4, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c08:	1b64      	subs	r4, r4, r5
 8002c0a:	10a4      	asrs	r4, r4, #2
 8002c0c:	42a6      	cmp	r6, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	2600      	movs	r6, #0
 8002c12:	f000 f82b 	bl	8002c6c <_init>
 8002c16:	4d0a      	ldr	r5, [pc, #40]	; (8002c40 <__libc_init_array+0x40>)
 8002c18:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <__libc_init_array+0x44>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	00b3      	lsls	r3, r6, #2
 8002c26:	58eb      	ldr	r3, [r5, r3]
 8002c28:	4798      	blx	r3
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	00b3      	lsls	r3, r6, #2
 8002c30:	58eb      	ldr	r3, [r5, r3]
 8002c32:	4798      	blx	r3
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08002ca0 	.word	0x08002ca0
 8002c3c:	08002ca0 	.word	0x08002ca0
 8002c40:	08002ca0 	.word	0x08002ca0
 8002c44:	08002ca4 	.word	0x08002ca4

08002c48 <memcpy>:
 8002c48:	2300      	movs	r3, #0
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d100      	bne.n	8002c52 <memcpy+0xa>
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	5ccc      	ldrb	r4, [r1, r3]
 8002c54:	54c4      	strb	r4, [r0, r3]
 8002c56:	3301      	adds	r3, #1
 8002c58:	e7f8      	b.n	8002c4c <memcpy+0x4>

08002c5a <memset>:
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	1812      	adds	r2, r2, r0
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d100      	bne.n	8002c64 <memset+0xa>
 8002c62:	4770      	bx	lr
 8002c64:	7019      	strb	r1, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	e7f9      	b.n	8002c5e <memset+0x4>
	...

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
